<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>王成飞博客</title>
  
  <subtitle>一切皆值得思考</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wangchengfei.info/"/>
  <updated>2020-08-24T05:54:29.631Z</updated>
  <id>http://wangchengfei.info/</id>
  
  <author>
    <name>王成飞</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>《计算广告》读后感</title>
    <link href="http://wangchengfei.info/2020/08/24/%E3%80%8A%E8%AE%A1%E7%AE%97%E5%B9%BF%E5%91%8A%E3%80%8B%E8%AF%BB%E5%90%8E%E6%84%9F/"/>
    <id>http://wangchengfei.info/2020/08/24/《计算广告》读后感/</id>
    <published>2020-08-24T05:06:49.000Z</published>
    <updated>2020-08-24T05:54:29.631Z</updated>
    
    <content type="html"><![CDATA[<h3 id="选书"><a href="#选书" class="headerlink" title="选书"></a>选书</h3><p>之前看了一本《增长黑客》的书，对投放的业务层面有一些新的认识，但在问题的抽象和系统抽象层面，没有深入的介绍，故想找一本可以对业务和系统都有介绍的书。</p><p>在网上查阅了很多资料后，选择了这本《计算广告：互联网商业变现的市场和技术》，书中对互联网广告的发展历史，市场结构，产品设计，系统设计，开源软件接收都有比较具体和深入的介绍，作为在线广告的从业者，无论是产品还是技术，都非常值得一读。</p><h3 id="读书"><a href="#读书" class="headerlink" title="读书"></a>读书</h3><h4 id="前言点评"><a href="#前言点评" class="headerlink" title="前言点评"></a>前言点评</h4><p>点评里真的很多大佬，百度深度学习实验室科学家，雅虎实验室广告科学副总裁，阿里妈妈负责人等，对此书可以全面、系统、深入的介绍广告都给出了很高的评价，此书初版于2015年，移动互联网发展的当下，对原生广告的思考和总结也很到位。</p><h4 id="免费的本质"><a href="#免费的本质" class="headerlink" title="免费的本质"></a>免费的本质</h4><p>互联网经历了网站到搜索，社交到电商，免费wifi，免费存储等互联网免费服务，而免费服务的背后，无一例外是面向广告主的收费模式。</p><h4 id="广告的进化"><a href="#广告的进化" class="headerlink" title="广告的进化"></a>广告的进化</h4><p>互联网广告初期，投放广告的形式和传统媒体一样，是平移传统的电视或广告牌模式，这种模式是根据时间段和用户量进行售卖，早期Yahoo的banner广告条就是最早的根据时间段售卖的广告，成为CPT广告。</p><p>由于流量和时间有限，那么短期内广告收入就会有增长瓶颈，如何突破瓶颈，就是后续的定向广告，根据人群标签再进行划分，例如最基础的地域标签，这样不同的广告主可以根据地域标签定向展示自己的广告。</p><p>如果定向广告也用完了，下一步就是基于上下文的广告，根据用户浏览的页面，解析出页面标签，推荐广告内容，例如基于汽车文章的汽车广告，基于美妆文章的化妆品广告推荐，这样广告场景又多了一份收入。</p><p>如果以上也不够了，大的平台还会有广告联盟，例如百度网盟、阿里妈妈、adsense等，可以将平台广告主的广告需求发布到网络，联合不同的站点进行推广。</p><h4 id="广告的特点"><a href="#广告的特点" class="headerlink" title="广告的特点"></a>广告的特点</h4><p>广告的流程和线下推广一致，找最合适的用户，推广合适的产品，赚取销售费用，而线上则是媒体方赚取推广费用，主要的收费模式分为两大类，按照量和按照效果，按照量的有CPT和CPM，按照效果的有CPA、CPS等。</p><p>典型的推广场景有搜索和媒体，搜索流量无疑是线上渠道中最优质的渠道，用户意图明确，转化率高；其中越接近最终转化场景的，效果越好，例如在淘宝店家推广时，使用阿里妈妈在淘宝体系内的搜索转化效果，会好于在新浪等媒体网站的搜索里。</p><p>在线广告的匹配需要用到线上广告数据或者媒体数据进行匹配，就会涉及数据的流动和计算逻辑，而转化的效果依赖数据准确和全面，依赖计算算法的优化，例如同一个广告给用户推荐三遍，转化效果会很差。</p><p>由于移动互联网的屏幕变小，广告形式上更多的基于分时场景进行投放，例如打开app时的开屏广告，浏览推荐信息的信息流广告，浏览内容时的挂载广告，而且要求广告和当前场景比较一致，称之为原生广告，例如视频做饭拿到的品牌电饭煲，点歌用的小度音响（节目叫什么生活来着）。</p><p>广告的技术实现上，由于场景不同，系统上会有差异，作者给出的通用架构非常受用，广告库和用户标签库作为基础数据，基于基础数据的用户行为数据，我成为三大主题数据，广告、用户、行为；基于广告数据倒排检索系统，基于三大数据的排序和收益管理系统，我成为三大系统，检索、排序、收益管理。</p><h4 id="广告系统的开源组合"><a href="#广告系统的开源组合" class="headerlink" title="广告系统的开源组合"></a>广告系统的开源组合</h4><p>Nginx作为广告系统的server，支持高并发、高稳定、可扩展。</p><p>Zookeeper最为集群的配置管理和服务管理。</p><p>Lucene作为检索服务，将广告数据生成支持全文检索的倒排。</p><p>Thrift作为跨语言的服务调用，当然还有谷歌的ProtoBuf。</p><p>Flume作为数据高速公路，支持低延时、高吞吐的数据处理。</p><p>Hadoop作为离线大量用户行为数据分析系统。</p><p>Redis作为在线标签库服务，支持高并发、易扩展的缓存服务。</p><p>Storm作为在线数据处理系统，支持低延时、高吞吐的数据计算。</p><p>Spark最为在线模型迭代的数据处理系统，支持增量的模型数据处理。</p><h3 id="用书"><a href="#用书" class="headerlink" title="用书"></a>用书</h3><h4 id="网站推荐"><a href="#网站推荐" class="headerlink" title="网站推荐"></a>网站推荐</h4><p>github图书地址：<a href="https://dirtysalt.github.io/html/computational-advertising.html" target="_blank" rel="noopener">https://dirtysalt.github.io/html/computational-advertising.html</a></p><p>中国广告协会：<a href="https://www.china-caa.org/" target="_blank" rel="noopener">https://www.china-caa.org/</a></p><h4 id="项目实战"><a href="#项目实战" class="headerlink" title="项目实战"></a>项目实战</h4><p>可以参照作者的架构图练习，画出更加直观通用的系统架构；当前业务的系统也可以参考架构图，分阶段的实施；对广告系统的整体认识上更加清晰。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;选书&quot;&gt;&lt;a href=&quot;#选书&quot; class=&quot;headerlink&quot; title=&quot;选书&quot;&gt;&lt;/a&gt;选书&lt;/h3&gt;&lt;p&gt;之前看了一本《增长黑客》的书，对投放的业务层面有一些新的认识，但在问题的抽象和系统抽象层面，没有深入的介绍，故想找一本可以对业务和系统都有介
      
    
    </summary>
    
    
      <category term="读后感 营销" scheme="http://wangchengfei.info/tags/%E8%AF%BB%E5%90%8E%E6%84%9F-%E8%90%A5%E9%94%80/"/>
    
  </entry>
  
  <entry>
    <title>《增长黑客》读后感</title>
    <link href="http://wangchengfei.info/2020/07/05/%E3%80%8A%E5%A2%9E%E9%95%BF%E9%BB%91%E5%AE%A2%E3%80%8B%E8%AF%BB%E5%90%8E%E6%84%9F/"/>
    <id>http://wangchengfei.info/2020/07/05/《增长黑客》读后感/</id>
    <published>2020-07-05T00:44:18.000Z</published>
    <updated>2020-07-07T01:22:05.427Z</updated>
    
    <content type="html"><![CDATA[<h3 id="选书"><a href="#选书" class="headerlink" title="选书"></a>选书</h3><p>最近做投放相关项目，新的业务和导流场景，虽然之前也做过相似的C端用户拉新项目，深知之前的方法和实践还不成体系，故想从理论上学习业内前人的经验总结，更好、更快、更正确的指导当前的项目。</p><p>黑客增长这本书是在中信书店的畅销书单上了解到，看完目录发现正是所求，加入购物车后在中信书店购物券的加持下果断下单。</p><h3 id="读书"><a href="#读书" class="headerlink" title="读书"></a>读书</h3><h4 id="有限资源获得最大限度成长"><a href="#有限资源获得最大限度成长" class="headerlink" title="有限资源获得最大限度成长"></a>有限资源获得最大限度成长</h4><p>无论是我们的人生目标、还是项目目标，都是在有限资源、有限时间约束下，让目标成果最大化的实践过程，而一个成体系的理论体系让我们明白是否在走弯路，例如日常不停迭代是否带来正向收益，我们的成果是在扩大还是缩小？</p><h4 id="让数据驱动增长"><a href="#让数据驱动增长" class="headerlink" title="让数据驱动增长"></a>让数据驱动增长</h4><p>GrowingIO创始人张梦溪说出了指导业务增长的手段，那就是用数据来衡量，数据是不带感情和偏见，最能接近客观现实的表达。</p><p>“If you are not growing, then you are dying! ”，很喜欢的一句话，一个企业无论何时都要思考成长问题，这也是资本对企业估值的根本逻辑。</p><h4 id="低成本、高效率的精准营销"><a href="#低成本、高效率的精准营销" class="headerlink" title="低成本、高效率的精准营销"></a>低成本、高效率的精准营销</h4><p>精准影响，找到投放效率最高的渠道，这是降低成本的关键，当前投放渠道是否考虑当前可用的所有渠道，并根据实验选出最优渠道。</p><h4 id="搭建增长团队"><a href="#搭建增长团队" class="headerlink" title="搭建增长团队"></a>搭建增长团队</h4><p>做增长，要有横向统一的团队，要有专人负责增长方向，在传统的职能划分的公司里，横向推动无疑是非常低效率且低效果的。</p><h4 id="好产品是增长的根本"><a href="#好产品是增长的根本" class="headerlink" title="好产品是增长的根本"></a>好产品是增长的根本</h4><p>在团队组建后，并不是开始猛推，而是衡量产品是否找到了“啊哈时刻”，也就是用户痛点，只有发现用户真正感兴趣的点，才是推广和增长的开始，在此之前都应该不断打磨和优化产品。那些花巨资推广，最后草草收场的公司和项目比比皆是。</p><h4 id="确定增长杠杆"><a href="#确定增长杠杆" class="headerlink" title="确定增长杠杆"></a>确定增长杠杆</h4><p>每个产品的目标不同，有的产品看注册、有的产品看下单流水、有的产品看浏览量、有的产品看安装量，不同产品增长使用指标不同，也就是不同产品要选出自己增长的指导指标是哪个，即“北极星指标”，有了指标就可以通过整合数据，形成数据报表，直观的发现每次增长活动的效果。</p><h4 id="快节奏实验"><a href="#快节奏实验" class="headerlink" title="快节奏实验"></a>快节奏实验</h4><p>做到这点，首先要支持实验能力，后续是支持快速迭代验证，最后还要有报表展示能力，这样才能在快速迭代后的总结会上对比分析出结论。实验能力、快速迭代、数据报表，我称为黑客增长的三板斧。</p><h4 id="获客：优化成本，扩大规模"><a href="#获客：优化成本，扩大规模" class="headerlink" title="获客：优化成本，扩大规模"></a>获客：优化成本，扩大规模</h4><p>设计渠道迭代实验，缩小渠道范围，寻找最优渠道，从小处着手，不断优化、调整渠道功能，根据实验数据不断实验循环。</p><h4 id="激活：让潜在用户使用产品"><a href="#激活：让潜在用户使用产品" class="headerlink" title="激活：让潜在用户使用产品"></a>激活：让潜在用户使用产品</h4><p>明确产品“啊哈时刻”，寻找潜在用户，消除用户体重的摩擦（或者门槛），设计触发物无缝引导产品使用。</p><h4 id="留存：唤醒并留住用户"><a href="#留存：唤醒并留住用户" class="headerlink" title="留存：唤醒并留住用户"></a>留存：唤醒并留住用户</h4><p>锁定最佳做法，例如发现浏览3次以上的留存高出3倍，首月下单3次的用户留存为80%，低于3次下单则为35%，那么问题从留存退化为如何让用户下单3次，比如可以发优惠券？</p><h4 id="变现：提供每位用户带来的收益"><a href="#变现：提供每位用户带来的收益" class="headerlink" title="变现：提供每位用户带来的收益"></a>变现：提供每位用户带来的收益</h4><p>比较印象深刻是定价相对论，比如电子书定价9美元，纸质书99美元，电子书加纸质书定价99美元，绝大部分用户就会选择99美元定价的纸质书加电子书。</p><p>一分钱差距，很多商品一分钱和免费存在天壤之别，其中一个例子是一个App预付费但是下载量很少，改为后付费，日下载达到7万的例子。</p><h4 id="良性循环：维持并加速增长"><a href="#良性循环：维持并加速增长" class="headerlink" title="良性循环：维持并加速增长"></a>良性循环：维持并加速增长</h4><p>任何产品都应避免增长停滞，要与鲨鱼为伍，另外使用数据分析发觉新的渠道场景，里面列举了很多小公司依赖谷歌或者facebook，最后因为google和facebook策略调整，导致新增骤降，最终惨淡收场；最后要引入全新视角，给想象插上翅膀。</p><h3 id="用书"><a href="#用书" class="headerlink" title="用书"></a>用书</h3><h4 id="网站推荐"><a href="#网站推荐" class="headerlink" title="网站推荐"></a>网站推荐</h4><p>此书除了整理体系化的知识，还组建了社区，网站也很值得推荐，网址如下：</p><p><a href="https://growthhackers.com/posts" target="_blank" rel="noopener">https://growthhackers.com/posts</a></p><h4 id="项目实战"><a href="#项目实战" class="headerlink" title="项目实战"></a>项目实战</h4><p>看完书后，调研公司内部系统，上线抽样能力，增加服务端、前端、策略端的AB实验能力，增加整站北极星指标，新建了以北极星为指导指标的报表，从此走上黑客增长之路。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;选书&quot;&gt;&lt;a href=&quot;#选书&quot; class=&quot;headerlink&quot; title=&quot;选书&quot;&gt;&lt;/a&gt;选书&lt;/h3&gt;&lt;p&gt;最近做投放相关项目，新的业务和导流场景，虽然之前也做过相似的C端用户拉新项目，深知之前的方法和实践还不成体系，故想从理论上学习业内前人的经验
      
    
    </summary>
    
    
      <category term="读后感" scheme="http://wangchengfei.info/tags/%E8%AF%BB%E5%90%8E%E6%84%9F/"/>
    
  </entry>
  
  <entry>
    <title>《百岁人生》读后感</title>
    <link href="http://wangchengfei.info/2020/05/24/%E3%80%8A%E7%99%BE%E5%B2%81%E4%BA%BA%E7%94%9F%E3%80%8B%E8%AF%BB%E5%90%8E%E6%84%9F/"/>
    <id>http://wangchengfei.info/2020/05/24/《百岁人生》读后感/</id>
    <published>2020-05-24T07:48:39.000Z</published>
    <updated>2020-05-25T03:17:54.894Z</updated>
    
    <content type="html"><![CDATA[<h3 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h3><p>在中信的店铺里看到这本排名很高的书，下面的评论也说很受启发，个人在人生的这个阶段也在思考职业规划的方向，故入手这本书，希望能在生活和职业方面受到一些启发。</p><p>书是中信出版社出版，书本质量、排版、翻译是我比较喜欢的一个出版社。</p><h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><p>首先书的开篇通过统计数据，展示了20世纪初之后，人们在现代医疗和生活水平提高的环境下，人们的寿命有了很大的提升。</p><p>寿命提升之后，我们之前的学习、工作、退休三段的人生模式是否适用，书中用三个不同时代的人物假设，推演了各自的虚拟人生。</p><p>通过总结三个不同时代的人物生活模式，分析在新的时代背景下，长寿这个礼物会在教育、工作、退休、家庭婚姻等方面产生哪些影响。</p><p>总结完新的人生模式后，在自我认识、人生阶段、政府和公司的运行模式等方面作者提出了当前存在的矛盾及可能的方案。</p><h3 id="长寿的影响"><a href="#长寿的影响" class="headerlink" title="长寿的影响"></a>长寿的影响</h3><p>可以预期的是我们会比前辈们更加长寿却不自知，在现在的生活和工作模式依然是祖辈们的三段方式：受教育、工作和退休。</p><p>加入和我们能够活到100岁而在60岁退休，我们将有40岁的退休时间，那么这40年的财务、家庭关系和自我实现如何解决。</p><p>最可能的样子是我们60岁后依旧工作到70，甚至80岁以上，来解决养老等生活问题。</p><h3 id="就业"><a href="#就业" class="headerlink" title="就业"></a>就业</h3><p>如果我们需要工作到80岁，那么我们的工作技能就不能只是之前受教育阶段所学、所知，受教育和工作更可能以受教育、工作、再受教育、再工作。。。，迭代的方式进行到多阶段的人生模式。</p><h3 id="资产"><a href="#资产" class="headerlink" title="资产"></a>资产</h3><p>在工作上可以积累有形资产（现金、房产、股票等），却不能积累无形资产（健康、亲友关系、激情、好奇心和创造力）。</p><h3 id="自我实现"><a href="#自我实现" class="headerlink" title="自我实现"></a>自我实现</h3><p>如果我们有了可循环的工作、学习、生活模式，我们会选择娱乐还是创造，对于大多数人来说娱乐40年是很无聊的事情，所以更现实的情况是选择自我实现，继续创造。</p><p>由于是多阶段的工作模式，我们在受教育和工作的各个阶段各有可能接触不同年龄层的同学和同事，公司、政府对员工的评估使用年龄的潜规则将越来越不适用。</p><p>由于高产出的行业都是人力资本为主，将来也会有越来越多的高端人才要求更加灵活的工作方式，比如高管的男性也可以要求在家陪伴刚出生的宝宝，得不到满足可以另寻他处，因为婚姻关系的维系一般要比工作关系更加长久。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>如果只有一年，人们实现一个商场；如果有一百年，人们将实现一个大教堂。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;缘起&quot;&gt;&lt;a href=&quot;#缘起&quot; class=&quot;headerlink&quot; title=&quot;缘起&quot;&gt;&lt;/a&gt;缘起&lt;/h3&gt;&lt;p&gt;在中信的店铺里看到这本排名很高的书，下面的评论也说很受启发，个人在人生的这个阶段也在思考职业规划的方向，故入手这本书，希望能在生活和职业方面
      
    
    </summary>
    
    
      <category term="读后感" scheme="http://wangchengfei.info/tags/%E8%AF%BB%E5%90%8E%E6%84%9F/"/>
    
  </entry>
  
  <entry>
    <title>《深度思考》读后感</title>
    <link href="http://wangchengfei.info/2020/05/10/%E3%80%8A%E6%B7%B1%E5%BA%A6%E6%80%9D%E8%80%83%E3%80%8B%E8%AF%BB%E5%90%8E%E6%84%9F/"/>
    <id>http://wangchengfei.info/2020/05/10/《深度思考》读后感/</id>
    <published>2020-05-10T11:24:29.000Z</published>
    <updated>2020-05-11T06:05:53.385Z</updated>
    
    <content type="html"><![CDATA[<h3 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h3><p>最近选了一些个人工作能力提升方面的书，包括《OKR工作法》提升业务目标设定和拆解的思路和方法；《行为设计学》提升在心理认知方面的深度，《深度思考》提升个人思维能力、理清职业发展上的困惑。</p><p>为什么选择了这本书，是因为 在京东的个人提升热榜中看到这本书，在知乎的个人书单里也看到这本书，《深度思考-不断逼近问题的本质》这个多么像是一个思考能力提升的书，看完后再review英文书名《Beyond the Label: Women, Leadership, and Success on Our Own Terms》，才知道这个很标题党，和思维训练无关，更像是一本回忆录，或者自传。</p><p>书的翻译很一般，有多处翻译错误，出版社是江苏凤凰文艺出版社，出版社的排版、翻译功底和中信出版社还是有差距。</p><p>书的作者是莫林·西凯，从欧莱雅普通的实习生做起，在个人的性格、选择、爱情、婚姻、家庭、能力、管理、审美等多个阶段的主题中描述了自己的感受和抉择，并最终做到香奈儿的全球CEO的故事。</p><h3 id="书的结构"><a href="#书的结构" class="headerlink" title="书的结构"></a>书的结构</h3><p>作者序中在商店挑选衣服的过程，引入到作者对法国的认识和喜爱，回忆学生时代在法国的生活和朋友，对美的重新认识，对结构主义的重新认识。</p><p>作者从童年到毕业后从欧莱雅的实习生工作，到最终做到香奈儿的全球CEO的故事。</p><h3 id="读书总结"><a href="#读书总结" class="headerlink" title="读书总结"></a>读书总结</h3><h4 id="家庭和事业"><a href="#家庭和事业" class="headerlink" title="家庭和事业"></a>家庭和事业</h4><p>陪伴孩子和追求事业不能兼顾，时间有限，作者完全投入到工作中，对孩子小时候缺少陪伴的控诉很沮丧，但在后来孩子长大后，对作者能够在工作、职业上提供指导和帮助表示很骄傲。</p><h4 id="管理和倾听"><a href="#管理和倾听" class="headerlink" title="管理和倾听"></a>管理和倾听</h4><p>命令式的管理会越来越过时，在知识、技能更多远，人力选择更多的时候，倾听会变成领导能力中非常重要的一个基础技能，能够换位思考并找到和自我目标对齐的路径尤为重要。</p><h4 id="职业自信"><a href="#职业自信" class="headerlink" title="职业自信"></a>职业自信</h4><p>无论我们的角色多么微不足道，都可以在自己的领域去学习、成长，建立自己的能力和信心，构建自己的影响力，争取自己的权利，并在必要时作出超常规的选择。</p><p>无论多么小的机会都能发挥你的才能，无论什么老板你都能从他们身上学到东西，即使很烂你也能学到错误的领导方式。</p><p>只要你愿意重塑自己，总会发现无限可能。</p><h4 id="可可·香奈儿"><a href="#可可·香奈儿" class="headerlink" title="可可·香奈儿"></a>可可·香奈儿</h4><p>从一个孤儿，到裁缝，到成为社交名流和品牌创始人，让我对品牌的认识增加了一些温度。</p><p>香奈儿5号香水的封瓶仍然使用十七世纪的人工方法，而包装是完全现代的方式，古老和现代，经典和流行达到和谐的统一。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><h4 id="选书"><a href="#选书" class="headerlink" title="选书"></a>选书</h4><p>这本书选的比较失败：</p><p>出版社没有好好筛选。</p><p>没有仔细看书摘，误选了这本‘传记’。</p><p>对英文的书名没有理解。</p><h4 id="读书"><a href="#读书" class="headerlink" title="读书"></a>读书</h4><p>对书的逻辑存疑，读完之后，除了时间线上的事情，并没有对思考力、女性、家庭、领导力形成很好的系统化理解。</p><h4 id="用书"><a href="#用书" class="headerlink" title="用书"></a>用书</h4><p>这本书带来最大的启发是：</p><p>管理中很重要的一个技能是倾听，米奇也是我想遇到的导师类型，很严格、很有风格、很愿意成就别人。</p><p>家庭和事业需要选择，我们要有自己的追求，并勇敢去实现。</p><p>我们可以塑造自己的标签。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;缘起&quot;&gt;&lt;a href=&quot;#缘起&quot; class=&quot;headerlink&quot; title=&quot;缘起&quot;&gt;&lt;/a&gt;缘起&lt;/h3&gt;&lt;p&gt;最近选了一些个人工作能力提升方面的书，包括《OKR工作法》提升业务目标设定和拆解的思路和方法；《行为设计学》提升在心理认知方面的深度，《深度
      
    
    </summary>
    
    
      <category term="读后感" scheme="http://wangchengfei.info/tags/%E8%AF%BB%E5%90%8E%E6%84%9F/"/>
    
  </entry>
  
  <entry>
    <title>《OKR工作法》读后感</title>
    <link href="http://wangchengfei.info/2020/05/04/%E3%80%8AOKR%E5%B7%A5%E4%BD%9C%E6%B3%95%E3%80%8B%E8%AF%BB%E5%90%8E%E6%84%9F/"/>
    <id>http://wangchengfei.info/2020/05/04/《OKR工作法》读后感/</id>
    <published>2020-05-04T15:07:04.000Z</published>
    <updated>2020-05-04T16:00:38.177Z</updated>
    
    <content type="html"><![CDATA[<h3 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h3><p>公司实行OKR的绩效管理方法已经半年有余，在公司也听过多个OKR的培训，在培训时讲师推荐过这本书，正好假期也出不去，把买回的这本书过下。</p><p>书是中心出版社出版，书的翻译和质量比较有保障，排版适中，故事的形式读起来也很轻松。</p><p>书的作者是克里斯蒂娜·沃特克，是前领英公司的首席产品经理。</p><h3 id="内容结构"><a href="#内容结构" class="headerlink" title="内容结构"></a>内容结构</h3><p>书的内容通过汉娜和杰克的创业故事贯穿整个OKR制定的过程及实施中遇到的常见问题，整个过程拆分为三个主要部分：</p><ul><li>确定目标，聚焦目标</li><li>明确关键成果</li><li>评估OKR成果</li></ul><p>除了以上实施的过程和OKR工具本身的优化，作者也给出了OKR中影响目标的关键因素和实践场景。</p><h3 id="确定目标"><a href="#确定目标" class="headerlink" title="确定目标"></a>确定目标</h3><h4 id="战略不变的情况下、调整策略"><a href="#战略不变的情况下、调整策略" class="headerlink" title="战略不变的情况下、调整策略"></a>战略不变的情况下、调整策略</h4><p>故事中公司的目标是让喜欢喝茶的人喝到好茶，由于对接餐厅分撒，销售过程会低效且规模小，难以实现战略上的目标（用户规模、财务收入）；那么通过改为向餐厅供应商合作，每个供应商对接几十或上百的餐厅，从而快速实现战略目标。</p><h4 id="一旦团队出问题，再多钱也没用"><a href="#一旦团队出问题，再多钱也没用" class="headerlink" title="一旦团队出问题，再多钱也没用"></a>一旦团队出问题，再多钱也没用</h4><p>有些人是给团队制造问题的，那么就要果断作出决定，避免对业务和公司造成更大的损失。</p><h3 id="确定关键结果"><a href="#确定关键结果" class="headerlink" title="确定关键结果"></a>确定关键结果</h3><h4 id="和团队共同制定"><a href="#和团队共同制定" class="headerlink" title="和团队共同制定"></a>和团队共同制定</h4><p>要让成员有参与感和责任感，共同制定OKR。</p><h4 id="砍掉与关键结果无关的业务"><a href="#砍掉与关键结果无关的业务" class="headerlink" title="砍掉与关键结果无关的业务"></a>砍掉与关键结果无关的业务</h4><p>要足够的聚焦，而不是全部开始做，但每个都没完成。</p><h4 id="突出重点"><a href="#突出重点" class="headerlink" title="突出重点"></a>突出重点</h4><p>一次说太多，和什么都没说一样。</p><p>紧急的事情往往不重要，重要的事情往往不紧急。–艾森豪威尔</p><h3 id="OKR评估"><a href="#OKR评估" class="headerlink" title="OKR评估"></a>OKR评估</h3><p>每周一进行OKR的对齐，并对进度及问题及时暴露。</p><p>每周五进行OKR的对齐，并对取得的成果进行庆祝。</p><p>每个KR的信心指数一般为50%，太低说明不可能完成，太高说明没有难度。</p><p>进行季度、半年末、年度的OKR盘点。</p><h3 id="影响OKR的关键因素"><a href="#影响OKR的关键因素" class="headerlink" title="影响OKR的关键因素"></a>影响OKR的关键因素</h3><h4 id="失败的原因"><a href="#失败的原因" class="headerlink" title="失败的原因"></a>失败的原因</h4><ul><li>目标没有优先级，如果一个领导让你设置多个优先级都很高的目标，那么说明这个领导根本不懂OKR</li><li>缺乏沟通，如果一个目标没有多次沟通，那么理解上的偏差就会很大。<ul><li>当你说的不想再说了，人们就开始听进去了。–杰夫·韦纳</li></ul></li><li>没有做好计划，不是设置完目标，事情就能自动完成，事实上需要不断的改进和推进，不断的趋近目标。</li><li>没有把时间花在重要的事情上。<ul><li>重要的事通常不紧急，紧急的事通常不重要。–德怀特·艾森豪威尔</li></ul></li><li>轻易放弃<ul><li>幸福的家庭都是一样的，不幸的家庭各有各的不幸。–列夫·托尔斯泰</li></ul></li></ul><h4 id="OKR原则"><a href="#OKR原则" class="headerlink" title="OKR原则"></a>OKR原则</h4><ul><li>目标明确且鼓舞人心</li><li>时间限制</li><li>独立的团队来完成</li></ul><h4 id="产品方向的关键结果"><a href="#产品方向的关键结果" class="headerlink" title="产品方向的关键结果"></a>产品方向的关键结果</h4><ul><li>用户增长</li><li>用户激活（复购、留存）</li><li>收入增长</li><li>产品性能</li><li>产品质量</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>OKR作为一个目标管理和考核的工具，可以提升业务的目标和方向感，也可以进行业务梳理和优化，兼具攻守功能，确实强大。</p><p>除了工作上的目标管理，也可以用来管理生活目标，和朋友聊到OKR时，个人的OKR如下：</p><p>O1：身心健康</p><p>KR1：心理健康，心理健康比身体健康更为重要，尤其是当前高度竞争的环境和黑心的媒体焦虑作用下；培养积极、开放的心态，每季度向工作、生活中的前辈学习、讨论。</p><p>KR2：身体健康，一个健康的身体是生活和工作的基础，每周锻炼不少于3次，跑步、KEEP、散步，形式不限，重要的是放松身心。</p><p>O2：幸福生活</p><p>KR1：和爱人积极沟通，每周制造一次单独相处的时间，分享彼此的所思所想，兼顾对方的爱好（美食购物、美食购物、美食购物，我想还应该培养下其它的爱好）。</p><p>KR2：培养孩子更加独立，每周不少于3次的亲子时间，培养数学、科学认知。</p><p>O3：事业有成</p><p>KR1：每周阅读一本专业或职业方面的书籍，拓展视野、完善知识体系。</p><p>KR2：每周学习一篇专业方向的技术文章，结合业务形成业务方案，通过实践沉淀技术体系。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;缘起&quot;&gt;&lt;a href=&quot;#缘起&quot; class=&quot;headerlink&quot; title=&quot;缘起&quot;&gt;&lt;/a&gt;缘起&lt;/h3&gt;&lt;p&gt;公司实行OKR的绩效管理方法已经半年有余，在公司也听过多个OKR的培训，在培训时讲师推荐过这本书，正好假期也出不去，把买回的这本书过下。&lt;/
      
    
    </summary>
    
    
      <category term="读后感" scheme="http://wangchengfei.info/tags/%E8%AF%BB%E5%90%8E%E6%84%9F/"/>
    
  </entry>
  
  <entry>
    <title>《贫穷的本质》读后感</title>
    <link href="http://wangchengfei.info/2020/04/12/%E3%80%8A%E8%B4%AB%E7%A9%B7%E7%9A%84%E6%9C%AC%E8%B4%A8%E3%80%8B%E8%AF%BB%E5%90%8E%E6%84%9F/"/>
    <id>http://wangchengfei.info/2020/04/12/《贫穷的本质》读后感/</id>
    <published>2020-04-12T14:46:34.000Z</published>
    <updated>2020-04-13T02:02:50.543Z</updated>
    
    <content type="html"><![CDATA[<h3 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h3><p>在去年买原则的时候，在中信出版社畅销书列表里对这个书名比较感兴趣，便加入了购物车，去年过年赶上疫情，于是扫了几本购物车里的几本书。</p><p>中信的书质量不错，排版、字体、内容方面都很不错，可能部分段落有行业背景，读起来不是很好理解，翻译可以更通俗易懂写。</p><p>此书作者阿比吉特·班纳吉（Abhijit Banerjee）、艾丝特·杜芙若（EstherDuflo），获2019年获诺贝尔经济学奖，以表彰他们“在减轻全球贫困方面的实验性做法”。</p><h3 id="贫穷是什么"><a href="#贫穷是什么" class="headerlink" title="贫穷是什么"></a>贫穷是什么</h3><p>全世界至少有8.65亿人，每天的收入低于0.99美元，我理解他们生活的场景就是贫穷。</p><p>生活中他们可能没有健康的饮水而导致疾病，没有良好的教育而导致没有谋生手段，没有健康的身体而无法找到稳定的工作。</p><p>而作者通过大量的真人案例提出了贫穷陷阱概念，来解释什么导致了贫穷，一旦贫穷为什么很难摆脱；为什么很多福利政策和制度无法让他们摆脱贫穷。</p><h3 id="是什么导致贫穷"><a href="#是什么导致贫穷" class="headerlink" title="是什么导致贫穷"></a>是什么导致贫穷</h3><h4 id="没有正确的信息"><a href="#没有正确的信息" class="headerlink" title="没有正确的信息"></a>没有正确的信息</h4><p>家庭成员的疾病费用导致了家庭陷入贫穷，而导致疾病往往是因为没有接种疫苗，或者没有喝干净的引用水，或者给土地撒了两倍的肥料。</p><p>而一只成本低廉或者免费的疫苗可以避免大疾病的产生，干净的饮用水和健康饮食可以保持身体健康，而身体健康是不陷入贫穷的基础。</p><p>而他们获取信息的来源是电影、电视、精心设计的报告单，而这些并不可靠，可笑的是媒体看上去是可靠的。</p><h4 id="缺少选择"><a href="#缺少选择" class="headerlink" title="缺少选择"></a>缺少选择</h4><p>如果你富有，你不会选择喝健康的水还是免费的水，而贫穷会优先考虑成本，从而增加了选择的风险，例如喝免费的水、吃没有碘的盐。</p><h4 id="缺少帮助"><a href="#缺少帮助" class="headerlink" title="缺少帮助"></a>缺少帮助</h4><p>富人有很多的申请贷款的途径，而穷人的途径很少，而且利息很高，因为他们坏账率高，导致成本进一步上升，所以服务穷人的金融服务很少。</p><h4 id="腐败的制度"><a href="#腐败的制度" class="headerlink" title="腐败的制度"></a>腐败的制度</h4><p>当一项很好的制度宣布并开始执行的时候，一个腐败的制度足以摧毁所有的效果，例如义务教育的费用到校长的钱只有15%（印度），护士的工作时间只有20%（缺勤率极高）。</p><h4 id="绝望"><a href="#绝望" class="headerlink" title="绝望"></a>绝望</h4><p>当一对贫穷的父母没有钱负担孩子上学时，那么孩子辍学就是他们的愿望，因为他们害怕负担孩子的学费，这导致孩子拍拖贫穷的希望更加渺茫，根据数据统计，孩子每多上一年学，工资便可以提高15%。</p><h3 id="新世界"><a href="#新世界" class="headerlink" title="新世界"></a>新世界</h3><p>作者通过很多鲜活的家庭，描述了生活在贫穷中的生活、教育、健康、援助等方面导致贫穷的真正原因。</p><p>作者对是否应该援助，为什么扶贫会最终失败，通过调查和对比，在不同的国家和地区给出了多种主流观点和数据支撑。</p><p>见仁见智，我想不同的地域和文化风俗都应因地制宜，不应一概而论，凡是一刀切的做法终有不足。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>避免失败也是成功的路径之一，如何避免不健康是保持健康的方法之一。</li><li>找到正确的信息源很重要，错误的信息会让人万劫不复。</li><li>拓宽视野，增加自己的选择面。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;缘起&quot;&gt;&lt;a href=&quot;#缘起&quot; class=&quot;headerlink&quot; title=&quot;缘起&quot;&gt;&lt;/a&gt;缘起&lt;/h3&gt;&lt;p&gt;在去年买原则的时候，在中信出版社畅销书列表里对这个书名比较感兴趣，便加入了购物车，去年过年赶上疫情，于是扫了几本购物车里的几本书。&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="读后感" scheme="http://wangchengfei.info/tags/%E8%AF%BB%E5%90%8E%E6%84%9F/"/>
    
  </entry>
  
  <entry>
    <title>《金字塔原理》读后感</title>
    <link href="http://wangchengfei.info/2020/02/17/%E3%80%8A%E9%87%91%E5%AD%97%E5%A1%94%E5%8E%9F%E7%90%86%E3%80%8B%E8%AF%BB%E5%90%8E%E6%84%9F/"/>
    <id>http://wangchengfei.info/2020/02/17/《金字塔原理》读后感/</id>
    <published>2020-02-17T14:34:28.000Z</published>
    <updated>2020-02-17T15:32:12.799Z</updated>
    
    <content type="html"><![CDATA[<h3 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h3><p>有一次和一个架构师朋友聊天时，他说表达的逻辑基本是按照金字塔原理组织，听起来确实逻辑清晰，聊完我便把这本书加到了自己的书单里，2019年年底去西西弗书店，书架上正好有这本书，质量很好，88元原价购买略贵，为了不后悔，最后还是打算买来一读。</p><p>书的作者是芭芭拉·明托，是麦肯锡公司的第一位女咨询顾问。帮政府、企业、高校提高写作商务文章及演讲能力。</p><h3 id="内容结构"><a href="#内容结构" class="headerlink" title="内容结构"></a>内容结构</h3><p>书的内容按照表达逻辑、思考逻辑、解决问题逻辑、演示逻辑四个部分组织。</p><p>个人更习惯先分析、明确现实的问题，需要解决问题的逻辑，之后是根据思考逻辑来梳理问题方案，然后是根据表达逻辑进行描述，最后抽象所有的步骤用演示逻辑进行呈现汇报。</p><p>所以整理笔记和体会也是按照认识问题、思考方案、表述组织、演示组织四大块进行个人的梳理。</p><h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><h4 id="问题定义"><a href="#问题定义" class="headerlink" title="问题定义"></a>问题定义</h4><p>要解决问题，必须先明确问题，也就是先定义和界定问题，书中给出了一个定义，那就是我们经过努力得到的结果（现状）和希望得到的结果（目标）之间存在的差距，这是作者界定问题的框架。</p><p>明确问题之后是分析问题产生的原因，进一步确定我们能做什么，我们应该做什么（应该做的不一定能做，有区别哦）。</p><h4 id="如何分析问题"><a href="#如何分析问题" class="headerlink" title="如何分析问题"></a>如何分析问题</h4><p>作者提出分析问题要使用完全穷尽、相互独立的原则分析，将各个因素用结构化的方式呈现出来，便可以清楚的看到问题。</p><p>梳理完以上的结构化原因，是否就意味着可以解决问题，并不是，每个因素并不会和问题产生直接的因果关系，所以第二步是分析各个因素的因果关系，从中找到因果顺序，解决因得到果。</p><h3 id="思考逻辑"><a href="#思考逻辑" class="headerlink" title="思考逻辑"></a>思考逻辑</h3><p> 问题定义完就开始思考解决问题的逻辑，解决的路径从时间、结构、程度上可以拆解出不同的层次和顺序，</p><p>时间是路径执行的时间线，结构则是执行的拆分层次，表述可以并行执行的过程，而程度上是分重要性，划重点圈定核心执行点。</p><h3 id="表达逻辑"><a href="#表达逻辑" class="headerlink" title="表达逻辑"></a>表达逻辑</h3><p>因为人的理解数量有限，文中给出了神奇数字7，所以我们表述问题不能平铺所有的点去讲，需要有一个自上而下的金字塔解构，这样更便于记忆和理解，难道一周7天也是这么设计的？</p><p>如何构建金字塔，作者通过找出其中的逻辑关系（其实是分类法），将分散的点形成一组，通过抽象一组概念再去自上而下的阐述，称之为结论先行，带着分类去阐述也更易于理解。</p><p>在金字塔内部同层的横向关系应该是归纳的一个等同的概念，例如蔬菜和水果，而不是蔬菜和香蕉，稳定性和迭代效率，而不是QPS和迭代效率，范畴看起来不对等；而纵向的应该符合演绎的逻辑，从抽象到具体，例如稳定性到可用性、从迭代效率到story平均完成时间和数量。</p><p>如何写序言，作者给出了表达范式：背景、冲突、疑问，通过这三句可以快速引入情景，展开演绎出的部分，当然各部分之间要对等、完全穷尽、相互独立。</p><h3 id="演示逻辑"><a href="#演示逻辑" class="headerlink" title="演示逻辑"></a>演示逻辑</h3><p>演示上一定要遵从金字塔结构，每一层级的标题不可能只有一个，相同的思想应使用相同的句型，而且标题要表达思想精髓，正文和标题分开考虑，因为标题是吸引眼球而设。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>很有用的一本书，对PPT大白的我来说受益匪浅，可以应用到生活、工作当中，希望对你也有用，共勉。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;缘起&quot;&gt;&lt;a href=&quot;#缘起&quot; class=&quot;headerlink&quot; title=&quot;缘起&quot;&gt;&lt;/a&gt;缘起&lt;/h3&gt;&lt;p&gt;有一次和一个架构师朋友聊天时，他说表达的逻辑基本是按照金字塔原理组织，听起来确实逻辑清晰，聊完我便把这本书加到了自己的书单里，2019年年底
      
    
    </summary>
    
    
      <category term="读后感" scheme="http://wangchengfei.info/tags/%E8%AF%BB%E5%90%8E%E6%84%9F/"/>
    
  </entry>
  
  <entry>
    <title>《超越原生家庭》读后感</title>
    <link href="http://wangchengfei.info/2020/02/15/%E3%80%8A%E8%B6%85%E8%B6%8A%E5%8E%9F%E7%94%9F%E5%AE%B6%E5%BA%AD%E3%80%8B%E8%AF%BB%E5%90%8E%E6%84%9F/"/>
    <id>http://wangchengfei.info/2020/02/15/《超越原生家庭》读后感/</id>
    <published>2020-02-15T07:46:12.000Z</published>
    <updated>2020-02-15T08:46:54.061Z</updated>
    
    <content type="html"><![CDATA[<h3 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h3><p>哲学家说，如果你不知道一个事物的名字，在你的意识里还不算存在；上班的路上，广播里经常播放奋斗者的故事，他们超越原生家庭，做出了斐然的成绩，多次听到后对原生家庭这个词有了接触，多次听到之后，便有了印象。</p><p>在一个朋友的文章中看到《超越原生家庭》这本书，对了解家庭问题和个人焦虑有指导作用，便买了这本书。</p><p>书是机械工业出版社出版，质量中等，整本书并不厚、排版适中，阅读还算轻松。</p><p>作者是美国罗纳德·理查森著，从事婚姻和家庭心理治疗方面的工作20年，是美国牧师咨询协会执业医师。</p><h3 id="原生家庭"><a href="#原生家庭" class="headerlink" title="原生家庭"></a>原生家庭</h3><p>原生家庭是我们出生和成长的家庭，其中的生活经历对我们一生具有深远影响。这个经历的影响和作用并非仅限于我们同年时期。我们对自己的认识、对待他人的方式，我们的世界观，都由原生家庭的环境塑造。原生家庭习得的观念也会伴随我们一生。</p><p>人生最困难的事情之一就是从心理和感情上认识到原生家庭的影响，不再重复原生家庭里的不良模式，也不刻意去做与之截然相反的事情。</p><h3 id="家庭运行原理"><a href="#家庭运行原理" class="headerlink" title="家庭运行原理"></a>家庭运行原理</h3><p>家庭并不是简单的个人组合，而是有机组合；有人制定规则和潜规则，其他人遵守；有人缺失角色功能，其他成员就会补充增强这个角色功能。</p><p>每个人都是上一代原生家庭塑造的结果，每个人通过向上追溯都可以发现家庭个体的模式来源，爸爸的行为模式来自爷爷家庭，妈妈的模式来源于外公家庭，通过沟通可以知道每个人模式背后形成的原因。</p><h3 id="亲疏远近"><a href="#亲疏远近" class="headerlink" title="亲疏远近"></a>亲疏远近</h3><p>《创世纪》里说：“孤独和独处是不好的，但有些时候孤独却给人带来很大的慰藉。”</p><p>家庭里的二元关系（就是其中两个人之间的关系），一方面需要亲近、一方面需要独立自由和自决权，当其中一方比较强势的时候，另一方就较弱势。</p><p>一个小朋友在家里管教严格、被父母逼的紧，青春期就会被认为过于反叛，这是相对于父母对比孩子不同阶段的结论，而从孩子发展看，自由、自主、自决是走向成熟的过程。</p><p>在处理两个人的关系时，要本着你不比别人好，只是和别人不同的出发点，强势要求子女或者夫妻遵从是解决矛盾的基础。</p><p>给每个人留白，不全面控制和完全了解一个人，是人际交往保持双方舒适的尺度。</p><h3 id="保持真我"><a href="#保持真我" class="headerlink" title="保持真我"></a>保持真我</h3><p>我们生活累的原因是在处理关系时，不能用真我的想法行事，处处伪装，背叛了自己。</p><p>关系中如何保持真我，首先要有目标指向，明确自己的价值，并知道什么对自己才是重要的。</p><p>其次要分化思考和感受，可以区分两者的不同，不因不同意见和行为而感情用事，因为其他人和自己行为方式不同而闷闷不乐，产生愤怒情绪。</p><p>表达自己的感受，说出利弊，用思考梳理利弊，减少情绪的直接反馈。</p><h3 id="三角关系"><a href="#三角关系" class="headerlink" title="三角关系"></a>三角关系</h3><p>就像小时候挨爸爸打，妈妈会站到我这边，妈妈说爸爸，我会占到爸爸那边；家庭里也总是合纵连横，在某一方面强势的人，会有其他两方联合抵制，哪里有压迫哪里有就反抗哈哈，现在想想还真是这个道理。</p><p>形成的原因是一方功能过度，而其余功能不足，功能不足者之间联合。</p><p>迫害者、受害者、解救者一般是三角关系中的角色，迫害者我理解就是功能过度者，受害者一般为功能不足者。</p><p>妻子有孩子，丈夫作为被冷落的一方，一般会想办法拉其中一方结盟，形成新的三角关系。</p><h3 id="出生顺序"><a href="#出生顺序" class="headerlink" title="出生顺序"></a>出生顺序</h3><p>家庭里的独生子就比较自我，分享的意愿低。</p><p>家里有多个孩子的时候，老大的性格就独立、有担当，也有比较强的危机感，如果老二是个同性的孩子且相差不超过5岁的话；家庭里最小的孩子的性格比较随和、开朗，往往是乐观主义者；而中间的子女性格往往比较难以确定。</p><p>通过出生顺序可以了解家庭成员的性格塑造的环境。</p><h3 id="如何改善"><a href="#如何改善" class="headerlink" title="如何改善"></a>如何改善</h3><p>如果你无法摆脱家丑，那就欣然接受吧。–乔治·萧伯纳</p><p>首先要了解家庭成员的组成，并记录他们之间的故事，从而发现他们在原生家庭中生活的机制。</p><p>了解自己在原生家庭中的角色就要开始改变，从改变自己开始，重新定位自己的角色。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>改变真的很难！</p><p>难在没有认识到，所以不改变。</p><p>难在认识到，不知道往哪里改。</p><p>难在女人长问，你怎么又错？你错了吗？错在哪了？</p><p>希望我们都有幸福、美满、和谐的家庭，共勉！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;缘起&quot;&gt;&lt;a href=&quot;#缘起&quot; class=&quot;headerlink&quot; title=&quot;缘起&quot;&gt;&lt;/a&gt;缘起&lt;/h3&gt;&lt;p&gt;哲学家说，如果你不知道一个事物的名字，在你的意识里还不算存在；上班的路上，广播里经常播放奋斗者的故事，他们超越原生家庭，做出了斐然的成绩，多
      
    
    </summary>
    
    
      <category term="读后感" scheme="http://wangchengfei.info/tags/%E8%AF%BB%E5%90%8E%E6%84%9F/"/>
    
  </entry>
  
  <entry>
    <title>《如何高效学习》读后感</title>
    <link href="http://wangchengfei.info/2020/02/01/%E3%80%8A%E5%A6%82%E4%BD%95%E9%AB%98%E6%95%88%E5%AD%A6%E4%B9%A0%E3%80%8B%E8%AF%BB%E5%90%8E%E6%84%9F/"/>
    <id>http://wangchengfei.info/2020/02/01/《如何高效学习》读后感/</id>
    <published>2020-02-01T05:58:23.000Z</published>
    <updated>2020-02-17T09:25:17.402Z</updated>
    
    <content type="html"><![CDATA[<h3 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h3><p> 偶然在同事的书桌上看到这本书，后来在一篇提升学习能力的文章里看到这个作者，买了读下。</p><p>书是机械工业出版社出版，白色封面是我喜欢的简单、干净，整本书不到200页，排版和字体比较宽松，阅读起来简单、轻松。</p><p>本书作者是因为快速学习而出名的斯科特·扬，1年学完并考核通过MIT 33 门课程；高中时，斯科特·扬课下不学习，以全班第二毕业。</p><h3 id="整体性学习策略"><a href="#整体性学习策略" class="headerlink" title="整体性学习策略"></a>整体性学习策略</h3><p>整体性学习是相较于死记硬背，将学习的知识通过自己的知识体系，关联沉淀到已有知识中。</p><p>跳到内容之外多视角学习内容，只有从整体出发才能学的少，会的多，做到融会贯通。</p><p>作者从自己的角度出发量化聪明的指标，学的更快、记的更多、更牢，组织更易达成自己的目标，例如通过考试等。</p><p>作者将知识点的体系划分为结构、模型和高速公路。</p><p>结构为领域内的相关性较强的知识，模型则为领域内知识的结构，高速公路则是连接结构和模型的关联关系。</p><p>整体性学习的步骤和我们大同小异，获取知识、理解知识、拓展纠错、应用关联、实践验证，想到纸上得来终觉浅，绝知此事要躬行。</p><h3 id="学习方法"><a href="#学习方法" class="headerlink" title="学习方法"></a>学习方法</h3><p>获取知识：速度、笔记；速度如果开始比较难提升，可以指读，用手指快速划过，眼睛跟进。</p><p>联系观点：比喻、内在化、图表法。</p><p>随意信息处理：联想、挂钩、压缩，叫碎片化的知识效果较差，读书还是更体系化。</p><p>延伸知识：应用、纠错。</p><h4 id="费曼技巧"><a href="#费曼技巧" class="headerlink" title="费曼技巧"></a>费曼技巧</h4><p>1、理解哪些没有真正掌握的知识点。</p><p>2、记住理解但可能遗忘的知识。</p><h4 id="费曼技巧应用"><a href="#费曼技巧应用" class="headerlink" title="费曼技巧应用"></a>费曼技巧应用</h4><p>1、选择要学习的概念。</p><p>2、假设自己是老师给学生讲解这个概念。</p><p>3、当自己没有听懂时，返回1。</p><p>4、简化和比喻。</p><h3 id="提效方法"><a href="#提效方法" class="headerlink" title="提效方法"></a>提效方法</h3><h4 id="能量管理"><a href="#能量管理" class="headerlink" title="能量管理"></a>能量管理</h4><p>1、增加能量储备。</p><p>3-5次锻炼</p><p>足够的8小时睡眠</p><p>吃粗纤维和粗加工的食品</p><p>多喝水</p><p>少吃多餐</p><p>2、线性日程表改为循环式的。</p><p>每周休息一天</p><p>晚上不干活</p><p>设定90分钟的集中精力时间，停止</p><h4 id="不要“学习”"><a href="#不要“学习”" class="headerlink" title="不要“学习”"></a>不要“学习”</h4><p>只关注执行路径，少关注概念，学习这个概念可能产生歧义，从而影响学习。</p><p>1、阅读材料。</p><p>2、完成作业和笔记。</p><p>3、应用整体性处理难点。</p><p>4、考前，针对学习材料做笔记流梳理。</p><h4 id="绝不拖延"><a href="#绝不拖延" class="headerlink" title="绝不拖延"></a>绝不拖延</h4><p>一次性完成工作。</p><p>1、每周末列清单</p><p>2、每天晚上检查周计划，列出每日目标清单</p><h4 id="批处理"><a href="#批处理" class="headerlink" title="批处理"></a>批处理</h4><p>要注意以下的使用技巧。</p><p>1、工作量要适度</p><p>2、一次性完成作业</p><p>3、提高注意力阈值</p><h4 id="有组织"><a href="#有组织" class="headerlink" title="有组织"></a>有组织</h4><p>1、所有物品有固定位置</p><p>2、随身带笔记本</p><p>3、坚持日历和做事清单</p><h3 id="自我教育"><a href="#自我教育" class="headerlink" title="自我教育"></a>自我教育</h3><p>建立良好的学习习惯</p><p>1、每日阅读</p><p>2、每日练习</p><p>3、每日目标</p><h4 id="养成好习惯"><a href="#养成好习惯" class="headerlink" title="养成好习惯"></a>养成好习惯</h4><p>1、坚持某个习惯30天</p><p>2、坚持下去</p><p>3、享受这个过程</p><p>4、寻找特殊时段</p><h4 id="克服挫折"><a href="#克服挫折" class="headerlink" title="克服挫折"></a>克服挫折</h4><p>1、写出挫折</p><p>2、使用网络</p><p>3、找一本关于“如何做”的工具书</p><p>4、换一个角度实施</p><h4 id="设置学习目标"><a href="#设置学习目标" class="headerlink" title="设置学习目标"></a>设置学习目标</h4><p>1、所有目标都要写下来</p><p>2、让目标客观化</p><p>3、设定截止期限</p><p>4、分解到每日和每周的行动清单</p><p>5、经常看你的目标</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>无论是西点军校的军规，还是高效学习方法，重要的是实践，现在开始和坚持不懈。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;缘起&quot;&gt;&lt;a href=&quot;#缘起&quot; class=&quot;headerlink&quot; title=&quot;缘起&quot;&gt;&lt;/a&gt;缘起&lt;/h3&gt;&lt;p&gt; 偶然在同事的书桌上看到这本书，后来在一篇提升学习能力的文章里看到这个作者，买了读下。&lt;/p&gt;
&lt;p&gt;书是机械工业出版社出版，白色封面是我喜
      
    
    </summary>
    
    
      <category term="读后感" scheme="http://wangchengfei.info/tags/%E8%AF%BB%E5%90%8E%E6%84%9F/"/>
    
  </entry>
  
  <entry>
    <title>《哈佛谈判心理学》读后感</title>
    <link href="http://wangchengfei.info/2019/11/08/%E3%80%8A%E5%93%88%E4%BD%9B%E8%B0%88%E5%88%A4%E5%BF%83%E7%90%86%E5%AD%A6%E3%80%8B%E8%AF%BB%E5%90%8E%E6%84%9F/"/>
    <id>http://wangchengfei.info/2019/11/08/《哈佛谈判心理学》读后感/</id>
    <published>2019-11-08T03:48:12.000Z</published>
    <updated>2019-11-08T05:52:10.181Z</updated>
    
    <content type="html"><![CDATA[<h3 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h3><p>个人一直对思维和心里方面的知识比较感兴趣，拿到这本书开心，翻看数的内容也是被翻译的书名搞懵了，但还是看完了这本书，还是有所收获。</p><h3 id="读后感"><a href="#读后感" class="headerlink" title="读后感"></a>读后感</h3><h4 id="角色"><a href="#角色" class="headerlink" title="角色"></a>角色</h4><p>明白了矛盾的自己可以更加具象化为多种角色进行分析；在纠结和焦虑中一层层分析自己的感受和想法，了解别人难，了解自己确实更难；格物致知，格物知道自己的欲望是什么样的确实很重要。</p><h3 id="转化"><a href="#转化" class="headerlink" title="转化"></a>转化</h3><p>在自己心情有变化时感受不同角色的变化和原因，从而敏感的感知之后的行为会有哪些偏颇，类似观察者的角色，这个让自己更加敏感的知道自己的情绪变化，做出更有的选择。</p><h3 id="赢"><a href="#赢" class="headerlink" title="赢"></a>赢</h3><p>赢得自己才能赢得别人（winning from within），看了英文书名和中文的译名，确实牛头不对马嘴，整本书也是了解自己的内心，更加均衡的生活，和儒家思想修身养性之法类似；不管如何道理是想通的，谈判除了说服别人，也可以说服自己，况且说服自己比说服别人有时候更难。</p><h3 id="角色-1"><a href="#角色-1" class="headerlink" title="角色"></a>角色</h3><p>关于梦想家：指引方向和梦想，如果低位运行，生活乏味没有想法，类似公司ceo。</p><p>关于思考者：分析、思考具体的落实问题，类似公司cfo，cto。</p><p>关于爱人：提供人际关系的维护，对人之间的情感比较敏感，不懂得拒绝经常自己受委屈。</p><p>关于勇士：具体的落地执行，高位运行容易鲁莽行事，将细致的计划和最初的想法抛诸脑后。</p><p>关于守望者：感知每个角色的运行情况，进行感知，并告诉船长。</p><p>关于船长：船长进行协调、分配，让四种角色顺利配合。</p><p>关于旅行者：面对不断变化的世界，协调四大成员配合应对。</p><p>四大角色中：梦想家是蓝图、思考者是路径、爱人是过程控制、勇士是落地执行。</p><p>三大辅助角色：守望者内部过程感知、船长是协调，旅行者是外部环境感知。</p><p>看完把自己具象成7大角色是不是有点分裂的感觉哈哈。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;缘起&quot;&gt;&lt;a href=&quot;#缘起&quot; class=&quot;headerlink&quot; title=&quot;缘起&quot;&gt;&lt;/a&gt;缘起&lt;/h3&gt;&lt;p&gt;个人一直对思维和心里方面的知识比较感兴趣，拿到这本书开心，翻看数的内容也是被翻译的书名搞懵了，但还是看完了这本书，还是有所收获。&lt;/p&gt;
&lt;
      
    
    </summary>
    
    
      <category term="读后感" scheme="http://wangchengfei.info/tags/%E8%AF%BB%E5%90%8E%E6%84%9F/"/>
    
  </entry>
  
  <entry>
    <title>《精进：如何成为一个很厉害的人》读后感</title>
    <link href="http://wangchengfei.info/2019/11/08/%E3%80%8A%E7%B2%BE%E8%BF%9B%EF%BC%9A%E5%A6%82%E4%BD%95%E6%88%90%E4%B8%BA%E4%B8%80%E4%B8%AA%E5%BE%88%E5%8E%89%E5%AE%B3%E7%9A%84%E4%BA%BA%E3%80%8B%E8%AF%BB%E5%90%8E%E6%84%9F/"/>
    <id>http://wangchengfei.info/2019/11/08/《精进：如何成为一个很厉害的人》读后感/</id>
    <published>2019-11-08T03:29:47.000Z</published>
    <updated>2019-11-08T03:50:21.117Z</updated>
    
    <content type="html"><![CDATA[<h3 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h3><p>在公司推荐阅读里看到有介绍这本书，每天有一些进步，最终成为一个很厉害的人，同时也想到“不积跬步无以至千里”简明扼要的阐明古代先贤的大道至简，看看这本书有什么不同吧。</p><h3 id="内容介绍"><a href="#内容介绍" class="headerlink" title="内容介绍"></a>内容介绍</h3><p>这本书抽象完其实就是我们对待生活中时间、选择等问题的观念和一些例子，中间有些部分比较繁琐冗长，引用了各个心理学家、哲学家等大牛的经典理论作为佐证。</p><h3 id="读后感"><a href="#读后感" class="headerlink" title="读后感"></a>读后感</h3><p>最终还是坚持读完了这本书，其中比较有意思的几个方面说下自己读完的感受。</p><h4 id="时间"><a href="#时间" class="headerlink" title="时间"></a>时间</h4><p>时间的快与慢，其实是自己的一种感觉，因为时间本身作为一种标准、精确的度量，只是在我们选择和实现的环境中的感受，如果需求多做不完就是感觉快，如果做完还有很多时间盈余，我们说时间过的慢，如果是开心的时候，我们总是感觉没有享受够，时间就到了，比如睡觉！如果有一个尴尬的聚餐，或是尬聊很久，就感觉时间很慢，实在是浪费。</p><p>时间从另一个维度来看，在我们观察的时候时间就变的慢，比如我们度假、思考、沉思，感觉时间会拉长变慢，当我们身在其中，被各种事务缠身就会变快，是因为失去了对时间的感知和度量，时间偷偷的溜走了；慢的时候我们是有盈余、富足的状态，需要把这种富足存起来转化为时间紧张时候的储蓄，比如慢的时候想想提高生产效率，提升时间快的时候的节奏，可以均衡自己的感受，最终的观点就是，我们要自律，也就是慎独，在有空闲的时候能够使用多余的时间学习、提升、感受、思考转化为快节奏的减速工具，叫时间相对论。</p><h4 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h4><p>人生的经历就是每个选择的路口加上路口之间的路，很多人的路就像一个有向无环图（如果有轮回可能是螺旋式的有向有环图），人生的路上大部分的人是惧怕做选择的，选择就像通往黑夜的路，并不是害怕黑夜，而是黑夜背后的未知，但是如果不选择，有调整也会被迫选择，导致后续的问题更加棘手。</p><p>人生的另一面是仓促的、没有规划的决定，导致随机性过大，后续的很多事情在预期之外，会有很大的风险，这种敏锐的规划能力能形成，对人生会是一种巨大的财富。</p><h4 id="行动"><a href="#行动" class="headerlink" title="行动"></a>行动</h4><p>每个问题在处理的时候都需要行动，很多时候深思熟虑、数据佐证的结论不如直觉上的判断来的快、准，所以很多事情不需要考虑的太细节，做判断要有大方向上的和细化数据上的判断，首先要明确细化的指标，但是最难的还是找到自己的所求，之后判断选择的路径哪个会更快的达到目标。</p><h4 id="方法论"><a href="#方法论" class="headerlink" title="方法论"></a>方法论</h4><h5 id="拆解"><a href="#拆解" class="headerlink" title="拆解"></a>拆解</h5><p>梳理有个分解和分类任务的方法很受用，把零乱的所有的任务先分类，例如有3个ppt要写，比较高效的方法是先构思3个ppt的整体思路，这个只需要文字确认就好，构思好思路之后进行3个ppt素材的填充，最后对3个ppt的格式进行调整，这样在一段时间内，我们的思维和处理的对象以及使用的处理方法是一样的，可以提高我们思考的速度和深度。</p><h5 id="具象"><a href="#具象" class="headerlink" title="具象"></a>具象</h5><p>一个思考的工具就是把没有形状的思考图形化，例如把各个问题列出来，把各种思路写出来，把对比的维度画出来，针对不同的维度，可以借助表格、脑图等图形化的方式进行处理，这样就减轻了思考的复杂度，所以一边想、一边写写画画有助于提升思维的清晰度。</p><h5 id="自律"><a href="#自律" class="headerlink" title="自律"></a>自律</h5><p>另外一个就是严于律己，不做差不多先生，做T型人才，在知识的广度上可以蜻蜓点水，但是在专业领域上需要深挖，越深越好，这样在竞争中才会有区别度，才会稀缺，而稀缺就决定了定价权。</p><h5 id="一专多能"><a href="#一专多能" class="headerlink" title="一专多能"></a>一专多能</h5><p>不做学霸，导致自己的广度不够，也不做学渣，深度不够；做一个在自己的兴趣或者专业领域深挖，在广度上又可以接触很多不同的领域、不同的人、不同的书（书也是不同大牛的思考结果，所以读书是一个很重要的视野来源，做到一专多能，领域迁移）。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;缘起&quot;&gt;&lt;a href=&quot;#缘起&quot; class=&quot;headerlink&quot; title=&quot;缘起&quot;&gt;&lt;/a&gt;缘起&lt;/h3&gt;&lt;p&gt;在公司推荐阅读里看到有介绍这本书，每天有一些进步，最终成为一个很厉害的人，同时也想到“不积跬步无以至千里”简明扼要的阐明古代先贤的大道至简，
      
    
    </summary>
    
    
      <category term="读后感" scheme="http://wangchengfei.info/tags/%E8%AF%BB%E5%90%8E%E6%84%9F/"/>
    
  </entry>
  
  <entry>
    <title>一个工程师的目标修养</title>
    <link href="http://wangchengfei.info/2019/07/31/%E4%B8%80%E4%B8%AA%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%9A%84%E7%9B%AE%E6%A0%87%E4%BF%AE%E5%85%BB/"/>
    <id>http://wangchengfei.info/2019/07/31/一个工程师的目标修养/</id>
    <published>2019-07-31T03:22:17.000Z</published>
    <updated>2019-09-12T14:59:55.865Z</updated>
    
    <content type="html"><![CDATA[<h3 id="目标是什么"><a href="#目标是什么" class="headerlink" title="目标是什么"></a>目标是什么</h3><p>人嘛，总是喜欢找理由，比如我们做什么事情的时候，就需要说服自己和别人，我们的目标是什么，我们为什么这么做，有几种办法做，为什么这种是最优的。</p><p>当然，我们在公司做工程师也一样，开发一个新系统、新模块，修改一个老流程、老问题，迁移一个老业务、老系统，也都会问自己，目标是什么，最优的方法是什么。</p><p>但是，在产品、运营和我们讲的时候，产品会说用户体验，运营会说用户规模，那么如果两个的方案不同甚至冲突的时候，哪个才是准绳呢？</p><p>大学老师在讲公司管理课的时候告诉我们公司是以营利为目的的组织，那么组织的最大目的就是最大规模的盈利。</p><p>哪些会对一个业务的盈利造成影响，就是我们对目标的衡量标准。</p><h3 id="影响利润的因素"><a href="#影响利润的因素" class="headerlink" title="影响利润的因素"></a>影响利润的因素</h3><p>一个经典的公式：利润=收入-成本</p><p>哪些会对利润产生影响，业务内容是最重要的一部分，如果一个新的业务产生，想象空间巨大，那么对当前的目标有促进和强化作用，那么是可取的。</p><p>另外如果是一个老的业务，从内因看，规模、效率、质量、成本上是影响利润的直接因素；从外因看，政策、经济、技术、文化等影响大，暂不深入。</p><p>扩大规模后，单个产品利润短期不变，边际成本降低，所以是增加了利润收入；提升当前生产效率是降低单位产品成本，所以增加了利润收入；质量和品牌影响力提升增加用户使用和购买意愿，所以是影响需求端的重要因素，影响利润规模；成本当然依赖前几项，当然也有针对成本的单独优化，使当前规模和利润不变的情况下，增加利润，一般出现在产品的中后期。</p><p>作为工程师，工程师的价值可以对利润产生直接或间接影响，例如互联网系统的稳定性（例如用户系统的稳定性，有问题很要命），例如网页的响应时间对用户产生直接影响。</p><h3 id="系统对规模的支撑"><a href="#系统对规模的支撑" class="headerlink" title="系统对规模的支撑"></a>系统对规模的支撑</h3><p>系统对业务规模的支撑分为几个类型，从数据的结构上看，分为结构化数据和非结构化数据，从使用的场景上分为增删改查。</p><h4 id="结构化数据存储"><a href="#结构化数据存储" class="headerlink" title="结构化数据存储"></a>结构化数据存储</h4><p>结构化数据当前的常用方案为mysql、mongodb、mysql server、redis、mola，以上为非时间序列；influxdb、rrdtool等时间序列的数据库。</p><p>百万级别的数据，使用常见的存储结构满足业务需求（单库、单表、单机或多机容灾、单机房或多机房）。</p><p>千万到百亿级别的数据，使用分治法处理（分库、分表、多机器、多集群、多机房）。</p><p>百亿以上级别的数据，使用多中类型系统及基础设施结合治理。</p><h4 id="非结构化数据存储"><a href="#非结构化数据存储" class="headerlink" title="非结构化数据存储"></a>非结构化数据存储</h4><p>常见的图片、视频、音频、软件包等，都为文件数据，大小不一，meta数据提取后需要使用非结构化的文件存储系统处理。</p><p>当前使用nfs、afs等分布式系统，文件使用根据规模和效率使用不同的机器，sata盘还是ssd（一般考虑使用成本，分级存储，热数据使用ssd，冷数据使用sata）。</p><h3 id="语言对规模的支撑"><a href="#语言对规模的支撑" class="headerlink" title="语言对规模的支撑"></a>语言对规模的支撑</h3><p>c语言无疑是当前执行效率最高的语言，通常将较成熟的算法封装使用。</p><p>考虑开发迭代、维护等成本，快速迭代业务会使用java、php、python、go语言，例如接口相关、界面相关、业务流程及逻辑相关。</p><h3 id="系统对效率的支撑"><a href="#系统对效率的支撑" class="headerlink" title="系统对效率的支撑"></a>系统对效率的支撑</h3><p>业务系统对业务的支撑从无到有，从有到优，从优到细。</p><p>例如地推这个业务，传统模式是手记录，每天小组长汇总，之后进行整体汇总，这个过程漫长、易错，那么系统提升的第一步是信息化，地推人员信息、拉新用户、消费客单价等，这些信息化后，一方面提升推广效率，另一方面可以大规模的协同和短时间的反馈，例如之前一周一个活动，现在每天可以做活动，每天出效果和排行数据，从线下交互升级为线上交互。</p><p>信息化仅仅是业务跑通的第一步，期间还有很多的流程会有往复和非系统交互，例如邮件，第二步是流程化，使用批处理或其他手段，打通多个系统和业务，形成半自动的系统流程，人做审核和干预，例如支付和第三方对账，数据打通后可以使用机器对账，流程可以从月级别优化到天甚至小时级别，从大部分人链接系统升级为系统链接职能的人（审批、审核等）。</p><p>第三步是实时流，就像标准生产的流水线一样，一个不多，一个不少，灵活定制，让流程和效率达到最优，在处理速度和衔接环节上做到实时通知、实时处理。</p><h3 id="系统对质量的支撑"><a href="#系统对质量的支撑" class="headerlink" title="系统对质量的支撑"></a>系统对质量的支撑</h3><p>互联网提供的产品就系统本身的功能，系统的sla最核心的是安全性、稳定性、问题响应时间，下一个十年是公司固化的十年，因为版权法会对数据的流动产生封禁作用，核心用户数据无法低成本流通后，新的巨无霸产品崛起的成本就会增加，这和当前互联网的拉新成本越来越高互为印证，数据安全将是未来产品的基本要求。</p><p>对质量的把控，大的产品都有QA团队，做发布前的业务检查、类似产品线的品控一样，对接口功能、性能、安全、维护性、扩展性等做检查，做到事前保障。</p><p>稳定性通过常见的监控系统承载、展示，类似google的dapper系统，可以查看每一次业务请求的依赖，每个请求都是一个有向无环图，通过图可以看出调用路径、深度、耗时、错误等关键信息，进而对产品质量的事后发现、定位提供快速解决的手段。</p><p>传统产品需要召回返修，互联网产品需要修复、升级、发布（app产品，仅是后端升级即可），在这个修复的过程中，大产品需要涉及问题定位、职责定位、问题规模、修复方案、修复跟进人及后续修复效果评估。</p><h3 id="系统对成本的优化"><a href="#系统对成本的优化" class="headerlink" title="系统对成本的优化"></a>系统对成本的优化</h3><p>通过复用降低边际成本。</p><h4 id="存储复用"><a href="#存储复用" class="headerlink" title="存储复用"></a>存储复用</h4><p>业务在发展迭代的过程中，会出现多个业务系统、多个存储系统、多个业务部门，在业务交叉或空白的地方总会存在多个存储系统，做无关紧要的事，因为老系统排期或者资源协调，搭建新的数服务，在整体看，多个数据中心增加了数据协商一致的成本，也增加业务部门间的交互和人力成本。故存储的设计需要最早考虑，业务最影响后续业务迭代的基础服务，如果存储层面升级，基于系统搭建的各个业务系统及使用流程大概率需要升级或迁移。</p><h4 id="服务复用"><a href="#服务复用" class="headerlink" title="服务复用"></a>服务复用</h4><p>常见的系统配置、权限管理、用户信息，基本每个子系统都会涉及，所以初期的时候涉及并服务化，对后续的升级迭代提升效果明显，自然的迭代流程往往导致没有统一的权限管理、配置管理和用户中心。</p><h4 id="流程复用"><a href="#流程复用" class="headerlink" title="流程复用"></a>流程复用</h4><p>大部分的产品分为数据生成端，我称为P，数据消费端，我成为C，也就是PC结构，生产者和消费者，往往也有两个部门（通俗的叫B端和C端，2B类业务），两拨人、两个老大、两条流程，那么很多功能的子流程可以复用，例如相似判断、去重、标签挖掘、检索、安全检查、基础业务库等。现实是几波人几个库，几个流程，那么中间的数据流转就不是生产线的直线，是曲折的交互，在业务数据的处理效率和质量提升上产生不好的影响，所以初期应该规定某些系统的唯一性和负责人。</p><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>互联网系统不产生业务信息、只是业务信息加工和挖掘的提供者，在信息挖掘和加工到信息的消费和使用构成了整个业务体系，如果组织的划分违背了业务数据的流动则业务衰，如果组织划分满足业务数据的流动则业务兴。</p><p>故如果能增加系统的以上属性则是我们的共同目标，如果不满足则不是我们的共同目标，可以不做或少做。</p><p>我们的共同目标是利润，如果说利润增加伤害了业务，我们要做的又是长期业务则不做，系统对收入贡献最大的还是从业务模式、效率提升、业务质量提升入手，降低成本毕竟是业务后期重点关注且易出问题的点。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;目标是什么&quot;&gt;&lt;a href=&quot;#目标是什么&quot; class=&quot;headerlink&quot; title=&quot;目标是什么&quot;&gt;&lt;/a&gt;目标是什么&lt;/h3&gt;&lt;p&gt;人嘛，总是喜欢找理由，比如我们做什么事情的时候，就需要说服自己和别人，我们的目标是什么，我们为什么这么做，有几种办法
      
    
    </summary>
    
    
      <category term="架构" scheme="http://wangchengfei.info/tags/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>曼哈顿工程</title>
    <link href="http://wangchengfei.info/2019/05/22/%E6%9B%BC%E5%93%88%E9%A1%BF%E5%B7%A5%E7%A8%8B/"/>
    <id>http://wangchengfei.info/2019/05/22/曼哈顿工程/</id>
    <published>2019-05-22T02:21:39.000Z</published>
    <updated>2019-05-27T03:37:52.758Z</updated>
    
    <content type="html"><![CDATA[<p>曼哈顿项目是第二次世界大战期间的一项研究和开发项目，生产了第一批核武器。它是美国在联合国和加拿大的支持下开始的。从1942年到1946年，该项目由美国陆军工程兵团的莱斯利·格罗夫斯少将领导。核物理学家罗伯特·奥本海默（RobertOppenheimer）是洛斯阿拉莫斯实验室（LosAlamosLaboratory）的主任，该实验室设计了实际的炸弹。该项目的陆军部分被指定为曼哈顿区；曼哈顿逐渐取代了整个项目的官方代号，替代材料的开发。在这一过程中，该项目吸收了早期的英国同行管合金。曼哈顿项目始于1939年，但后来雇佣了13万多人，耗资近20亿美元（2018年约230亿美元）。超过90%的成本用于建造工厂和生产可裂变材料，少于10%的成本用于武器的开发和生产。研究和生产在美国、英国和加拿大的30多个地点进行。</p><p>战争中同时发展了两种原子弹：一种是相对简单的炮式裂变武器，另一种是较复杂的内爆型核武器。事实证明，炮式设计不适合与钚一起使用，因此开发了一种更简单的炮式，叫做“小男孩”，它使用铀235，一种仅占天然铀0.7%的同位素。在化学上与最常见的同位素铀238相同，质量几乎相同，很难将两者分开。铀浓缩有三种方法：电磁法、气体法和热法。大部分工作是在田纳西州橡树岭的克林顿工程师工厂完成的。</p><p>与铀相关的工作是生产钚。在芝加哥冶金实验室演示了世界上第一个人造核反应堆的可行性之后，它设计了位于橡树岭的X-10石墨反应堆和位于华盛顿汉福德的生产反应堆，其中铀被辐照并转化为钚。然后，使用磷酸铋工艺，从铀中化学分离钚。钚内爆型武器是由洛斯阿拉莫斯实验室共同设计和开发的。</p><p>该项目还负责收集德国核武器项目的情报。通过Also行动，曼哈顿项目人员在欧洲服役，有时在敌后，在那里他们收集核材料和文件，并围捕德国科学家。尽管曼哈顿项目的安全性很强，苏联的原子间谍还是成功地渗透了该项目。</p><p>1945年7月16日，在新墨西哥州阿拉莫戈多爆炸和射击场进行的三位一体试验中，第一个引爆的核装置是内爆型炸弹。一个月后，广岛和长崎的原子弹爆炸分别使用了“小男孩”和“胖男人”炸弹。战后几年，曼哈顿项目在比基尼环礁进行了武器测试，作为作战十字路口的一部分，开发了新的武器，促进了国家实验室网络的发展，支持放射医学研究，为核海军奠定了基础。在1947年1月美国原子能委员会成立之前，它一直控制着美国的原子武器研究和生产。</p><h3 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h3><p>1938年，德国化学家奥托·哈恩和弗里茨·斯特拉斯曼发现了核裂变现象，里斯·梅特纳和奥托·弗里什对其进行了理论解释，这使得原子弹的研制成为一种理论可能性。人们担心德国的原子弹项目会首先发展，尤其是在纳粹德国和其他法西斯国家中。1939年8月，匈牙利出生的物理学家Le_szil_rd和Eugene Wigner起草了一份宣言，其中警告说“极有力量”的潜在新型炸弹”。它敦促美国采取措施获取铀矿石储备，并加速恩里科·费米和其他人对核链式反应的研究。他们让阿尔伯特·爱因斯坦签署了这封信，交给了富兰克林·罗斯福总统。罗斯福呼吁国家标准局的莱曼·布里格斯领导铀问题咨询委员会调查这封信提出的问题。布里格斯于1939年10月21日举行了一次会议，出席会议的有斯齐尔德威格纳和爱德华泰勒。委员会在11月向罗斯福报告说，铀“将提供一种可能的炸弹来源，其破坏性远远大于目前已知的任何东西。”</p><p>铀问题咨询委员会于1940年6月27日成立时成为了国防研究委员会（NDRC）的铀问题咨询委员会。布里格斯提议花费16.7万美元研究铀，特别是铀235同位素和最近发现的钚。1941年6月28日，罗斯福签署了行政或德8807，创建了科学研究与发展办公室（OSRD），和瓦内瓦·布什作为主任。除了研究之外，国家发改委还授权该办公室从事大型工程项目。国家发改委的铀委员会成为了OSRD的S-1部门；出于安全原因，“铀”一词被删除了。</p><p>在英国，伯明翰大学的Frisch和Rudolf Peierls在1939年6月对铀235临界质量进行了一次突破性的研究。他们的计算表明，铀235的临界质量在10千克（22磅）的数量级内，这个数量级很小，足以被当天的轰炸机携带。他们1940年3月的Frisch–PeierLS备忘录启动了英国原子弹项目及其MAUD委员会，一致建议开发原子弹。1940年7月，英国提出给予美国科学研究的机会，蒂扎德特派团的约翰·科克罗夫特向美国科学家介绍了英国的发展。他发现美国的项目比英国的小，而且进展不远。</p><p>作为科学交流的一部分，MAUD委员会的研究结果被传送到美国。它的成员之一，澳大利亚物理学家马克·奥列芬特，于1941年8月下旬飞往美国，发现由MAUD委员会提供的数据还没有到达关键的美国物理学家手中。奥列芬特随后着手调查为什么委员会的调查结果显然被忽视了。他会见了铀委员会，并访问了加利福尼亚的伯克利，在那里他与欧内斯特O.劳伦斯进行了有说服力的交谈。劳伦斯对开始自己的铀研究印象深刻。他依次与詹姆斯•B•科南特、亚瑟•H•康普顿和乔治•B•佩格拉姆交谈。因此，奥列芬特的任务是成功的；美国的主要物理学家现在意识到原子弹的潜在威力。</p><p>1941年10月9日，罗斯福总统在与瓦内瓦·布什和副总统亨利·A·华莱士召开会议后批准了原子能计划。为了控制这一计划，他成立了一个由他自己组成的高层政策小组，尽管他从未参加过华莱士、布什、康南、战争部长亨利·L·斯蒂姆森和陆军参谋长乔治·C·马歇尔将军的会议。罗斯福选择军队而不是海军来管理这个项目，因为军队在大型建设项目的管理方面有更多的经验。他还同意与英国协调这一努力，10月11日，他向英国首相温斯顿·丘吉尔（Winston Churchill）发送了一封信，建议他们在原子问题上保持一致。</p><h3 id="可行性"><a href="#可行性" class="headerlink" title="可行性"></a>可行性</h3><p><strong>建议</strong></p><p>1941年12月18日，在珍珠港袭击和随后的《美国对日战争宣言》以及德国战争之后，S-1委员会召开了会议，会议“充满了热情和紧迫的气氛”。正在进行三种不同的同位素分离技术的工作，以将铀235从更丰富的铀-238。劳伦斯和他在加利福尼亚大学伯克利分校的研究小组研究了电磁分离，而艾格·穆尔弗里和杰西·韦克菲尔德·博姆的研究小组在哥伦比亚大学研究了气体扩散，菲利普·艾伯森在华盛顿卡内基研究所指导了热扩散的研究。</p><p>与此同时，有两条研究核反应堆技术的路线，哈罗德·尤里继续在哥伦比亚大学研究重水，而亚瑟·康普顿将哥伦比亚大学、加利福尼亚大学和普林斯顿大学的科学家们带到芝加哥大学，在那里他组织了metallurgi。1942年初，加州实验室研究钚和使用石墨作为中子慢化剂的反应堆。Briggs、Compaton、Lawrence、Murpree和Urey于1942年5月23日召开会议，最终确定了S-1委员会的建议，该建议要求所有五项技术都必须采用。这一建议得到了布希、科南特和布赖恩B.萨默维尔少将的参谋长威廉D.施泰尔准将的批准。萨默维尔被任命为军方核问题代表。随后，布希和科南特将建议提交给最高政策组，预算为541.6亿美元，用于建设。美国陆军工程兵团提供的信息，OSRD提供的研发费用为3100万美元，1943财年提供的应急费用为5600万美元。最高政策小组随后于1942年6月17日将其送交总统，并通过在文件上写上“OK FDR”予以批准。</p><p><strong>炸弹设计概念</strong></p><p>康普顿要求加州大学伯克利分校的理论物理学家J.罗伯特·奥本海默（J.Robert Oppenheimer）接管对快中子计算的研究。快中子计算是计算临界质量和武器爆炸的关键，格雷戈里·布雷特（Gregory Breit）于1942年5月18日因担心操作安全而辞职。冶金实验室的ST被指派通过联系和协调分散在全国各地的实验物理小组来协助奥本海默。伊利诺伊大学的奥本海默和罗伯特·塞伯研究了中子扩散问题，中子是如何在核链式反应中移动的，以及中子在水动力学中的运动。由连锁反应产生的损耗可能表现出来。为了回顾这项工作和裂变反应的一般理论，奥本海默和费米于1942年7月在芝加哥大学和加利福尼亚大学伯克利分校分别与理论物理学家汉斯·贝思、约翰·范·弗莱克、爱德华·特勒、埃米尔·科诺皮斯基、罗伯特·塞伯、斯坦·弗兰克尔和艾尔德雷德·C·纳尔逊召开了会议。奥本海默的三个前学生，实验物理学家埃米利奥·西格、菲利克斯·布洛赫、弗朗哥·拉塞蒂、约翰·亨利·曼利和埃德温·麦克米兰。他们初步证实了理论上可能存在裂变弹。</p><p>还有很多未知因素。纯铀235的性质相对来说是未知的，钚的性质也是未知的，钚是1941年2月格伦·西堡和他的团队才发现的一种元素。在（1942年7月）伯克利会议上，科学家们设想在核反应堆中制造钚，铀238原子吸收了裂变铀235原子释放的中子。到目前为止，还没有建造反应堆，只有少量的钚可以从回旋加速器中获得。甚至到1943年12月，也只有2毫克的钚被生产出来。有很多种方法可以将裂变材料排列成临界质量。最简单的方法是用一种“捣固”材料将“圆柱形塞”发射到一个“活性物质”球体中，这种“捣固”材料会使中子向内聚焦，使反应质量保持在一起，以提高其效率。他们还探索了涉及球体的设计，这是理查德·C·托尔曼（Richard C.Tolman）提出的一种原始“内爆”形式，以及f自动催化方法，这将提高炸弹爆炸时的效率。</p><p>裂变弹的理论观点至少在获得更多实验数据之前得到了解决，1942年的伯克利会议随后转向了另一个方向。爱德华·特勒推动讨论一种更强大的原子弹：“超级”，现在通常被称为“氢弹”，它利用引爆裂变原子弹的爆炸力来点燃氘和氚的核聚变反应。特勒把聚变的想法放在一边，集中精力制造裂变弹。他还提出了一种推测可能性，即原子弹可能会因为假设的氮原子核聚变反应而“点燃”大气。贝思计算出这是不可能发生的，特勒共同撰写的一份报告显示，“没有自我反应”。奥本海默在塞伯的叙述中提到了这种情况发生的可能性。</p><h3 id="组织机构"><a href="#组织机构" class="headerlink" title="组织机构"></a>组织机构</h3><h4 id="曼哈顿区"><a href="#曼哈顿区" class="headerlink" title="曼哈顿区"></a>曼哈顿区</h4><p>1942年6月，总工程师尤金·雷博尔德少将任命詹姆斯·C·马歇尔上校为陆军项目负责人。马歇尔在华盛顿建立了一个联络处，但他在纽约的百老汇270号18楼建立了临时总部，在那里他可以利用工程兵团北大西洋分部的行政支持。它靠近曼哈顿的石头和韦伯斯特办公室，主要的项目承包商，哥伦比亚大学。他有权动用他的前司令部，锡拉丘兹区的工作人员，他开始与肯尼思·尼科尔斯中校合作，后者成为他的副手。</p><p>由于马歇尔的大部分工作都涉及到建筑，因此他与工程兵团建设司团长、托马斯·M·罗宾斯少将及其副手莱斯利·格罗夫斯上校合作。Reybold、Somervell和Styer决定将该项目称为“开发替代材料”，但Groves认为这将引起注意。由于工程师区通常带有他们所在城市的名称，马歇尔和格罗夫斯同意将该项目的陆军部分命名为曼哈顿区。这是在8月13日，当Reybold发布创建新区的命令时正式发布的。非正式地，它被称为曼哈顿工程师区，或医学院。与其他地区不同，它没有地理边界，马歇尔有一个部门工程师的权力。替代材料的开发仍然是整个项目的官方代号，但随着时间的推移被“曼哈顿”所取代。</p><p>马歇尔后来承认，“我从来没有听说过原子裂变，但我知道你不可能建造一座核电站，更不用说其中四座核电站的造价为9000万美元。” 尼科尔斯最近在宾夕法尼亚州建造的一座TNT核电站的造价为1.28亿美元。他们对最接近数量级的估算也不感兴趣，这简直令人叹为观止。相比之下，斯通和韦伯斯特的一个调查团队已经为生产工厂寻找了一个场地。战争生产委员会建议在田纳西州诺克斯维尔附近建立一个隔离区，田纳西河谷管理局可以提供充足的电力，河流可以为反应堆提供冷却水。在检查了几个地点后，调查小组在田纳西州埃尔扎附近选择了一个。康南特建议立即获取，斯泰尔同意，但马歇尔在采取行动之前，在等待康南特的反应堆实验结果的情况下，对预期的过程进行了临时性的调整，只有劳伦斯的电磁分离显得足够先进，可以开始施工。</p><p>马歇尔和尼科尔斯开始收集他们需要的资源。第一步是获得项目的高优先级。最高的评级是AA-1到AA-4，降序排列，尽管也有一个特殊的AAA评级为紧急情况保留。AA-1和AA-2是基本武器和设备的等级，因此，服务和供应需求和资源部的副参谋长卢修斯D.克莱上校认为，他可以分配的最高等级是AA-3，尽管他愿意根据需要对关键材料提供AAA等级。所有人都很失望；AA-3和宾夕法尼亚州尼科尔斯的TNT工厂一样重要。</p><h4 id="军事政策委员会"><a href="#军事政策委员会" class="headerlink" title="军事政策委员会"></a>军事政策委员会</h4><p>Vannevar Bush对Marshall上校未能迅速推进该项目感到不满，特别是未能获得田纳西州的位置，军队分配给该项目的低优先级，以及他在纽约市的总部所在地等问题。致哈维·邦迪和马歇尔将军、萨默维尔以及斯泰尔将军。他希望该项目由一个高级政策委员会管理，由一位有声望的官员（最好是施泰尔）担任总经理。</p><p>萨默维尔和斯泰尔选择格罗夫斯担任这一职务，并于9月17日将这一决定告知他。马歇尔将军命令将他提升为准将，因为人们认为，“将军”这个头衔将对从事曼哈顿项目的学术科学家产生更大的影响。梅维尔而不是雷伯德，马歇尔上校现在对格罗夫斯负责。格罗夫斯在华盛顿特区新陆军部大楼的五楼建立了他的总部，马歇尔上校在那里有他的联络处。他于9月23日接管了曼哈顿项目。当天晚些时候，他参加了由史蒂姆森召集的会议，史蒂姆森成立了一个军事政策委员会，负责最高政策小组的工作，该委员会由布什（以科南特为候补人选）、史蒂尔和海军少将威廉·R·珀内尔组成。</p><p>9月19日，格罗夫斯去找战争制作委员会主席唐纳德·纳尔逊，要求获得广泛的授权，在需要的时候发布AAA评级。尼尔森起初犹豫了一下，但很快就屈服了，因为格罗夫斯威胁要去见总统。格罗夫斯承诺，除非必要，否则不会使用AAA评级。很快就发现，对于项目的常规要求，AAA评级太高，但AA-3评级太低。经过长时间的竞选，格罗夫斯终于在1944年7月1日获得了AA-1的授权。罗斯福政府提出的大多数建议都将具有最高优先权。这将持续大约一到两周，然后其他事情将得到优先考虑。</p><p>格罗夫斯早期的问题之一是为Y项目找一个负责人，这个项目是设计和建造炸弹的组织。显而易见的选择是尤里、劳伦斯或康普顿这三个实验室负责人中的一个，但他们不能幸免。康普顿推荐了奥本海默，他已经非常熟悉炸弹的设计概念。然而，奥本海默缺乏管理经验，与尤里、劳伦斯和康普顿不同，他没有获得诺贝尔奖，许多科学家认为，这样一个重要实验室的负责人应该获得诺贝尔奖。还有人担心奥本海默的安全地位，因为他的许多同伙都是共产党人，包括他的兄弟弗兰克·奥本海默、他的妻子基蒂和他的女朋友让·塔特洛克。1942年10月，在火车上的一次长时间谈话使格罗夫斯和尼科尔斯确信，奥本海默完全理解在偏远地区建立实验室所涉及的问题，并应被任命为实验室主任。格罗夫斯本人放弃了安全要求，并于1943年7月20日签发了奥本海默许可证。</p><h4 id="英国合作"><a href="#英国合作" class="headerlink" title="英国合作"></a>英国合作</h4><p>英国和美国交换了核信息，但最初并没有把他们的努力结合起来。1941年，英国拒绝了布什和康南试图加强与自己的代号为“管合金”的项目的合作，因为英国不愿意分享自己的技术领先地位，也不愿意帮助美国发展自己的原子弹。一位美国科学家，他把罗斯福的一封私人信带给丘吉尔，提议支付所有的研究费用。一个英美项目的建筑和开发受到了不好的对待，丘吉尔没有回复这封信。因此，美国早在1942年4月就决定，如果它的提议被拒绝，他们就应该单独行动。在战争初期做出了重大贡献的英国人，在为生存而战的同时，没有足够的资源来执行这样的研究计划。因此，管合金很快就落后于美国的同行，1942年7月30日，负责管合金的部长约翰·安德森爵士建议丘吉尔：“我们必须面对这样一个事实，即……【我们的】开拓性工作……这是一种不断萎缩的资产，除非我们迅速将其资本化，否则我们将被超支。我们现在对“合并”做出了真正的贡献，很快我们将几乎没有任何贡献。</p><p>然而，平等合作的机会已不复存在，如1942年8月所示，当时英国人要求对该项目进行实质性的控制，却不支付任何费用。到1943年，这两个国家的角色从1941年底开始转变；1月，康南特通知英国，除了某些地区，他们将不再接收原子信息。尽管英国人对废除丘吉尔-罗斯福协议感到震惊，但加拿大国家研究委员会（National Research Council）主席C.J.麦肯齐（C.J.Mackenzie）却不那么惊讶，他写道：“我禁不住感到联合王国集团（United Kingdom Group）过分强调了与美国相比他们所做贡献的重要性。” 正如康南特和布什在接受《金融时报》采访时所说。英国人，命令来自“最高层”。</p><p>英国的谈判地位恶化了；美国科学家决定美国不再需要外界的帮助，他们希望阻止英国利用战后的原子能商业应用。委员会支持，罗斯福也同意，将信息流限制在战争期间英国可以使用的范围内，尤其是不使用炸弹设计，即使这样做会减慢美国的计划。到1943年初，英国停止向美国派遣研究和科学家，结果美国停止了所有信息共享。英国考虑终止加拿大铀和重水的供应，迫使美国再次分享，但加拿大需要美国的供应来生产这些铀和重水。他们调查了独立核计划的可能性，但决定不能及时准备好影响欧洲战争的结果。</p><p>到1943年3月，康南特决定英国的帮助将有利于该项目的某些领域。詹姆斯·查德威克和另外一两位英国科学家非常重要，以至于洛斯阿拉莫斯的炸弹设计小组需要他们，尽管他们有泄露武器设计秘密的风险。1943年8月，丘吉尔和罗斯福就魁北克协议进行了谈判，结果在同一个项目上工作的科学家之间恢复了合作。然而，英国同意限制建造炸弹所需大型生产工厂的数据。随后的海德公园协议于1944年9月将这种合作延长到战后时期。魁北克协议成立了联合政策委员会，以协调美国。陆军元帅约翰·迪尔爵士和J·J·莱韦林上校是英国成员，C·D·豪是加拿大成员。1945年初被英国驻美国大使哈利法克斯勋爵取代。1944年11月，约翰·迪尔爵士在华盛顿去世，并被亨利·梅特兰·威尔逊元帅取代为英国联合参谋长和联合政策委员会成员。</p><p>魁北克协议达成后，当合作重新开始时，美国人的进步和支出让英国人大吃一惊。美国已经花费了超过10亿美元（今天是11800000000美元），而在1943年，英国花费了大约50万英镑。因此，查德威克要求英国最大限度地参与曼哈顿项目，并放弃战争期间英国项目的任何希望。在丘吉尔的支持下，他试图确保格罗夫斯请求援助的每一个请求都得到尊重。1943年12月抵达美国的英国使团包括艾尔斯·波尔、奥托·弗里希、克劳斯·富克斯、鲁道夫·皮尔斯和欧内斯特·泰特顿等。1944年初又有更多的科学家抵达。1944年秋天，那些被分配到气体扩散的人，35个在伯克利与劳伦斯一起工作的人被分配到现有的实验室小组，一直呆到战争结束。派往洛斯阿拉莫斯的19个组织也加入了现有的组织，主要与内爆和炸弹组装有关，但与钚无关魁北克协议的一部分规定，未经双方同意，不得对另一个国家使用核武器。1945年6月，威尔逊同意对日本使用核武器将被记录为联合政策委员会的决定。</p><p>联合政策委员会于1944年6月成立了联合发展信托基金，以格罗夫斯为主席，在国际市场采购铀和钍矿石。比利时、刚果和加拿大在东欧以外拥有世界上大部分的铀，比利时流亡政府也在伦敦。英国同意给予美国大部分比利时矿石，因为如果没有美国的研究限制，它无法使用大部分的供应。1944年，信托基金从比利时刚果的矿业公司购买了3440000磅（1560000 kg）的氧化铀矿石。为了避免向美国财政部长亨利•摩根索（Henry Morgenthau Jr.）通报该项目，使用了一个不受常规审计和控制的特殊账户来持有信托资金。从1944年到1947年他辞去信托，格罗夫斯总共向信托账户存入了3750万美元。</p><p>格罗夫斯赞赏英国早期的原子研究和英国科学家对曼哈顿项目的贡献，但他表示，没有他们，美国不会成功的。他还说丘吉尔是“原子弹项目的最好朋友，因为他保持了罗斯福的兴趣……他只是告诉他，他认为这个项目有多重要，以此来煽动他。</p><p>英国战时的参与对于战后英国独立核武器计划的成功至关重要，当时1946年的《麦克马洪法》暂时终止了美国的核合作。</p><h3 id="项目地点"><a href="#项目地点" class="headerlink" title="项目地点"></a>项目地点</h3><h4 id="橡树岭"><a href="#橡树岭" class="headerlink" title="橡树岭"></a>橡树岭</h4><p>在他接手该项目的第二天，格罗夫斯和马歇尔上校乘火车去田纳西州视察那里的提议地点，格罗夫斯印象深刻。1942年9月29日，美国副国务卿罗伯特P.帕特森授权工程兵团在一个COS通过征用土地获得5.6万英亩（2.3万公顷）的土地。350万吨。随后又收购了3000英亩（1200公顷）。大约有1000个家庭受到影响，该命令于10月7日生效。到11月中旬，抗议、法律上诉和1943年国会调查均无济于事。美国元帅们在张贴通知，要求在农舍门上腾出房屋，建筑承包商也在搬进来。一些家庭得到了两周的时间。注意要腾出几代人居住的农场；其他人在20世纪20年代被逐出大烟山国家公园或20世纪30年代的诺里斯大坝后定居在那里。该地区的土地征用最终成本只有260万美元，直到1945年3月才完成，这一成本仅为160万美元。田纳西州州长普伦蒂斯·库珀愤怒地撕毁了这块土地，并宣布橡树岭是一个完全不允许任何人未经军事许可进入的禁区。</p><p>最初被称为金斯敦拆除范围，该网站在1943年初正式更名为克林顿工程师工程（CEW）。而斯通和韦伯斯特集中在生产设施，建筑和工程公司斯基德莫尔，奥温斯和美林设计和建造了13000个居住社区。该社区位于黑橡树岭的斜坡上，新的橡树岭小镇由此得名。1943年8月，尼科尔斯取代马歇尔成为曼哈顿工程师区的区长，增加了在橡树岭的军队驻扎。他的首要任务之一是将地区总部迁至橡树岭，尽管该地区的名称没有改变。1943年9月，社区设施的管理通过一家子公司，罗安安德森公司外包给特纳建筑公司（为橡树岭所在的罗安县和安德森县）。化学工程师，包括William J.Wilcox Jr.和Warren Fuchs，都是“疯狂的努力”的一部分，努力使10%至12%的浓缩铀235，即代号为“四氧化二钛合金”，具有严密的安全性和对供应和材料的快速批准[86]橡树岭的人口很快超过了最初的计划，并达到了顶峰。1945年5月，T75000，到那时，共有82000人受雇于克林顿工程公司（Clinton Engineer Works），罗安安德森（Roane Anderson）分别为73人和10000人。</p><p>美术摄影师约瑟芬·赫里克（JosephineHerrick）和她的同事玛丽·斯蒂尔斯（MarySteers）帮助记录了橡树岭的作品。</p><h4 id="洛斯阿拉莫斯"><a href="#洛斯阿拉莫斯" class="headerlink" title="洛斯阿拉莫斯"></a>洛斯阿拉莫斯</h4><p>考虑将项目Y定位在橡树岭的想法，但最终决定它应该在一个偏远的地方。根据奥本海默的建议，寻找合适地点的范围缩小到了新墨西哥州阿尔伯克基附近，奥本海默在那里拥有一个牧场。1942年10月，曼哈顿项目的约翰·H·达德利少校被派去调查这一地区，他建议在新墨西哥州杰梅兹泉附近建一个遗址。11月16日，奥本海默、格罗夫斯夫、达德利等人参观了这一遗址。奥本海默担心，工地周围的高崖会让他的人民感到幽闭恐惧，而工程师们则担心洪水的可能性。随后，该党搬到了洛斯阿拉莫斯牧场学校附近。奥本海默对该遗址印象深刻，并表达了强烈的偏爱，他引用了该遗址的自然美景和圣克雷·德·克里斯托山脉的景色，希望这将激励那些从事该项目工作的人们。工程师们担心的是道路不畅，供水是否充足，但另有感觉。它是理想的。</p><p>帕特森于1942年11月25日批准了对该地块的收购，授权440000美元收购该地块54000英亩（22000公顷），其中8900英亩（3600公顷）已归联邦政府所有。“只要军事需要继续存在，就向陆军部提供ST服务用地。”对土地的需求，新公路的需求，以及后来25英里（40公里）电力线的通行权的需求，最终使战时的土地购买量达到45737英亩（18509.1 ha），但仅花费了414971美元。建造合同由M.M.Sundt Com承建。帕尼来自亚利桑那州图森市，与威拉德·C·克鲁格以及新墨西哥州圣达菲市的合伙人一起担任建筑师和工程师。工程于1942年12月开工。格罗夫斯最初拨出30万美元用于建设，是奥本海默估计的三倍，计划于1943年3月15日竣工。很快，很明显Y项目的范围比预期的要大，到1943年11月30日Sundt完成时，已经花费了超过700万美元。</p><p>因为这是秘密，洛斯阿拉莫斯被称为“Y地”或“山”。[95]战争期间出生在洛斯阿拉莫斯的婴儿的出生证明将他们的出生地列为圣达菲1663号邮政信箱[96]最初洛斯阿拉莫斯将是一个军事实验室，奥本海默和其他研究人员被委托进入军队。奥本海默甚至为自己订购了中校制服，但两位重要的物理学家，罗伯特·巴彻和伊西多尔·拉比，对这个想法犹豫不决。随后，康南特、格罗夫斯和奥本海默设计了一个折衷方案，该实验室由加利福尼亚大学根据与陆军部的合同进行运作。</p><h4 id="芝加哥"><a href="#芝加哥" class="headerlink" title="芝加哥"></a>芝加哥</h4><p>1942年6月25日，一个陆军OSRD委员会决定在芝加哥西南部红门森林建立一个钚生产试点工厂。7月，尼科尔斯安排从库克县森林保护区租赁1025英亩（415_ha），詹姆斯·F·格拉夫顿船长被任命为芝加哥地区工程师。很快就发现，该地区的经营规模太大，决定在橡树岭建造工厂，并在芝加哥保留一个研究和测试设施。</p><p>由于在红门森林建立核电站的延迟，康普顿授权冶金实验室在芝加哥大学斯塔格场露天看台下建造第一座核反应堆。这个反应堆需要大量的石墨块和铀芯块。当时，纯铀的来源有限。爱荷华州立大学的弗兰克·斯佩丁只能生产两短吨纯铀。另外三短吨的铀金属是由西屋灯厂提供的，这家工厂是用临时工艺紧急生产的。1942年12月2日，由Enrico Fermi领导的一个小组在一个名为芝加哥1号堆的实验反应堆中启动了第一个人工的自持的核链反应。在这个点上，一个反应变为自持的点被称为“Going C”。康普顿通过一个编码电话向位于华盛顿的康纳特报告了这一成功，他说：“意大利航海家费米刚刚登陆新大陆。”</p><p>1943年1月，格拉夫顿的继任者亚瑟·彼得森少校下令在红门森林拆除和重新组装芝加哥1号堆，因为他认为反应堆的运行对人口稠密的地区来说太危险了。1944年5月15日，第一座重水反应堆芝加哥3号堆阿贡核电站发生了严重事故。留在红门的行动转移到距离阿贡国家实验室大约6英里（9.7_公里）的新地点。</p><h4 id="汉福德"><a href="#汉福德" class="headerlink" title="汉福德"></a>汉福德</h4><p>到1942年12月，人们担心，即使是橡树岭，在发生重大核事故的可能性不大的情况下，也过于靠近主要人口中心（诺克斯维尔）。格罗夫斯于1942年11月聘用杜邦公司为钚生产厂的主要承包商。杜邦公司获得了一份标准成本加固定费用的合同，但公司总裁沃尔特·S·卡彭特（Walter S.Carpenter，Jr.）不希望获得任何形式的利润，并要求修改拟议的合同，明确排除公司获得任何专利权的可能性。这是可以接受的，但出于法律原因，双方商定了一美元的象征性费用。战后，杜邦要求早日解除合同，并返还33美分。</p><p>杜邦公司建议该地点远离橡树岭现有的铀生产设施。1942年12月，格罗夫斯派遣富兰克林·马蒂亚斯上校和杜邦公司的工程师去寻找潜在的地点。马蒂亚斯报道说，汉福德位于华盛顿里奇兰附近，这是“几乎所有方面的理想”。它被隔离在哥伦比亚河附近，可以提供足够的水来冷却产生钚的反应堆。格罗夫斯于1月份访问了该遗址，并建立了汉福德工程师工程（HEW），代号为“W遗址”。</p><p>副国务卿帕特森于2月9日批准了这一计划，并拨出500万美元用于该地区4万英亩（1.6万公顷）土地的收购。联邦政府重新安置了怀特布拉夫斯和汉福德的1500名居民，以及附近的定居点，以及瓦纳普姆和其他使用该地区的部落。在获得土地之前已经种植的农作物的补偿问题上，农民们发生了争执。在时间表允许的情况下，军队允许收割庄稼，但这并不总是可能的。土地征用过程一直拖下去，并在1946年12月曼哈顿项目结束之前没有完成。</p><p>这场争端没有耽误工作。尽管冶金实验室和杜邦公司的反应堆设计进展不足以准确预测项目的范围，但1943年4月开始对约25000名工人的设施进行开工，其中一半预计将在现场居住。到1944年7月，已建成约1200座建筑，近5.1万人居住在施工营地。作为地区工程师，马蒂亚斯对该地区进行了全面控制。在该地区的顶峰时期，施工营地是华盛顿州人口第三大城市。汉福德经营着900多辆公交车，超过了芝加哥市。与洛斯阿拉莫斯和橡树岭一样，里奇兰是一个封闭社区，入口受到限制，但看起来更像是一个封闭社区。就像一个典型的战时美国新兴城市：军事形象较低，高栅栏、高塔和看门狗等物理安全因素也不那么明显。</p><h4 id="加拿大地点"><a href="#加拿大地点" class="headerlink" title="加拿大地点"></a>加拿大地点</h4><h5 id="不列颠哥伦比亚"><a href="#不列颠哥伦比亚" class="headerlink" title="不列颠哥伦比亚"></a>不列颠哥伦比亚</h5><p>自1930年以来，科明科在不列颠哥伦比亚省的Trail生产电解氢。尤里在1941年提出可以产生重水。在现有的1000万美元的发电厂中，包括3215个电池，耗电75兆瓦，增加了二次电解电池，将水中的氘浓度从2.3%提高到99.8%。在这一过程中，普林斯顿的休·泰勒在前三阶段开发了一种碳载铂催化剂，而尤里在第四阶段开发了一种镍铬合金催化剂。最终成本为280万美元。加拿大政府直到1942年8月才正式获悉该项目。Trail的重水生产始于1944年1月，一直持续到1956年。Trail的重水被用于芝加哥3号堆，这是第一个使用重水和天然铀的反应堆，在1944年5月15日达到临界状态。</p><h5 id="安大略"><a href="#安大略" class="headerlink" title="安大略"></a>安大略</h5><p>安大略省白垩河遗址的建立是为了把盟军的工作安置在远离市区的蒙特利尔实验室。在安大略省深水河建立了一个新社区，为团队成员提供住所和设施。选址地点靠近安大略省和魁北克省的工业制造区，靠近靠近一个大型军事基地佩塔瓦瓦营地的铁路头。位于渥太华河上，有充足的水源。新实验室的第一任主任是汉斯·冯·哈尔班。1944年5月，约翰·科克洛夫特接替了他，随后，贝内特·刘易斯在1946年9月接替了他。一个名为Zeep（零能量实验堆）的试验反应堆成为加拿大第一个反应堆，也是第一个在美国以外完成的反应堆，当它在1945年9月进入临界状态时，Zeep一直被研究人员使用到1970年。一个在战争期间设计的更大的10兆瓦NRX反应堆在JU完成并进入临界状态。</p><h4 id="重水场地"><a href="#重水场地" class="headerlink" title="重水场地"></a>重水场地</h4><p>尽管杜邦对核反应堆的首选设计是氦冷却，并使用石墨作为慢化剂，但杜邦仍然表示有兴趣使用重水作为备用，以防石墨反应堆的设计因某种原因不可行。为此，估计每月需要3短吨（2.7吨）的重水。P-9项目是政府的重水生产项目代号。由于当时在建的Trail工厂每月可生产0.5短吨（0.45_t），因此需要增加产能。因此，格罗夫斯授权杜邦在西弗吉尼亚州摩根敦附近的摩根敦军械厂、印第安纳州达纳和纽波特附近的沃巴什河军械厂以及阿拉巴马州Childersburg和Sylacauga附近的阿拉巴马军械厂建立重水设施。虽然被称为军械工程，并根据军械部合同支付了费用，但它们是由陆军工程兵团建造和运营的。美国的工厂采用了一种不同于Trail的工艺；利用重水沸点稍高的优势，通过蒸馏提取重水。</p><h3 id="铀"><a href="#铀" class="headerlink" title="铀"></a>铀</h3><h4 id="矿石"><a href="#矿石" class="headerlink" title="矿石"></a>矿石</h4><p>该项目的关键原材料是铀，它被用作反应堆的燃料，被转化为钚的原料，以及原子弹本身的浓缩形式。1940年，有四个已知的主要铀矿床：科罗拉多、加拿大北部、捷克斯洛伐克的约阿希姆斯塔尔和比利时刚果。除了约阿希姆斯塔尔以外，其余都在盟军手中。1942年11月的一次调查确定，有足够数量的铀可用于满足项目的要求。尼克尔斯与国务院安排了出口控制措施，对氧化铀进行控制，并就从比利时刚果购买1200短吨（1100吨）铀矿石进行了谈判，这些铀矿石储存在比利时刚果。斯塔顿岛上的一个仓库和刚果境内剩余的矿藏。他与埃尔多拉多金矿公司就从其位于安大略省霍普港的炼油厂购买矿石和100吨批次的矿石进行了谈判。加拿大政府随后收购了该公司的股票，直到获得控股权。</p><p>虽然这些购买保证了足够的供应以满足战时的需要，但美国和英国领导人得出结论，为了他们国家的利益，尽可能地控制世界上的铀矿床。最丰富的矿石来源是比利时刚果的Shinkolobwe矿，但它被洪水淹没并关闭。尼科尔斯没有成功地尝试与拥有该矿的公司Union Mini_re du Haut Katanga的董事埃德加·塞吉尔（Edgar Sengier）谈判重新开矿，并将未来的全部产出出售给美国。由于Union Mini_re 30%的股份由英国利益控制，英国在谈判中处于领先地位。约翰安德森爵士和约翰温南特大使于1944年5月与塞吉尔和比利时政府达成了一项协议，要求重开该矿，以每磅1.45美元的价格购买1720短吨（1560吨）矿石。为了避免依赖英国和加拿大人购买矿石，格罗夫斯还安排购买美国钒公司的科罗拉多州乌拉万的托克普利。科罗拉多州的铀矿开采产生了约800短吨（730吨）的矿石。</p><p>位于密苏里州圣路易斯的Mallinckrodt公司提取了原矿，将其溶解在硝酸中，生产硝酸铀酰。然后在液-液萃取过程中加入乙醚，从硝酸铀酰中分离杂质。然后将其加热形成三氧化铀，并将其还原成高纯度的二氧化铀，到1942年7月，Mallinckrodt每天生产一吨高纯度的氧化物，但最初证明将其转化为铀金属对承包商西屋和金属氢化物来说更困难。生产速度太慢，质量不合格。很低。爱荷华州艾姆斯市的爱荷华州立学院成立了冶金实验室的一个特殊分支，由弗兰克·斯佩丁负责研究替代方案。这被称为Ames项目，其Ames过程在1943年开始可用。</p><h4 id="同位素分离"><a href="#同位素分离" class="headerlink" title="同位素分离"></a>同位素分离</h4><p>天然铀包括99.3%的铀-238和0.7%的铀-235，但只有后者是可裂变的。化学上相同的铀235必须从更丰富的同位素中物理分离出来。人们考虑了各种各样的铀浓缩方法，其中大部分是在橡树岭进行的。</p><p>最明显的技术，离心机，失败了，但电磁分离，气体扩散和热扩散技术都是成功的，并为该项目作出了贡献。1943年2月，格罗夫斯提出利用一些植物的产量作为其他植物的投入。</p><h5 id="离心机"><a href="#离心机" class="headerlink" title="离心机"></a>离心机</h5><p>1942年4月，离心分离法被认为是唯一有前途的分离方法。杰西·贝恩斯在20世纪30年代在弗吉尼亚大学开发了这种分离法，但遇到了技术难题。这个过程需要很高的转速，但在一定的转速下，谐波振动会发展，威胁到机器的解体。因此有必要通过这些速度快速加速。1941年，他开始研究六氟化铀，这是唯一已知的铀的气态化合物，并能够分离铀235。在哥伦比亚大学，尤里让卡尔·科恩研究了这一过程，他提出了一套数学理论体系，使设计一个离心分离装置成为可能，西屋电气承担了这一任务。</p><p>将其扩大到一个生产工厂是一个巨大的技术挑战。Urey和Cohen估计，每天生产1千克（2.2磅）的铀235需要50000台1米（3英尺3英寸）转子的离心机，或者10000台4米（13英尺）转子的离心机，前提是可以制造4米转子。保持如此多的转子持续高速运转的前景似乎令人望而生畏，当梁运行他的实验装置时，他只获得了预计产量的60%，这表明需要更多的离心机。Beams、Urey和Cohen随后开始进行一系列改进工作，这些改进承诺会提高流程的效率。然而，电机、轴和轴承在高速下的频繁故障推迟了试验工厂的工作。1942年11月，军事政策委员会根据Conant、Nichols和8月Stone&amp;Webster的C.Klein的建议，放弃了离心过程。</p><h5 id="电磁分离"><a href="#电磁分离" class="headerlink" title="电磁分离"></a>电磁分离</h5><p>电磁同位素分离是由劳伦斯在加州大学辐射实验室开发的。这种方法使用了被称为“卡鲁特龙”的装置，它是标准实验室质谱仪和回旋加速器的混合物。这个名字来源于加利福尼亚、大学和回旋加速器等词在电磁过程中，磁场根据质量使带电粒子偏转与气体扩散装置或核反应堆、电磁分离装置相比，这个过程既不科学，也不具有工业效率。工厂将消耗更多的稀缺材料，需要更多的人力来操作，并且建造成本更高。尽管如此，这个过程还是得到了批准，因为它是基于成熟的技术，因此风险较小。此外，它还可以分期建设，并迅速达到工业生产能力。</p><p>马歇尔和尼科尔斯发现，电磁同位素分离过程需要5000短吨（4500吨）的铜，而铜的供应极为短缺。然而，银可以以11:10的比例被取代。1942年8月3日，尼科尔斯会见了财政部副部长丹尼尔·W·贝尔，并要求将6000吨白银从西点金库转移出去。”“年轻人，”贝尔告诉他，“你可能会想到以吨计的银，但财政部总是会想到以金衡盎司计的银！”最终，使用了14700短吨（13300吨；43000金衡盎司）。</p><p>1000金衡盎司（31_kg）的银条被铸造成圆柱形坯料，运到新泽西州贝威的菲尔普斯道奇，在那里它们被挤压成0.625英寸（15.9_m m）厚、3英寸（76_mm）宽和40英尺（12_m）长的条状。这些被威斯康星州密尔沃基的阿利斯·查默斯缠绕在磁线圈上。战后，所有的机器都被拆除和清洗，机器下面的地板也被撕碎和烧毁，以回收少量的银。最后，只损失了1/36万枚银币。最后一枚银币于1970年5月归还。</p><p>S-1委员会于1942年6月将电磁分离设备的设计和施工任务分配给斯通和韦伯斯特，该设备被称为Y-12。该设计要求五个第一阶段处理单元，称为alpha赛道，两个最后处理单元，称为beta赛道。1943年9月，格罗夫斯批准建造另外四条赛道，即阿尔法II。1943年2月开始施工。</p><p>当工厂在10月份按计划启动进行测试时，14吨重的真空罐由于磁铁的功率而逐渐脱离了校准状态，必须更加安全地固定。当线圈开始短路时，出现了一个更严重的问题。去年12月，格罗夫斯下令打开一块磁铁，发现里面有一把铁锈。格罗夫斯随后下令拆除赛车道，并将磁铁送回工厂进行清洁。在现场建立了一个酸洗厂来清洗管道和配件。第二个alpha i直到1944年1月底才开始运行，第一个beta和第一个和第三个alpha i在3月上线，第四个alpha i在4月开始运行。四条阿尔法II赛道于1944年7月至10月完工。</p><p>田纳西州伊士曼公司签订合同，按照通常的成本加固定费用的方式管理Y-12，每月收费22500美元，前七条赛道的每条赛道收费7500美元，另一条赛道收费4000美元。加州大学最初由伯克利的科学家运营，以消除缺陷并达到合理的运营率。然后他们被移交给受过培训的田纳西州伊士曼运营商，他们只受过高中教育。尼科尔斯比较了单位生产数据，并向劳伦斯指出，年轻的“乡巴佬”女孩运营商的表现优于他的博士学位。他们同意举行一场生产竞赛，劳伦斯输了，这对田纳西州的伊士曼工人和主管来说是一次鼓舞士气的比赛。这些女孩被“训练得像士兵一样，不能解释为什么”，而“科学家们无法避免耗时的调查表盘轻微波动的原因。”</p><p>Y-12最初将铀235含量浓缩到13%到15%之间，并于1944年3月将最初的几百克铀运往洛斯阿拉莫斯。5825份铀原料中只有1份作为最终产品出现。在这个过程中，其余的大部分都溅到了设备上。到1945年1月，经过艰苦的回收工作，铀235饲料的产量提高到了10%。二月份，阿尔法赛道开始从新的S-50热扩散装置接收到稍微丰富（1.4%）的饲料。下个月，它收到了来自K-25气体扩散装置的强化（5%）进料。到8月，K-25已经生产出足够浓缩的铀，直接进入β轨道。</p><h5 id="气体扩散"><a href="#气体扩散" class="headerlink" title="气体扩散"></a>气体扩散</h5><p>同位素分离最有前景也是最具挑战性的方法是气体扩散。格雷厄姆定律指出，气体的渗出率与其分子质量的平方根成反比，因此在含有半渗透膜和两种气体混合物的盒子中，较轻的分子比较重的分子更快地从容器中排出。离开容器的气体在较轻的分子中有所富集，而剩余的气体则有所耗尽。这个想法是这样的盒子可以形成一系列的泵和膜，每一个连续的阶段包含一个稍微丰富的混合物。在哥伦比亚大学，哈罗德·尤里、卡尔·P·科恩和约翰·R·邓宁等人对这一过程进行了研究。</p><p>1942年11月，军事政策委员会批准了600级气体扩散装置的建设。12月14日，M.W.凯洛格接受了建造该装置的提议，代号为K-25。谈判达成了成本加固定费用的合同，最终总额为250万美元。凯洛格的一位副总裁PercivalC.Keith领导了一个名为Kellex的独立公司实体，这个过程面临着巨大的技术困难。必须使用高腐蚀性气体六氟化铀，因为找不到替代品，电机和泵必须真空密封，并封闭在惰性气体中。最大的问题是屏障的设计，它必须是强大的，多孔的，耐六氟化铀腐蚀。最好的选择似乎是镍。爱德华·阿德勒和爱德华·诺里斯用电镀镍制造了一个网状屏障。哥伦比亚建造了一个六阶段的试验工厂来测试这一过程，但诺里斯-阿德勒原型被证明过于脆弱。竞争对手的屏障是由Kellex、贝尔电话实验室和胶木公司从镍粉中开发出来的。1944年1月，格罗夫斯下令将凯勒克斯屏障投入生产。</p><p>凯勒克斯设计的K-25需要一个4层0.5英里（0.80公里）长的U形结构，包含54个相邻的建筑物。这些被分成九个部分。其中有六个阶段的细胞。细胞可以独立运行，也可以在一个区段内连续运行。类似地，这些部分可以单独操作，也可以作为单个叶栅的一部分操作。1943年5月，一个勘测队在500英亩（2.0 km2）的土地上进行了标记，开始了施工。主楼的工作始于1943年10月，六级试验厂已于1944年4月17日投入运行。1945年，格罗夫斯取消了工厂的上层，指导凯勒克斯设计并建造了一个540级的侧进料装置，这个装置被称为K-27。Kellex于1945年9月11日将最后一台机组移交给运营承包商联合碳化物公司和碳公司。包括战后建成的K-27核电站在内，总成本为4.8亿美元。</p><p>该生产厂于1945年2月开始运行，随着一级接一级的投产，产品质量提高。到1945年4月，K-25的富集率达到1.1%，S-50热扩散装置的产量开始用作原料。下个月生产的一些产品浓缩度接近7%。8月，2892个阶段中的最后一个开始运行。K-25和K-27在战后早期实现了它们的全部潜力，当时它们超越了其他生产工厂，成为新一代工厂的原型。</p><h5 id="热扩散"><a href="#热扩散" class="headerlink" title="热扩散"></a>热扩散</h5><p>热扩散过程是建立在悉尼查普曼和大卫恩斯克理论的基础上的，该理论解释了当混合气体通过温度梯度时，较重的气体倾向于集中在冷端，较轻的气体倾向于集中在热端。由于热气体倾向于上升而冷气体倾向于下降，因此这可以用作同位素分离的一种手段。1938年，克劳斯·克鲁斯和格哈德·迪克尔在德国首次证明了这一过程[157]它是由美国海军科学家开发的，但并不是最初选定用于曼哈顿项目的浓缩技术之一。这主要是由于对其技术可行性的怀疑，但陆军和海军之间的军种间竞争也起了一定作用。</p><p>海军研究实验室在Philip Abelson的指导下继续进行这项研究，但直到1944年4月才与曼哈顿项目取得联系，当时负责洛斯阿拉莫斯军械研制的海军军官William S.Parsons上尉带来了Oppenheimer关于鼓励海军在热模拟试验方面取得进展的消息。浮肿。奥本海默写信给格罗夫斯，建议将热扩散装置的产量输入Y-12。Groves成立了一个由Warren K.Lewis、Eger Murpree和Richard Tolman组成的委员会来调查这个想法，他们估计一个耗资350万美元的热扩散工厂每周可以将50千克（110磅）的铀浓缩到接近0.9%的铀235。格罗夫斯于1944年6月24日批准了它的建设。</p><p>格罗夫斯与俄亥俄州克利夫兰的H.K.弗格森公司签订了建造热扩散装置的合同，该装置被命名为S-50。格罗夫斯的顾问，卡尔·科恩和来自标准石油公司的W.I.汤普森[160]估计需要6个月的时间来建造。格罗夫斯只给了弗格森四个。计划要求安装2142个48英尺高（15_m）的扩散柱，分布在21个机架中。每根柱子内有三根同心圆管。蒸汽从附近的K-25发电站获得，压力为1000磅/平方英寸（6900千帕），温度为545华氏度（285摄氏度），蒸汽向下流过最里面的1.25英寸（32华氏度）镍管，而水在155华氏度（68摄氏度）时向上流过最外面的铁管。同位素分离发生在镍和铜管之间的六氟化铀气体中。</p><p>工程于1944年7月9日开工，S-50于9月开始部分运行。弗格森通过一家名为费克里夫的子公司经营这家工厂。10月份，该工厂仅生产了10.5磅（4.8_kg）的0.852%铀235。泄漏限制了生产，并在接下来的几个月内被迫关闭，但在1945年6月，它生产了12730磅（5770千克）。[162]到1945年3月，所有21个生产机架都在运行。最初，S-50的产量被送入Y-12，但从1945年3月开始，所有三个浓缩过程都是串联运行的。S-50成为第一阶段，从0.71%增加到0.89%。这种材料被送入K-25装置的气体扩散过程中，产生一种浓缩到约23%的产品。这反过来又被喂入Y-12[163]中，使其增长到约89%，足以制造核武器。</p><h4 id="U-235总产量"><a href="#U-235总产量" class="headerlink" title="U-235总产量"></a>U-235总产量</h4><p>到1945年7月，大约50千克（110磅）浓缩到89%的铀235被送到洛斯阿拉莫斯。整个50千克，加上大约50%的浓缩，平均约85%的浓缩，被用于小男孩身上。</p><h3 id="钚"><a href="#钚" class="headerlink" title="钚"></a>钚</h3><p>曼哈顿项目的第二条开发线使用了裂变元素钚。尽管自然界中存在少量钚，但获得大量钚元素的最佳方法是在核反应堆中，在反应堆中天然铀受到中子的轰击。铀-238被转化成铀-239，铀-239迅速衰变，首先转化成钚-239，然后转化成钚-239。只有少量的铀-238会被转化，因此钚必须从剩余的铀、任何初始杂质和裂变产物中化学分离出来。</p><h4 id="X-10石墨反应器"><a href="#X-10石墨反应器" class="headerlink" title="X-10石墨反应器"></a>X-10石墨反应器</h4><p>1943年3月，杜邦开始在橡树岭112英亩（0.5_km2）的场地上建造钚工厂。作为汉福德大型生产设施的试验工厂，它包括空冷X-10石墨反应堆、化学分离工厂和支持设施。由于随后决定在汉福德建造水冷反应堆，只有化学分离厂作为真正的试点运行[166]，X-10石墨反应堆由一块巨大的石墨组成，每侧长24英尺（7.3_m），重约1500短吨（1400_t），周围环绕着7英尺（2.1_m）高密度混凝土。作为辐射防护罩。</p><p>最大的困难是用Mallinckrodt生产的铀弹头和金属氢化物。为了避免腐蚀和裂变产物逸出到冷却系统中，这些材料必须以某种方式涂上铝。格拉塞利化工公司试图开发一种热浸工艺，但没有成功。与此同时，美国铝业尝试罐装。开发了一种新的无熔剂焊接工艺，97%的罐通过了标准真空试验，但高温试验表明其失效率超过50%。尽管如此，生产始于1943年6月。冶金实验室最终在通用电气的帮助下开发了一种改进的焊接技术，该技术于1943年10月被纳入生产过程中。</p><p>在费米和康普顿的观察下，X-10石墨反应堆在1943年11月4日以30短吨（27_t）的铀进入临界状态。一周后，负荷增加到36短吨（33_t），发电量增加到500_kw，到本月底，第一批500_mg钚被制造出来。直到1945年1月，X-10一直作为一个生产厂运行，直到它被移交到研究活动中。</p><h4 id="汉福德反应堆"><a href="#汉福德反应堆" class="headerlink" title="汉福德反应堆"></a>汉福德反应堆</h4><p>尽管为橡树岭反应堆选择了空冷设计，以便于快速建造，但人们认识到，这对于更大的生产反应堆来说是不现实的。冶金实验室和杜邦公司的初步设计使用氦气进行冷却，然后他们确定水冷反应堆将更简单、更便宜和更快地建造。直到1943年10月4日，设计才开始可用；同时，马提亚斯集中精力通过安装住宿设施、改进修建铁路开关线，改善电力、水和电话线路。</p><p>和橡树岭一样，在装铀弹头时遇到了最大的困难，1944年3月在汉福德开始装铀弹头。它们被酸洗以去除污垢和杂质，浸入熔化的青铜、锡和铝硅合金中，用液压机密封，然后在氩气氛下用电弧焊接进行覆盖。最后，他们接受了一系列的测试，以检测孔或有缺陷的焊接。令人失望的是，大多数罐装蛞蝓最初未能通过测试，导致每天只有少数罐装蛞蝓的产量。但取得了稳定的进展，到1944年6月，产量增加到似乎有足够的罐装段塞可用于在1944年8月如期启动反应堆B的水平。</p><p>1943年10月10日，在计划的6个250兆瓦反应堆中，第一个反应堆B开始工作。反应堆复合体被赋予字母A到F，选择首先开发B、D和F场地，因为这将使反应堆之间的距离最大化。它们将是曼哈顿项目期间唯一建造的建筑。大约390短吨（350吨）钢、17400立方码（13300立方米）混凝土、50000块混凝土和71000块混凝土砖被用于建造120英尺（37米）高的建筑。</p><p>反应堆本身的建造始于1944年2月在康普顿、马提亚斯、杜邦的克劳福德·格林沃特、利昂娜·伍兹和费米的见证下，他们插入了第一个弹头，反应堆从1944年9月13日开始通电。在接下来的几天里，838根管子被装填，反应堆进入临界状态。9月27日午夜后不久，操作人员开始抽出控制棒开始生产。起初一切似乎都很好，但在3点左右，功率水平开始下降，到6点30分，反应堆已经完全关闭。对冷却水进行了调查，看是否有泄漏或污染。第二天，反应堆再次启动，结果又一次关闭了。</p><p>费米联系了Chien Shiung Wu，他确定问题的原因是氙-135的中子中毒，氙-135的半衰期为9.2小时。费米、伍兹、唐纳德J.休斯和约翰·阿奇博尔德·惠勒，然后计算出氙-135的核截面，结果是铀的3万倍[179]杜邦工程师乔治·格拉VES已经偏离了冶金实验室最初的设计，在这个设计中，反应器有1500根管子成一个圆排列，并且增加了504根管子来填充角落。科学家们最初认为这是浪费时间和金钱，但费米意识到，通过装载所有2004年的管子，反应堆可以达到所需的功率水平，并有效地生产钚。D反应堆于1944年12月17日启动，F反应堆于1945年2月25日启动。</p><h4 id="分离过程"><a href="#分离过程" class="headerlink" title="分离过程"></a>分离过程</h4><p>同时，化学家们考虑了钚的化学性质未知时如何从铀中分离的问题。1942年，在冶金实验室使用少量钚的情况下，查尔斯·M·库珀领导的一个小组开发了一种氟化镧工艺，用于分离铀和钚，该工艺被选为中试分离设备。Seaborg和Stanly G.Thomson随后开发了第二种分离工艺，即磷酸铋工艺，该工艺通过将钚在磷酸铋溶液中的+4和+6氧化状态之间切换来实现。在前一个国家，钚被沉淀；在后一个国家，钚保持在溶液中，其他产物被沉淀。</p><p>由于氟化镧具有腐蚀性，Greenewalt赞成磷酸铋工艺，并将其选用于汉福德分离厂。一旦X-10开始生产钚，就对中试分离厂进行了试验。第一批产品的加工效率为40%，但在接下来的几个月里，这一效率提高到了90%。</p><p>在汉福德，最优先考虑的是300区的设施。其中包括用于测试材料、制备铀以及组装和校准仪器的建筑。其中一座建筑物内装有装铀弹的罐装设备，另一座则装有一个小型试验反应堆。尽管分配给它的优先权很高，但由于300个区域设施的独特和复杂性质，以及战时劳动力和材料短缺，300个区域的工作落后于计划。</p><p>早期的计划要求在西部200个地区和东部200个地区建设两个分离工厂。这随后被减少到两个，即T和U工厂，在200西部和一个，B工厂，在200东部。每个分离工厂由四个建筑组成：一个工艺电池建筑或“峡谷”（称为221），一个浓缩建筑（224），一个净化建筑（231）和一个杂志店（213）。峡谷长800英尺（240米），宽65英尺（20米）。每个细胞由40个17.7×13×20英尺（5.4×4.0×6.1米）的细胞组成。</p><p>1944年1月开始了221-T和221-U的工作，前者在9月完成，后者在12月完成。这座221-B的建筑于1945年3月建成。由于所涉及的放射性水平很高，分离厂的所有工作都必须使用闭路电视进行远程控制，这在1943年是闻所未闻的。维修是借助于高架起重机和专门设计的工具进行的。224座建筑较小，因为它们处理的材料较少，放射性也较低。224-T和224-U建筑于1944年10月8日竣工，224-B建筑于1945年2月10日竣工。1944年4月8日开始建设时，最终用于231-W的净化方法仍然未知，但工厂已完工，并于年底选定了净化方法。1945年2月5日，马蒂亚斯向洛杉矶的洛斯阿拉莫斯快递公司交付了第一批80 g 95%纯硝酸钚。</p><h4 id="武器设计"><a href="#武器设计" class="headerlink" title="武器设计"></a>武器设计</h4><p>1943年，研制的目标是研制一种具有钚的炮式裂变武器，叫做“瘦人”。钚性质的初步研究是使用回旋加速器产生的钚-239进行的，该钚非常纯净，但只能以很小的数量产生。Los Alamos于1944年4月从克林顿X-10反应堆收到了第一个钚样品，几天之内，Emilio Segr发现了一个问题：反应堆产生的钚具有更高浓度的钚-240，导致了回旋加速器钚自发裂变率的5倍。Seaborg在3月19日正确预测了这一点。43.一些钚-239会吸收一个中子，变成钚-240。</p><p>这使得反应堆钚不适合用于枪式武器。钚-240会很快开始连锁反应，导致预稀释，释放出足够的能量，以使临界质量分散，同时反应的钚量最小（一次火）。有人建议用一把更快的枪，但被认为是不切实际的。由于钚-240比铀-235和铀-238更难从钚-239中分离，分离同位素的可能性被认为是不可能的。</p><p>在物理学家塞思·内德梅耶（seth neddermeyer）的指导下，一种被称为“内爆”的炸弹设计替代方法的研究早就开始了。内爆使用炸药将亚临界的可裂变材料球粉碎成更小更密集的形式。当裂变原子紧密结合在一起时，中子俘获率增加，质量变为临界质量。由于金属只需移动很短的距离，因此临界质量的组装时间比枪法要短得多。内德梅耶在1943年和1944年初对内爆的研究显示出了希望，但也表明从理论和工程的角度来看，这个问题将更加困难。在1943年9月，约翰·冯·诺依曼（John von Neumann）曾在穿甲弹中使用过聚能装药，他认为爆炸不仅能降低预裂和烧焦的危险，而且能更有效地利用可裂变材料。</p><p>到1944年7月，奥本海默得出结论，钚不能用于枪支设计，并选择了内爆。1944年8月，奥本海默对洛斯阿拉莫斯实验室进行了一次全面重组，重点关注内爆问题，从而加快了内爆设计的步伐，代号为“胖人”。在洛斯阿拉莫斯成立了两个新的小组，以开发内爆武器X（爆炸物）部门，由爆炸专家乔治·基斯蒂亚科夫斯基（George Kistiakowsky）领导。以及Robert Bacher领导的G（小玩意）部门。冯·诺依曼和T（理论上的）部门，最著名的是鲁道夫·皮尔斯，设计了一种新的设计，利用慢速和快速高能炸药的组合将爆炸集中在球形上。</p><p>以合适的形状和速度引爆的透镜的设计是缓慢的、困难的和令人沮丧的[199]在将组分B作为快速炸药和巴拉托尔作为慢速炸药之前，对各种炸药进行了测试[200]最终的设计类似于一个足球，有20个六角形和12个五角形透镜，每个重量为约80磅（36_kg）。要使爆炸恰到好处，就需要快速、可靠和安全的电雷管，其中每个透镜有两个可靠的电雷管。因此决定使用爆炸桥丝雷管，这是由路易斯·阿尔瓦雷斯领导的一个小组在洛斯阿拉莫斯开发的一项新发明。他们的制造合同被授予雷神公司。</p><p>为了研究会聚冲击波的行为，罗伯特·塞伯设计了RALA实验，该实验使用寿命短的放射性同位素镧-140，一种伽马辐射的有效来源。伽马射线源被放置在一个被爆炸透镜包围的金属球体的中心，爆炸透镜又被放置在电离室中。这使得我们可以拍摄一部关于内爆的X光片。这些透镜的设计主要是使用这一系列的测试。在他设计洛斯阿拉莫斯项目的历史中，大卫霍金斯写道：“拉拉成为影响最终炸弹设计的最重要的单一实验。”</p><p>炸药中有4.5英寸（110_mm）厚的铝推料器，它提供了从相对低密度炸药到下一层（3英寸（76_mm）厚的天然铀捣固器）的平稳过渡。它的主要工作是尽可能长时间地把临界质量保持在一起，但它也会将中子反射回堆芯。它的某些部分也可能裂变。为了防止外部中子的预电离，在捣固器上涂上一层薄薄的硼。一种钋-铍调制的中子引发剂，称为“海胆”，因为它的形状类似于海胆，被开发出来，以便在正确的时刻开始链式反应。这项工作与镭的化学和冶金有关。OActive Polonium由孟山都公司的Charles Allen Thomas指导，并被称为Dayton项目。测试要求每月高达500居里的Polonium，孟山都能够交付整个组件被包裹在一个硬铝炸弹外壳中，以防子弹和高射炮攻击。</p><p>冶金学家的最终任务是确定如何将钚抛入球体。当测量钚密度的尝试给出不一致的结果时，困难变得明显。起初，人们认为污染是原因，但很快就确定钚有多个同素异形体。室温下存在的脆性α相在高温下转变为塑性β相。然后注意力转移到更具延展性的δ相，通常存在于300°C到450°C的范围内。研究发现，与铝合金化时，在室温下这是稳定的，但铝在与α粒子碰撞时会发射中子，这将加剧预点火问题。然后冶金学家撞击钚-镓合金，钚-镓合金稳定了δ相，并可热压成所需的球形。由于钚很容易被腐蚀，球体上涂有镍。</p><p>这项工作证明是危险的。战争结束时，一半经验丰富的化学家和冶金学家在尿液中出现不可接受的高浓度元素时不得不停止使用钚。1945年1月，洛斯阿拉莫斯发生了一场小规模的火灾，这导致人们担心钚实验室的火灾可能污染整个城镇，格罗夫斯批准了这项禁令。建造了一个新的钚化学和冶金设施，该设施被称为“DP现场”。第一个钚坑（或堆芯）的半球于1945年7月2日生产和交付。7月23日，又有三个半球紧随其后，三天后交付。</p><h4 id="三位一体"><a href="#三位一体" class="headerlink" title="三位一体"></a>三位一体</h4><p>由于内爆式武器的复杂性，决定尽管浪费了裂变材料，但仍需进行初步试验。格罗夫斯批准了这项试验，但前提是要回收活性材料。因此，人们考虑了一次受控的试射，但奥本海默选择了一次全面的核试验，代号为“三位一体”。</p><p>1944年3月，哈佛大学物理教授肯尼思·班布里奇（KennethBainbridge）在基斯提亚科斯基（Kistiakowsky）的领导下完成了测试计划。班布里奇选择了阿拉莫戈多陆军机场附近的轰炸范围作为试验地点。班布里奇与塞缪尔·P·达瓦洛斯上尉合作建造三一基地营地及其设施，包括营房、仓库、车间、炸药库和一个小卖部。</p><p>格罗夫斯不喜欢向参议院委员会解释价值10亿美元的钚损失的前景，因此建造了一个代号为“jumbo”的圆柱形容器，以在失效时回收活性材料。它长25英尺（7.6_m），宽12英尺（3.7_m），由俄亥俄州巴伯顿市的Babcock&amp;Wilcox公司以214短吨（194_t）钢铁为原料制造，耗资巨大。把一辆特殊的火车车厢运到新墨西哥州波普的一个侧线，在最后25英里（40公里）的时候，它被两辆拖拉机牵引的拖车运到了试验地点，然而，对内爆方法的信心已经足够高了，钚的可用性已经足够了，奥本海默决定不使用它。相反，它被放置在距武器800码（730米）的钢塔上，作为爆炸威力的粗略测量。最后，Jumbo幸存了下来，尽管它的塔楼没有，这让人们相信Jumbo可能成功地控制了一次失败的爆炸。</p><p>1945年5月7日进行了一次试验前爆炸，以校准仪器。在距地面800码（730_m）的地方搭建了一个木制试验平台，堆放着100短吨（91_t）的TNT，TNT以汉福德辐照铀弹的形式加入核裂变产物，然后将其溶解并倒入炸药内的管道中。奥本海默和格罗夫斯的新副司令，托马斯·法雷尔准将观察到了这次爆炸。预测试产生的数据证明对三位一体测试至关重要。</p><p>在实际测试中，这个绰号为“小玩意”的武器被吊到一个100英尺（30米）高的钢塔的顶部，因为在那个高度的爆炸能更好地说明从轰炸机上落下时武器的行为。空气中的爆炸使直接作用于目标的能量最大化，产生的核辐射更少。7月13日，在诺里斯·布拉德伯里（Norris Bradbury）的监督下，该装置在附近的麦克唐纳牧场（McDonald Ranch House）组装，并在第二天摇摇欲坠地将塔吊起来。1945年7月16日05时30分，这个装置爆炸的能量相当于20千吨TNT，在250英尺（76米）宽的沙漠中留下了一个特立尼特火山口（放射性玻璃）。在100英里（160公里）外，人们感受到了冲击波，蘑菇云的高度达到了7.5英里（12.1公里）。这个消息传到德克萨斯州的埃尔帕索，所以格罗夫斯发表了一篇关于阿拉莫戈多油田弹药库爆炸的封面故事。</p><p>奥本海默后来回忆说，当他目睹爆炸时，他想到了印度教圣典中的一段诗篇《博伽达吉特（西，12）：</p><blockquote><p>如果一千个太阳的光芒一下子射入天空，那就如同强大的太阳的光辉…</p></blockquote><p>几年后，他解释说，当时他的脑海里也出现了另一首诗：</p><blockquote><p>我们知道世界将不一样。有几个人笑，有几个人哭。大多数人都保持沉默。我记得印度教经文《巴伽梵歌》中的台词；毗湿奴试图说服王子，他应该尽到自己的职责，为了给他留下深刻的印象，他采取了多种武装形式，并说，“现在我变成了死亡，世界的毁灭者。”我想我们都是这样或那样认为的。</p></blockquote><h3 id="人员"><a href="#人员" class="headerlink" title="人员"></a>人员</h3><p>1944年6月，曼哈顿项目雇佣了约12.9万名工人，其中8.45万名为建筑工人，40500名为工厂操作员，1800名为军事人员。随着建筑活动的减少，一年后劳动力减少到100000人，但军事人员增加到5600人。事实证明，在与其他重要的战时项目竞争的情况下，获得所需数量的工人，特别是高技能工人，是非常困难的。1943年，格罗夫斯从战争人力委员会获得了劳动力的一项特别临时优先权。1944年3月，战争生产委员会和战争人力委员会都给予了该项目最高的优先权。</p><p>托曼和科南特作为该项目的科学顾问，起草了一份候选科学家名单，并让已经参与该项目的科学家对他们进行评估。格罗夫斯随后给他们的大学或公司的负责人发了一封私人信件，要求他们被释放从事必要的战争工作。在威斯康星大学麦迪逊分校，斯坦尼斯劳·乌兰姆提前给他的一个学生琼·辛顿（Joan Hinton）做了一次考试，这样她就可以离开去从事战争工作了。几周后，乌兰姆收到了汉斯·贝斯的一封信，邀请他加入这个项目。</p><p>熟练人员的一个来源是陆军本身，特别是陆军专业培训计划。1943年，医学部成立了特种工程师支队（SED），授权力量为675人。被征召入伍的技术人员和熟练工人被分配到了教育部。另一个来源是妇女军。最初计划用于处理机密材料的文员任务，很快WACS也被用于技术和科学任务。1945年2月1日，所有分配给医疗部门的军事人员，包括所有的SED分遣队，都被分配给9812技术服务单位，但在洛斯阿拉莫斯，除S以外的其他军事人员艾德，包括WACS和宪兵，被分配到4817部队指挥部。</p><p>美国罗切斯特大学医学院放射科副教授斯塔福德·L·沃伦被任命为美国陆军医疗队上校，并被任命为医学科主任和格罗夫斯的医学顾问。沃伦最初的任务是为橡树岭、里奇兰和洛斯阿拉莫斯的医院提供工作人员。医学科负责医学研究，也负责医学健康和安全计划。这提出了一个巨大的挑战，因为工人们正在处理各种有毒化学品，在高压下使用危险液体和气体，在高压下工作，并进行涉及爆炸物的实验，更不用说放射性和处理裂变材料所带来的主要未知危险了。1945年12月，美国国家安全委员会授予曼哈顿项目安全杰出服务奖，以表彰其安全记录。从1943年1月到1945年6月，共有62人死亡，3879人致残，比私营企业的死亡率低62%。</p><h3 id="保密"><a href="#保密" class="headerlink" title="保密"></a>保密</h3><p>一篇1945年的生活文章估计，在广岛和长崎爆炸事件发生之前，“可能全国只有几十个人知道曼哈顿计划的全部意义，也许只有一千人甚至知道涉及原子的工作。”该杂志写道，另外10万多人受雇于该计划。“在黑暗中像鼹鼠一样工作”。警告说，泄露该项目的秘密将被判处10年监禁或10000美元（今天是113000美元）罚款，他们看到大量的原材料进入工厂，没有任何东西出来，并监测“拨号盘和开关，而厚混凝土墙后面发生神秘反应”，而不知道他们的工作目的。</p><p>橡树岭安保人员认为任何有7人以上的私人团体都是可疑的，居民们认为美国政府的特工在他们中间是秘密的，因此避免了多次邀请同一位客人。尽管该地区的原始居民可以埋葬在现有的公墓中，但据报道，每一个棺材都被打开以供检查。每个人，包括高级军事官员，在进出项目设施时，他们的汽车都被搜查过。一位橡树岭的工作人员说：“如果你有好奇心，政府的秘密特工会在两小时内把你召集到地毯上。通常情况下，那些被要求解释的人会被护送行李和行李到门口，并被命令继续前行。</p><p>尽管有人告诉他们，他们的工作将有助于结束战争，甚至可能结束所有未来的战争，但他们没有看到或理解他们经常单调乏味的工作的结果，甚至没有看到工厂工作的典型副作用，如烟囱冒出的烟，欧洲战争没有使用他们的工作就结束了，这在工人中造成了严重的士气问题，以及D引起了许多谣言的传播。战后一位经理说：</p><blockquote><p>好吧，不是工作很艰难……这让人困惑。你看，没有人知道橡树岭是怎么做的，甚至我也不知道，很多人认为他们在这里浪费时间。由我来向不满的工人解释，他们正在做一项非常重要的工作。当他们问我什么时，我不得不告诉他们这是个秘密。但我几乎要发疯了，想弄清楚到底发生了什么事。</p></blockquote><p>另一名工人告诉她，在洗衣房工作时，她每天都拿着“一种特殊的仪器”对着制服，倾听“咔嗒声”。战争结束后，她才知道自己一直在用盖革计数器检查辐射。为了提高工人的士气，橡树岭建立了一个广泛的校内体育联盟体系，包括10个棒球队、81个垒球队和26个足球队。</p><h4 id="审查制度"><a href="#审查制度" class="headerlink" title="审查制度"></a>审查制度</h4><p>对原子信息的自愿审查始于曼哈顿计划之前。1939年欧洲战争爆发后，美国科学家开始避免发表与军事有关的研究，1940年，科学期刊开始要求美国国家科学院发表文章。1940年9月7日星期六晚邮报上写了一篇关于原子裂变的文章，《纽约时报》的威廉·L·劳伦斯后来得知，1943年，政府官员要求全国的图书管理员撤回这一文章。然而，苏联人注意到了这一举动。1942年4月，核物理学家乔治弗罗罗夫在美国期刊上就核裂变问题发表文章给约瑟夫·斯大林写信，结果苏联建立了自己的原子弹项目。</p><p>曼哈顿项目在严密的安全措施下运行，以防其发现诱使轴心国，特别是德国，加速自己的核项目或对该项目进行秘密行动。相比之下，政府的审查办公室依靠新闻界遵守其公布的自愿行为准则，以及起初，杰特避免通知办公室。到1943年初，报纸开始根据公共记录发布田纳西州和华盛顿州大型建筑的报告，办公室开始与该项目讨论如何保密。6月，审查办公室要求报纸和广播公司避免讨论“原子粉碎、原子能、原子裂变、原子分裂或其任何等效物”。用于军事目的的镭或放射性物质、重水、高压放电设备、回旋加速器等。办公室还要求避免讨论“钋、铀、镱、铪、原锕、镭、铼、钍、氘”；只有铀是敏感的，但与其他元素一起列出以隐藏其重要性。</p><h4 id="苏联间谍"><a href="#苏联间谍" class="headerlink" title="苏联间谍"></a>苏联间谍</h4><p>蓄意破坏的可能性总是存在的，有时在设备出现故障时会被怀疑。尽管有一些问题被认为是由于粗心大意或不满的员工造成的，但没有确凿的证据表明轴心国煽动了破坏活动。然而，1945年3月10日，一个日本的火球击中了一条输电线，由此产生的电力激增导致汉福德的三个反应堆被暂时关闭[252]有如此多的反应堆。涉及到的人，安全是一项艰巨的任务。成立了一个专门的反情报部队支队来处理该项目的安全问题。到1943年，很明显苏联正试图渗透该项目。西方防卫司令部反情报部门的负责人鲍里斯·T·帕斯中校在伯克利的辐射实验室调查了苏联的间谍嫌疑。奥本海默告诉帕什，伯克利的哈肯·切瓦利埃（Haakon Chevalier）的一位教授曾与他接触，向苏联传递信息。</p><p>苏联最成功的间谍是克劳斯·富克斯，英国特派团成员，他在洛斯阿拉莫斯（Los Alamos）发挥了重要作用。1950年，他的间谍活动被揭露，破坏了美国与英国和加拿大的核合作。随后，发现了其他间谍活动，导致了哈里·戈尔德（Harry Gold）被捕。大卫·格林格拉斯，埃塞尔和朱利叶斯·罗森伯格[257]其他间谍，如乔治·科瓦尔和西奥多·霍尔，几十年来都不为人所知。间谍活动的价值很难量化，因为苏联原子弹项目的主要制约因素是铀矿石短缺。人们一致认为，间谍活动拯救了苏联一两年。</p><h3 id="外国情报"><a href="#外国情报" class="headerlink" title="外国情报"></a>外国情报</h3><p>除了研制原子弹，曼哈顿项目还负责收集德国核能项目的情报。据信，日本的核武器计划进展不远，因为日本几乎无法获得铀矿石，但最初人们担心德国非常接近于发展自己的武器。在曼哈顿项目的鼓动下，对德国占领的挪威的重水工厂进行了轰炸和破坏活动。由海军情报局、OSRD、曼哈顿项目和陆军情报局（G-2）共同组成一个小任务，调查敌人的科学发展。这并不局限于那些涉及核武器的人。陆军情报局长乔治·V·斯特朗少将任命鲍里斯·帕斯（Boris Pash）指挥该部队，代号为“Alsos”，希腊语中的意思是“grove”。</p><p>1944年6月攻占罗马大学物理实验室后，阿尔索斯派往意大利的任务询问了该实验室的工作人员。与此同时，帕什在霍勒斯·K·卡尔弗特上尉的指挥下，在伦敦组建了一个英国和美国阿尔索斯联合任务，参加“霸王”行动。德国人可能试图用放射性毒物破坏诺曼底登陆，这足以警告德怀特·D·艾森豪威尔将军，并派一名军官向他的参谋长沃尔特·比德尔·史密斯中尉汇报情况。在代号“薄荷行动”下，准备了特殊设备，并训练了化学战服务队。</p><p>随后，随着盟军的不断推进，帕斯和卡尔弗特采访了居里夫人，了解德国科学家的活动。他们就运往德国的铀问题与加丹加工会的官员进行了交谈。他们在比利时找到了68吨矿石，在法国找到了30吨。对德国囚犯的审讯表明，铀和钍正在柏林以北20英里的奥兰尼堡进行加工，所以格罗夫斯安排于1945年3月15日对其进行轰炸。</p><p>阿尔索斯的一个小组前往苏联占领区的斯塔斯福特，从WIFO手中取回了11吨矿石。1945年4月，帕斯在一支名为T-force的综合部队的指挥下，进行了“港口行动”，扫荡了德国核计划的核心城市赫钦根、比辛根和海格尔洛克的敌后防线。T-force占领了核实验室、文件、设备和物资，包括重水和1.5吨金属铀。</p><p>阿尔索斯的团队聚集了德国科学家，包括库尔特·迪布纳、奥托·哈恩、沃尔特·格拉赫、维尔纳·海森堡和卡尔·弗里德里希·冯·魏茨克尔，他们被带到英国，在那里他们被囚禁在戈德曼彻斯特的一个有窃听器的房子农场大厅。在日本引爆炸弹后，德国人被迫面对盟军做了他们做不到的事情。</p><h3 id="广岛市原子弹爆炸"><a href="#广岛市原子弹爆炸" class="headerlink" title="广岛市原子弹爆炸"></a>广岛市原子弹爆炸</h3><h4 id="制剂"><a href="#制剂" class="headerlink" title="制剂"></a>制剂</h4><p>从1943年11月开始，俄亥俄州赖特菲尔德的陆军空军装备司令部开始对B-29进行代号修改，以携带炸弹。1944年3月，格罗夫斯在加利福尼亚州的穆洛克陆军空军基地和位于加利福尼亚州因约克恩的海军军械试验站进行了试射，与美国陆军空军司令亨利·H·阿诺德将军会面，讨论了将成品炸弹交付给目标的问题。Ng这个17英尺（5.2米）长的瘦人或59英寸（150厘米）宽的胖人是英国的Avro Lancaster，但是使用英国飞机会造成维修困难。格罗夫斯希望美国波音B-29超级堡垒能够通过将其两个弹仓连接在一起，来进行改装，以携带“瘦人”。阿诺德承诺将不遗余力地修改B-29来完成这项工作，并指定奥利弗·P·埃科斯少将作为美国空军与曼哈顿项目的联络人。反过来，Echols任命Roscoe C.Wilson上校作为他的候补人选，Wilson成为曼哈顿项目与美国空军的主要联系人。罗斯福总统指示格罗夫斯，如果原子弹在与德国的战争结束之前就已经准备好了，他就应该准备好把它们扔到德国。</p><p>第509复合组于1944年12月17日在犹他州温多佛陆军空军基地启动，由保罗·W·蒂贝茨上校指挥。这个基地靠近内华达州边界，代号为“金曼”或“W-47”。培训在温多佛和古巴巴蒂斯塔陆军机场进行，在那里，393D轰炸中队在水面上进行远程飞行，并投掷假南瓜炸弹。作为曼哈顿项目的一部分，阿尔伯塔省海军上尉威廉·帕森斯（William S.Parsons）在洛斯阿拉莫斯组建了一个名为阿尔伯塔项目的特别小组，协助准备和运送炸弹。阿尔伯塔省的弗雷德里克·L·阿什沃斯（Frederick L.Ashworth）指挥官于1945年2月在关岛会见了舰队司令切斯特·W·尼米茨（Chester W.Nimitz），向他通报该项目。在那里时，阿什沃思选择了太平洋岛屿天宁岛上的北田作为509复合群的基地，并为该群及其建筑物保留了空间。1945年7月，法雷尔作为曼哈顿项目代表于7月30日抵达天宁岛。</p><p>小男孩的大部分部件于7月16日在旧金山号巡洋舰上离开了印第安纳波利斯，7月26日抵达天宁岛。四天后，这艘船被一艘日本潜艇击沉。其余的部件，包括六个铀235环，由509集团第320运兵车中队的三名C-54空中指挥人员交付。两个胖人集会乘坐特别改装的509复合B-29前往天宁岛。第一个钚芯装在一个特别的C-54中。曼哈特联合目标委员会建立了谭区和美国空军，以确定日本哪些城市应成为目标，并推荐了小仓、广岛、新泻和京都。在这一点上，战争部长亨利·L·斯蒂姆森进行了干预，宣布他将作出针对性的决定，他不会以京都的历史和宗教意义为由授权轰炸京都。因此，格罗夫斯要求阿诺德不仅把京都从核目标清单上删除，而且也从常规轰炸目标中删除。</p><h4 id="炸弹"><a href="#炸弹" class="headerlink" title="炸弹"></a>炸弹</h4><p>1945年5月，成立了临时委员会，为战时和战后使用核能提供咨询。委员会主席是斯蒂姆森，前美国参议员詹姆斯·F·伯恩斯（James F.Byrnes）即将出任国务卿，他是哈里·S·杜鲁门总统的私人代表；海军副国务卿拉尔夫·A·巴德（Ralph A.Bard）；助理国务卿威廉·L.克莱顿（William L.Clayton）；瓦内瓦·布什（Vannevar Bush）；卡尔·T.康普顿（Karl T.Compaton）；詹姆斯·B.康南（James B.Conant）；以及助理乔治·L.哈里森（George L.Harrison）。史汀生，纽约人寿保险公司总裁。临时委员会又成立了一个科学小组，由亚瑟·康普顿、费米、劳伦斯和奥本海默组成，负责就科学问题向委员会提供建议。科学小组在向临时委员会提交报告时，不仅就原子弹可能产生的物理效应，而且就其可能产生的军事和政治影响发表了意见。</p><p>在德国的波茨坦会议上，杜鲁门得知三位一体测试已经成功。他告诉苏联领导人斯大林，美国拥有一种新的超级武器，但没有透露任何细节。这是第一次就炸弹问题与苏联进行官方沟通，但斯大林已经从间谍那里了解到了这一点。在日本拒绝《波茨坦宣言》后，在得到对日本使用核弹的授权后，没有其他选择。</p><p>1945年8月6日，由蒂贝茨驾驶的393D轰炸中队的一架波音B-29超级堡垒（艾诺拉·盖伊）从北野起飞，小男孩在轰炸舱里。广岛是第二大军和第五师的司令部，也是一个登船港，是这次行动的主要目标，以小仓和长崎为替代品。在法雷尔的允许下，负责这项任务的武器制造商帕森斯完成了空中的炸弹组装，以将起飞时的风险降到最低。炸弹在1750英尺（530_m）的高度引爆，随后估计爆炸面积约为4.7平方英里（12_km2）被摧毁。日本官员认定，广岛69%的建筑被毁，另有6-7%的建筑被毁。约7万至8万人，其中2万人是日本战斗人员，2万人是韩国奴隶劳工，占广岛人口的30%左右，立即死亡，另有7万人受伤。</p><p>1945年8月9日上午，第二架B-29（Bockscar）由393D轰炸中队指挥官查尔斯·W·斯威尼少校驾驶，载着胖人起飞。这一次，阿什沃思是武器制造者，而库拉是主要目标。斯威尼带着已经装备好的武器起飞，但电气安全插头仍在使用中。当他们到达库拉时，他们发现云层遮蔽了城市，禁止了命令要求的视觉攻击。在城市上空跑了三次之后，随着燃料的减少，他们朝着第二个目标长崎前进。阿什沃思决定，如果目标被遮蔽，将使用雷达进近，但长崎上空云层的最后一分钟中断允许按命令进行目视进近。这个胖子被扔到了城市的工业山谷，在南部的三菱钢铁和军火厂和北部的三菱浦崎军火厂之间。爆炸产生的爆炸当量相当于21千吨TNT，与三位一体爆炸大致相同，但仅限于Urakami山谷，城市的一个主要部分受到中间山丘的保护，导致约44%的城市遭到破坏。轰炸还严重破坏了该市的工业生产，造成23200-28200名日本工业工人和150名日本士兵死亡。总体而言，估计有35000-40000人死亡，60000人受伤。</p><p>格罗夫斯预计将在8月19日再有一枚原子弹投入使用，9月再有三枚，10月再有三枚。另外两个胖人集会已经准备就绪，并计划在8月11日和14日离开科特兰机场前往天宁岛。在洛斯阿拉莫斯，技术人员连续工作24小时，铸造另一个钚芯。阿尔托。嗯，铸造，它仍然需要被压制和涂层，这将需要到8月16日。因此，它可能已经准备好8月19日使用。8月10日，杜鲁门秘密要求在没有他的明确授权的情况下，不要再向日本投放更多的原子弹。格罗夫斯于8月13日自行暂停了第三核的运输。</p><p>8月11日，格罗夫斯给沃伦打电话，命令他组织一个调查小组，报告广岛和长崎的核损伤和放射性。9月8日，一个装备了便携式盖革计数器的派对抵达广岛，由法雷尔和沃伦率领，日本海军少将铃木正茂（Masao Tsuzuki）担任翻译。他们一直呆在广岛直到9月14日，然后在9月19日到10月8日对长崎进行了调查。这项和其他前往日本的科学任务将提供宝贵的科学和历史数据。</p><p>广岛和长崎爆炸案的必要性成为历史学家们争论的话题。一些人质疑“原子外交”是否不可能达到同样的目标，并质疑轰炸或苏联对日本宣战是否具有决定性。弗兰克报告是推动示威的最显著的努力，但被临时委员会的科学小组拒绝了。斯齐尔第请愿书，博士1945年7月，由曼哈顿项目的数十名科学家签署的AFTED，是对哈里·S·杜鲁门总统关于他使用此类武器的责任的一次迟到的警告。</p><h3 id="战后"><a href="#战后" class="headerlink" title="战后"></a>战后</h3><p>看到他们不了解的工作，制造广岛和长崎炸弹的工人和世界上其他地方一样惊讶于曼哈顿项目的工人；橡树岭的报纸宣布广岛炸弹今天卖了1美元（11美元）。尽管炸弹的存在是公开的，但保密仍在继续，许多工人仍然不知道1946年，有人说：“我不知道我在干什么，除了寻找一个——和一个——和一个——并排——之外。我什么都不知道，也没什么好说的。许多居民继续避免在日常谈话中讨论“这些东西”，尽管这是他们所在城镇存在的原因。</p><p>在对爆炸事件的预期中，格罗夫斯让亨利·德沃尔夫·斯米思为公众消费准备了一段历史。1945年8月12日，以“Smyth报告”著称的用于军事目的的原子能向公众发布了。格罗夫斯和尼科尔斯向主要承包商颁发了陆军-海军“E”奖，这些承包商迄今为止的参与一直是秘密的。布什和奥本海默等主要承包商和科学家获得了20多项总统奖章。军事人员获得了荣誉勋章，其中包括女陆军部队支队指挥官，阿琳·G·谢登海姆上尉。</p><p>在汉福德，钚生产量下降，因为反应堆B、D和F已经耗尽，受到裂变产物和石墨慢化剂（称为维格纳效应）膨胀的毒害。膨胀损坏了铀被辐射产生钚的充电管，使它们无法使用。为了维持URCHIN引发剂的钋供应，减少了生产，关闭了最老的装置B堆，以便将来至少有一个反应堆可用。研究继续进行，杜邦公司和冶金实验室开发了氧化还原溶剂提取工艺，作为磷酸铋工艺的替代钚提取技术，该工艺使未使用过的铀处于不易回收的状态。</p><p>炸弹工程由Z部门实施，该部门的负责人是来自洛斯阿拉莫斯的杰罗尔德·R·扎查里亚博士。Z师最初位于温多佛油田，但于1945年9月迁至新墨西哥州的Oxnard油田，以靠近洛斯阿拉莫斯。这标志着桑迪亚基地的开始。附近的科特兰机场被用作B-29基地，用于飞机兼容性和坠落试验。到10月，文多佛的所有工作人员和设施都转移到了桑迪亚。预备役军官复员后，他们被大约50名精心挑选的正规军官所取代。</p><p>尼科尔斯建议关闭S-50和Y-12的阿尔法轨道。这是在9月完成的，虽然表现比以往任何时候都好[311]阿尔法轨道不能与K-25和新的K-27竞争，后者已于1946年1月开始运行。12月，Y-12工厂关闭，从而将田纳西州伊斯曼公司的工资从8600削减到1500，每月节省2.6亿美元。</p><p>没有什么地方比在洛斯阿拉莫斯更像是一个问题，那里人才大量流失。还有很多事情要做。广岛和长崎使用的炸弹就像实验室的碎片；要使它们更简单、更安全、更可靠，就需要进行工作。由于反应堆的问题，钚供应不足，因此需要发展铀的内爆方法来代替废弃的火炮方法，并需要复合铀钚芯。然而，对实验室未来的不确定性使得很难吸引人们留下来。奥本海默回到加利福尼亚大学工作，格罗夫斯任命诺里斯·布拉德伯里为临时替代者。事实上，布拉德伯利将在未来25年内继续担任这一职务。格罗夫斯试图解决由于缺乏便利设施而引起的不满，该建设项目包括改善供水系统、300间房屋和娱乐设施。</p><p>1946年7月，在比基尼环礁进行了两次胖子式爆炸，作为“十字路口行动”的一部分，以调查核武器对军舰的影响。更壮观的贝克于1946年7月25日在水下引爆。</p><p>在广岛和长崎发生爆炸事件后，许多曼哈顿项目物理学家创建了《原子科学家公报》，这是科学家们在面对新武器的破坏性和预期时，迫切需要立即开展有关原子武器的教育项目的紧急行动。在核军备竞赛上，包括玻尔、布什和科南特在内的几个项目成员表示，有必要就核研究和原子武器的国际管制达成协议。巴鲁克计划于1946年6月在新成立的联合国原子能委员会（UNAEC）的一次演讲中公布，该计划提议设立一个国际原子能开发机构，但并未获得通过。</p><p>在国内关于核计划永久管理的辩论之后，美国原子能委员会（AEC）由1946年的《原子能法》成立，以接管曼哈顿项目的职能和资产。它建立了对原子发展的民间控制，并将原子武器的开发、生产和控制与军队分开。军事方面由武装部队特种武器项目（AFSWP）接管。尽管曼哈顿项目于1946年12月31日停止存在，但直到1947年8月15日曼哈顿区才被废除。</p><h3 id="成本"><a href="#成本" class="headerlink" title="成本"></a>成本</h3><p>1945年10月1日之前的项目支出为18.45亿美元，相当于不到9天的战时支出，1947年1月1日由原子能委员会控制时为21.91亿美元。分配总额为24亿美元。90%以上的成本用于建造核电站和生产可裂变材料，而不到10%的成本用于武器的开发和生产。</p><p>到1945年底，共生产了四种武器（三位一体小玩意、小男孩、胖男人和一枚未使用的胖男人炸弹），以1945年的美元计算，每枚炸弹的平均成本约为5亿美元。相比之下，到1945年底，该项目的总成本约占美国小武器（不包括弹药）生产总成本的90%，占同期美国坦克总成本的34%。总的来说，它是美国在第二次世界大战中承担的第二昂贵武器项目，仅次于设计研究所。</p><h3 id="遗产"><a href="#遗产" class="headerlink" title="遗产"></a>遗产</h3><p>发展核武器的政治文化影响深远。《纽约时报》的威廉·劳伦斯（WilliamLaurence）是第一个使用“原子时代”一词的人，他于1945年春季成为曼哈顿项目的官方通讯员。1943年和1944年，他试图说服审查办公室允许撰写有关铀爆炸可能性的文章，但没有成功，政府官员认为他有权报道战争的最大秘密。劳伦斯目睹了三位一体测试和长崎爆炸事件，并为他们编写了官方新闻稿。他接着写了一系列赞美新武器优点的文章。他在爆炸前后的报告有助于提高公众对核技术潜力的认识，并推动其在美国和苏联的发展。</p><p>战时曼哈顿项目以国家实验室网络的形式留下了遗产：劳伦斯伯克利国家实验室、洛斯阿拉莫斯国家实验室、橡树岭国家实验室、阿贡国家实验室和艾姆斯实验室。战后不久，格罗夫斯又建立了两个实验室，纽约厄普顿的布鲁克海文国家实验室和新墨西哥州阿尔伯克基的桑迪亚国家实验室。格罗夫斯在1946-1947财政年度为他们分配了7200万美元用于研究活动。他们将成为橡树岭国家实验室主任阿尔文·温伯格（Alvin Weinberg）称之为“大科学”的大规模研究的先锋。</p><p>长期以来，海军研究实验室一直对利用核能推进军舰的前景感兴趣，并试图创建自己的核项目。1946年5月，尼米兹，现在的海军作战部长，决定海军应该改为与曼哈顿项目合作。一组海军军官被派往橡树岭，其中最年长的是海曼·G·里科弗上尉，他成为那里的助理主任。他们全神贯注于核能研究，为核动力海军奠定了基础。1946年9月，一支类似的空军人员来到橡树岭，目的是研制核飞机。他们的飞机推进核能（NEPA）项目遇到了巨大的技术难题。最终被取消了。</p><p>新反应堆以前所未有的数量制造放射性同位素的能力在战后的几年里引发了核医学的革命。从1946年中期开始，橡树岭开始向医院和大学分发放射性同位素。大部分订单是用于诊断和治疗癌症的碘-131和磷-32。除了医学，同位素也被用于生物、工业和农业研究。</p><p>在将控制权移交给原子能委员会后，格罗夫斯向曼哈顿项目的工作人员告别：</p><blockquote><p>五年前，原子能的概念只是一个梦。你已经实现了这个梦想。你抓住了最模糊的想法，并把它们转化为现实。你建造的城市以前没有人知道。你已经建造了一个规模巨大的工业工厂，到目前为止还被认为是不可能的。你制造了结束战争的武器，从而拯救了无数美国人的生命。关于和平时期的申请，你们已经拉开了新世界前景的帷幕。</p></blockquote><p>2014年，美国国会通过了一项法律，规定设立一个专门用于曼哈顿项目历史的国家公园。曼哈顿项目国家历史公园于2015年11月10日成立。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;曼哈顿项目是第二次世界大战期间的一项研究和开发项目，生产了第一批核武器。它是美国在联合国和加拿大的支持下开始的。从1942年到1946年，该项目由美国陆军工程兵团的莱斯利·格罗夫斯少将领导。核物理学家罗伯特·奥本海默（RobertOppenheimer）是洛斯阿拉莫斯实验室
      
    
    </summary>
    
    
      <category term="工程" scheme="http://wangchengfei.info/tags/%E5%B7%A5%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>深度学习</title>
    <link href="http://wangchengfei.info/2019/05/12/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    <id>http://wangchengfei.info/2019/05/12/深度学习/</id>
    <published>2019-05-12T05:45:34.000Z</published>
    <updated>2019-05-14T04:13:45.833Z</updated>
    
    <content type="html"><![CDATA[<p>深层学习（也称为深层结构学习或分层学习）是基于人工神经网络的一系列机器学习方法的一部分。学习可以有监督、半监督或无监督。</p><p>深度学习体系结构，如深度神经网络、深度信念网络、循环神经网络和卷积神经网络，已应用于计算机视觉、语音识别、自然语言处理、音频识别、社会网络过滤、机器翻译、生物信息学、药物设计、医学信息管理等领域。年龄分析、材料检查和棋盘游戏程序，它们产生的结果与人类专家相当，在某些情况下优于人类专家。</p><p>神经网络受到生物系统中信息处理和分布式通信节点的启发。神经网络与生物大脑有不同之处。具体来说，神经网络往往是静态的和象征性的，而大多数生物的生物大脑是动态的（可塑的）和模拟的。</p><h3 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h3><p>深度学习是一类机器学习算法，它使用多层从原始输入中逐步提取更高层次的特征。例如，在图像处理中，较低的层可以识别边缘，而较高的层可以识别人类有意义的项目，如数字/字母或脸。</p><h3 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h3><p>大多数现代的深度学习模型都是基于人工神经网络，特别是卷积神经网络（CNN），尽管它们也可以包括命题公式或深层生成模型中分层组织的潜在变量，如深层信仰网络中的节点和深层玻尔兹曼机器。</p><p>在深度学习中，每个层次都学习将其输入数据转换为稍微抽象和复合的表示形式。在图像识别应用程序中，原始输入可以是像素矩阵；第一表示层可以提取像素并编码边缘；第二层可以组成和编码边缘的排列；第三层可以编码鼻子和眼睛；第四层可以识别图像包含面。重要的是，一个深入的学习过程可以学习哪些特性可以以最佳方式放置在哪个级别上。（当然，这并不能完全消除手动调优的需要；例如，不同数量的层和层大小可以提供不同程度的抽象。）[1][12]</p><p>“深度学习”中的“深度”是指数据转换所通过的层数。更准确地说，深度学习系统有一个实质性的分配路径（CAP）深度。cap是从输入到输出的转换链。caps描述了输入和输出之间潜在的因果关系。对于前馈神经网络，caps的深度是网络的深度，是隐藏层的数量加上一个（因为输出层也是参数化的）。对于一个信号可能多次通过一个层传播的循环神经网络，cap可能是无限的。没有一个普遍同意的深度阈值将浅学习与深学习区分开来，但大多数研究者同意深学习涉及cap&gt;2。深度2的上限已经被证明是一个通用的近似值，在这个意义上，它可以模拟任何函数。更多的层不会增加网络的函数近似值能力。深度模型（cap&gt;2）能够提取比浅模型更好的特性，因此，额外的层有助于学习特性。</p><p>对于有监督的学习任务，深度学习方法通过将数据转换为类似于主要组件的紧凑的中间表示，从而避免了特征工程，并派生出消除表示中冗余的分层结构。</p><p>深度学习算法可以应用于无监督的学习任务。这是一个重要的好处，因为未标记的数据比标记的数据更丰富。可以无监督地训练的深层结构的例子有神经历史压缩器（neural history compressors）和深层信仰网络（deep belief network-DBN）。</p><h3 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h3><p>深部神经网络一般用普遍逼近定理或概率推理来解释。</p><p>经典的通用近似定理涉及具有有限尺寸的单个隐藏层的前馈神经网络近似连续函数的能力。1989年，George Cybenko发布了第一个证明sigmoid激活函数的证据，并被概括为前馈多层结构。1991年，库尔特·霍尼克。</p><p>深神经网络的普遍逼近定理涉及有界宽度的网络的容量，但允许深度增长。Lu等人证明，如果具有relu激活的深层神经网络的宽度严格大于输入维数，则该网络可以近似任何Lebesgue可积函数；如果宽度小于或等于输入维数，则深层神经网络不是一个通用的近似器。</p><p>概率解释源于机器学习领域。它的特点是推理以及训练和测试的优化概念，分别与拟合和泛化有关。更具体地说，概率解释将激活非线性视为一个累积分布函数。概率解释导致在神经网络中引入辍学作为正则化器。概率解释由Hopfield、Widrow、Narendra和Po等研究人员引入。在诸如Bisshop的调查中广受欢迎。</p><h3 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h3><p>Deep Learning一词由Rina Dechter于1986年引入机器学习社区，并由Igor Aizenberg及其同事于2000年在布尔阈值神经元的背景下引入人工神经网络。</p><p>Alexey Ivakhnenko和Lapa于1965年发布了第一个用于监督、深度、前馈、多层感知器的通用工作学习算法。1971年的一篇论文描述了一个由数据处理算法的分组方法训练的8层深度网络。</p><p>其他的深度学习工作体系结构，特别是那些为计算机视觉而构建的体系结构，从1980年福岛大学（Kunihiko Fukushima）引进的Neocongent开始，1989年，Yann Lecun等人将1970年以来作为自动微分逆模式的标准反向传播算法。应用到一个深层神经网络中，以识别邮件上手写的邮政编码。算法运行时，训练需要3天时间。</p><p>到1991年，这种系统被用于识别孤立的二维手写数字，而识别三维物体则是通过将二维图像与手工制作的三维物体模型相匹配来完成的。人脑不使用单一的三维物体模型，1992年他们发表了一种在杂乱的场景中进行三维物体识别的方法。因为它直接使用自然图像，克赛普龙开始了对自然3D世界的通用视觉学习。克西普是一个层叠的层，类似于新认知。但是，尽管Neocoginatron需要一个人类程序员手工合并特性，但是Creceptron在没有监督的情况下，在每一层中都学习了开放的特性数量，其中每个特性都由卷积内核表示。克赛普龙通过网络进行反向分析，从杂乱的场景中分割出每个学习到的对象。Max池，现在通常被深神经网络（如ImageNet测试）采用，首先被用于Creceptron，通过级联将位置分辨率降低（2x2）到1，以获得更好的泛化。</p><p>1994年，Andr_de Carvalho与Mike Fairhurst和David Bisset共同发表了由三层自组织特征提取神经网络模块（Soft）和多层分类神经网络模块（GSN）组成的多层布尔神经网络（也称为失重神经网络）的实验结果。他们是独立训练的。特征提取模块中的每一层都提取了与前一层相关的日益复杂的特征。</p><p>1995年，Brendan Frey证明，使用与Peter Dayan和Hinton共同开发的Wake-Sleep算法，可以训练（超过两天）包含六个完全连接层和数百个隐藏单元的网络。许多因素导致了速度慢，包括SEPP在1991年分析的消失梯度问题。</p><p>在20世纪90年代和2000年代，由于人工神经网络（ANN）的计算成本以及对大脑如何连接其生物网络的缺乏了解，使用特定于任务的手工制作功能（如Gabor滤波器和支持向量机）的简单模型是一个流行的选择。</p><p>对人工神经网络的浅层和深层学习（如重复网络）进行了多年的探索。这些方法从来没有超过基于语音生成模型的非均匀内部手工高斯混合模型/隐马尔可夫模型（GMM-HMM）技术。分析了关键难点，包括神经预测模型中丁氏梯度递减和弱时间相关结构，另外的困难是缺乏训练数据和有限的计算能力。</p><p>大多数语音识别研究人员不再使用神经网络来进行生成建模。上世纪90年代末，斯坦福国际研究所的一个例外是，在美国国家安全局（NSA）和国防高级研究计划局（DARPA）的资助下，斯坦福国际研究了语音和说话人识别中的深层神经网络。Heck的说话人识别团队在1998年国家标准与技术研究所的说话人识别评估中首次在语音处理方面取得了显著的成功尽管SRI在说话人识别方面取得了深层神经网络的成功，但他们在证明类似的成功方面没有取得成功。在语音识别中。20世纪90年代末，在“原始”谱图或线性滤波器组特征的深层自动编码器体系结构中，首次成功探索了将“原始”特征提升为手工优化的原理，显示了其优于包含谱图固定转换阶段的Mel倒谱特征。语音的原始特征，波形，后来产生了很好的结果。</p><p>语音识别的许多方面都被一种称为长短期记忆（lstm）的深度学习方法所取代，这是Hochreiter和Schmidhuber于1997年出版的一种复发性神经网络lstm rnns避免了消失梯度问题，可以学习“非常深的学习”任务。需要对发生在数千个磁盘上的事件进行记忆。重复之前的时间步骤，这对演讲很重要。2003年，LSTM开始在某些任务上与传统语音识别器竞争。后来，它与连接主义时间分类（CTC）结合起来，在LSTM RNN的堆栈中。2015年，据报道，谷歌的语音识别通过经过CTC培训的LSTM经历了49%的性能跃升，从而使其变得可用。通过谷歌语音搜索。</p><p>深度学习是各个学科最先进的系统的一部分，特别是计算机视觉和自动语音识别（ASR）。对常用的评价集如timit（asr）和mnist（image classification）以及一系列大词汇语音识别任务的评价结果有了稳步的提高。卷积神经网络（cnns）被lstm的ctc取代为asr，但在计算机视觉方面更为成功。</p><p>据Yann Lecun称，深度学习对大规模语音识别的工业应用始于20世纪初，当时CNN已经处理了大约10%到20%的美国书面检查。</p><p>2009年的NIPS语音识别深度学习的动机是由于语音的深层生成模型的局限性，以及考虑到更强大的硬件和大规模数据集，深层神经网络（DNN）可能变得实用的可能性。人们认为，使用深度信念网络（DBN）生成模型的预训练DNN将克服神经网络的主要困难。然而，人们发现，当使用具有大的、上下文相关的输出层的DNN时，用大量训练数据代替预训练直接进行反向传播会产生错误。ates大大低于当时最先进的高斯混合模型（gmm）/隐马尔可夫模型（hmm），也低于更先进的基于模型的系统。这两种系统产生的识别错误的性质有着显著的不同，为如何集成深度学习提供了技术见解。通过2009-2010年前后的分析，对比了GMM（和其他生成语音模型）与DNN模型，刺激了早期工业对语音识别深度学习的投资，最终导致普及。在那个行业中有着重要的和占主导地位的用途。这项分析是在区分性dnn和生成性模型之间进行的（误差率小于1.5%）。</p><p>2010年，研究人员通过采用决策树构造的基于上下文相关的HMM状态的DNN的大输出层，将深度学习从羞怯扩展到了大词汇语音识别。</p><p>硬件的进步使人们重新产生了兴趣。2009年，英伟达参与了被称为“深度学习的大爆炸”，因为深度学习神经网络接受了英伟达图形处理单元（GPU）的培训。在那里，Andrew Ng确定GPU可以将深度学习系统的速度提高大约100倍。GPU非常适合于机器学习中涉及的矩阵/向量数学。GPU加速训练算法的数量级，减少了从周到几天的运行时间。专用硬件。算法优化可用于高效处理。</p><h4 id="深度学习革命"><a href="#深度学习革命" class="headerlink" title="深度学习革命"></a>深度学习革命</h4><p>2012年，Dahl领导的团队利用多任务深度神经网络预测一种药物的生物分子目标，赢得了“默克分子活性挑战赛”。2014年，Hochreiter的团队利用深度学习检测营养素、家用产品和药物中环境化学品的靶向和毒性效应，并获得了“TOX21数据ch”。美国国家卫生研究院、美国食品和药物管理局和国家癌症研究所的阿伦奇。</p><p>从2011年到2012年，在图像或物体识别方面感受到了显著的额外影响。虽然由反向传播培训的CNN已经存在几十年了，多年来，包括CNN在内的NNS的GPU实现，但是需要以Ciresan和同事的方式在GPU上快速实现CNN，从而在计算机视觉方面取得进展。视觉模式识别比赛中的表现。2011年，它还赢得了ICDAR中文笔迹比赛，2012年5月，它赢得了ISBI图像分割比赛。直到2011年，CNN在计算机视觉会议上没有发挥重要作用，但是2012年6月，Ciresan等人的一篇论文。在领先的cvpr展示了在GPU上最大限度地汇集CNN可以显著提高许多视觉基准记录。2012年10月，Krizhevsky等人的一个类似系统以显著优势战胜了浅机器学习方法，赢得了大规模的Imagenet竞争。2012年11月，Ciresan等人的系统还赢得了用于癌症检测的大型医学图像分析的ICPR竞赛，并在接下来的一年里，也赢得了关于同一主题的MICCAI大挑战。在2013年和2014年，使用深度学习的ImageNet任务的错误率进一步降低。</p><p>一些研究人员评估说，2012年10月的Imagenet的胜利锚定了“深度学习革命”的开始，这场革命已经改变了人工智能产业。</p><p>2019年3月，Yoshua Bengio、Geoffrey Hinton和Yann Lecun因概念和工程突破而获得图灵奖，这些突破使深层神经网络成为计算的重要组成部分。</p><h3 id="神经网络"><a href="#神经网络" class="headerlink" title="神经网络"></a>神经网络</h3><h4 id="人工神经网络"><a href="#人工神经网络" class="headerlink" title="人工神经网络"></a>人工神经网络</h4><p>人工神经网络（anns）或连接主义系统是受构成动物大脑的生物神经网络启发而设计的计算系统。此类系统通过考虑示例学习（逐步提高其能力），通常不需要特定于任务的编程。例如，在图像识别中，他们可以通过分析手动标记为“cat”或“no cat”的示例图像，并使用分析结果来识别其他图像中的猫，从而学会识别包含猫的图像。他们发现在使用基于规则编程的传统计算机算法难以表达的应用程序中使用最多。</p><p>人工神经网络是基于一组被称为人工神经元的连接单元（类似于生物大脑中的生物神经元）。神经元之间的每一个连接（突触）都能将一个信号传递给另一个神经元。接收（突触后）神经元可以处理信号，然后向与其相连的下游神经元发送信号。神经元可能有状态，通常用实数表示，通常在0到1之间。神经元和突触的重量也会随着学习的进行而变化，这会增加或减少它向下游发送的信号的强度。</p><p>通常，神经元是分层组织的。不同的层可以对其输入执行不同类型的转换。信号从第一层（输入）传输到最后一层（输出），可能在多次遍历层之后。</p><p>神经网络方法的最初目标是以与人脑相同的方式解决问题。随着时间的推移，注意力集中在匹配特定的心理能力上，导致偏离生物学，如反向传播，或反向传递信息，并调整网络以反映这些信息。</p><p>神经网络已被用于各种任务，包括计算机视觉、语音识别、机器翻译、社交网络过滤、游戏板和视频游戏以及医学诊断。</p><p>截至2017年，神经网络通常有几千到几百万个单元和数百万个连接。尽管这个数字比人脑中的神经元数量少几个数量级，但这些网络可以在人类以外的水平上执行许多任务（例如，识别人脸，玩“go”）。</p><h4 id="深层神经网络"><a href="#深层神经网络" class="headerlink" title="深层神经网络"></a>深层神经网络</h4><p>深度神经网络（dnn）是一种在输入和输出层之间有多层的人工神经网络（ann）。无论是线性关系还是非线性关系，dnn都能找到正确的数学操作，将输入转换为输出。网络通过计算每个输出概率的层移动。例如，训练识别狗品种的dnn将遍历给定的图像，并计算图像中的狗是某个品种的概率。用户可以查看结果并选择网络应显示的概率（高于某个阈值等），然后返回建议的标签。每一个这样的数学操作都被视为一个层，而复杂的dnn有许多层，因此被称为“深层”网络。最终，网络将被训练成将图像分解为特征，识别所有样本中存在的趋势，并根据新图像的相似性对其进行分类，而无需人工输入。</p><p>DNN可以模拟复杂的非线性关系。DNN体系结构生成复合模型，其中对象表示为基本体的分层组合。额外的层允许来自较低层的功能组合，可能使用比同样执行的浅网络更少的单元来建模复杂数据。</p><p>DNN通常是前馈网络，其中数据从输入层流到输出层，而不返回。首先，dnn创建一个虚拟神经元的映射，并为它们之间的连接分配随机数值或“权重”。将权重和输入相乘，并返回介于0和1之间的输出。如果网络不能准确地识别特定的模式，算法将调整权重，这样算法就可以使某些参数更具影响力，直到它确定正确的数学操作来完全处理数据。</p><p>深层架构包括一些基本方法的许多变体。每个体系结构都在特定的领域中取得了成功。不可能总是比较多个体系结构的性能，除非在同一个数据集上对它们进行了评估。</p><p>卷积深度神经网络（CNN）用于计算机视觉。CNN也被应用于语音自动识别（ASR）的声学建模。</p><p><strong>挑战</strong></p><p>与人工神经网络一样，许多问题都可以由经过简单训练的dnn产生。两个常见的问题是过度拟合和计算时间。</p><p>由于增加了抽象层，DNN容易过度拟合，这使得它们能够在训练数据中建模罕见的依赖关系。训练中可以应用正规化方法，如Ivakhnenko的单元修剪或重量衰减或稀疏度，以对抗过度拟合或者在训练期间从隐藏层中随机删除单元。这有助于排除罕见的依赖性。最后，可以通过裁剪和旋转等方法来增加数据，从而增加较小的训练集，以减少过度拟合的可能。</p><p>DNN必须考虑许多训练参数，例如大小（层数和每层单位数）、学习率和初始权重。由于时间成本和计算资源的原因，在参数空间中搜索最优参数可能是不可行的。各种技巧，例如批处理（一次计算多个训练示例的梯度，而不是单个示例）加快计算速度。许多核心体系结构（如GPU或Intel Xeon phi）的大型处理能力在培训中产生了显著的加速，因为这些处理体系结构适用于矩阵和向量计算。</p><p>或者，工程师可以寻找其他类型的神经网络，使用更简单和收敛的训练算法。小脑模型关节控制器（CMAC）就是一种神经网络。它不需要学习率或随机初始权重的CMAC。训练过程可以保证与新的一批数据一步收敛，训练算法的计算复杂度与涉及的神经元数量呈线性关系。</p><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><h4 id="自动语音识别"><a href="#自动语音识别" class="headerlink" title="自动语音识别"></a>自动语音识别</h4><p>大规模自动语音识别是深度学习的第一个也是最令人信服的成功案例。lstm-rnns可以学习“非常深入的学习”任务，这些任务涉及包含由数千个离散时间步分隔的语音事件的多秒间隔，其中一个时间步对应约10 ms。lstm-with-forget-gates在某些任务上与传统的语音识别器具有竞争性。</p><p>语音识别的初步成功是建立在基于TIMIT的小规模识别任务基础上的。该数据集包含来自美国英语八种主要方言的630个说话者，每个说话者读10句话。【119】它的小尺寸使许多配置得以尝试。更重要的是，这项胆怯的任务涉及到电话序列识别，与字序列识别不同，它允许弱的电话双随机语言模型。这使得语音识别的声学建模方面的强度更容易分析。以下列出的错误率，包括这些早期结果，并以电话错误率百分比（PER）度量，自1991年以来进行了总结。</p><table><thead><tr><th style="text-align:center">Method</th><th style="text-align:center">PER (%)</th></tr></thead><tbody><tr><td style="text-align:center">Randomly Initialized RNN</td><td style="text-align:center">26.1</td></tr><tr><td style="text-align:center">Bayesian Triphone GMM-HMM</td><td style="text-align:center">25.6</td></tr><tr><td style="text-align:center">Hidden Trajectory (Generative) Model</td><td style="text-align:center">24.8</td></tr><tr><td style="text-align:center">Monophone Randomly Initialized DNN</td><td style="text-align:center">23.4</td></tr><tr><td style="text-align:center">Monophone DBN-DNN</td><td style="text-align:center">22.4</td></tr><tr><td style="text-align:center">Triphone GMM-HMM with BMMI Training</td><td style="text-align:center">21.7</td></tr><tr><td style="text-align:center">Monophone DBN-DNN on fbank</td><td style="text-align:center">20.7</td></tr><tr><td style="text-align:center">Convolutional DNN</td><td style="text-align:center">20.0</td></tr><tr><td style="text-align:center">Convolutional DNN w. Heterogeneous Pooling</td><td style="text-align:center">18.7</td></tr><tr><td style="text-align:center">Ensemble DNN/CNN/RNN[</td><td style="text-align:center">18.3</td></tr><tr><td style="text-align:center">Bidirectional LSTM</td><td style="text-align:center">17.9</td></tr><tr><td style="text-align:center">Hierarchical Convolutional Deep Maxout Network</td><td style="text-align:center">16.5</td></tr></tbody></table><p>20世纪90年代末，DNN系统首次用于说话人识别，2009-2011年首次用于语音识别，2003-2007年首次用于语音识别，8个主要领域的进展加快了：</p><ul><li>放大/缩小和适应的dnn训练和解码</li><li>序列识别训练</li><li>深入模型的特征处理，对底层机制有深入的了解</li><li>DNN及相关深部模型的适应</li><li>基于DNN的多任务转移学习及相关深层模型</li><li>CNN及其设计如何最大限度地利用语音领域知识</li><li>RNN及其丰富的LSTM变体</li><li>其他类型的深层模型包括基于张量的模型和集成深层生成/识别模型</li></ul><p>所有主要的商业语音识别系统（如微软Cortana、Xbox、Skype翻译器、亚马逊Alexa、Google Now、苹果Siri、百度和iFlytek语音搜索以及一系列细微差别语音产品等）都是基于深度学习的。</p><h4 id="图像识别"><a href="#图像识别" class="headerlink" title="图像识别"></a>图像识别</h4><p>图像分类常用的评估集是mnist数据库数据集。mnist由手写数字组成，包括60000个训练示例和10000个测试示例。和Timit一样，它的小尺寸允许用户测试多种配置。此集合的结果的综合列表可用。</p><p>基于深度学习的图像识别已经成为“超人”，产生的结果比人类竞争者更准确。这首次发生在2011年。</p><p>经过深度学习训练的车辆现在可以解释360°摄像头视图。另一个例子是面部畸形新分析（FDNA），用于分析连接到大型遗传综合征数据库的人类畸形病例。</p><h4 id="视觉艺术处理"><a href="#视觉艺术处理" class="headerlink" title="视觉艺术处理"></a>视觉艺术处理</h4><p>与图像识别的进展密切相关的是，深度学习技术越来越多地应用于各种视觉艺术任务。例如，dnn已经证明了自己的能力：a）识别给定绘画的风格周期；b）神经风格转换——捕捉给定艺术作品的风格，并以视觉愉悦的方式将其应用于任意照片或视频；c）基于随机视觉输入字段生成引人注目的图像。</p><h4 id="自然语言处理"><a href="#自然语言处理" class="headerlink" title="自然语言处理"></a>自然语言处理</h4><p>自2000年代初以来，神经网络已被用于实现语言模型。LSTM帮助改进了机器翻译和语言建模。</p><p>这个领域的其他关键技术是负抽样和嵌入字。单词嵌入，例如word2vec，可以被认为是深度学习体系结构中的一个表示层，它将原子单词转换为相对于数据集中其他单词的单词位置表示；该位置表示为矢量空间中的一个点。将单词嵌入作为RNN输入层，允许网络使用有效的组合向量语法解析句子和短语。组合向量语法可以被看作是由RNN实现的概率上下文无关语法（PCFG）。在单词嵌入之上构建的递归自动编码器可以评估句子相似性并检测改写。深层神经架构为选区分析提供最佳结果，情绪分析，信息离子检索，口语理解，机器翻译，上下文实体链接，写作风格识别，文本分类等。</p><p>近年来的发展将嵌入词概括为嵌入句。</p><p>谷歌翻译（GT）使用一个大的端到端长的短期内存网络。谷歌神经机器翻译（GNMT）使用一个基于实例的机器翻译方法，在该方法中，系统“从数百万个例子中学习”。google translate支持100多种语言。网络编码“句子的语义，而不是简单地记忆短语到短语的翻译”。gt使用英语作为大多数语言对之间的中间语言。</p><h4 id="药物发现与毒理学"><a href="#药物发现与毒理学" class="headerlink" title="药物发现与毒理学"></a>药物发现与毒理学</h4><p>大量候选药物未能获得监管部门的批准。这些失败是由于功效不足（靶向效应）、不期望的相互作用（靶向效应）或未预料到的毒性效应所致。研究探索了利用深度学习预测生物分子靶向以及环境化学品在营养、家用产品和药物中的毒性效应。</p><p>atomnet是一个基于结构的合理药物设计的深度学习系统。atomnet被用来预测新的候选生物分子，用于疾病靶点，如埃博拉病毒和多发性硬化症。</p><h4 id="客户关系管理"><a href="#客户关系管理" class="headerlink" title="客户关系管理"></a>客户关系管理</h4><p>深度强化学习被用来近似可能的直接营销行动的价值，以RFM变量定义。估计值函数被证明具有客户生命周期值的自然解释。</p><h4 id="推荐系统"><a href="#推荐系统" class="headerlink" title="推荐系统"></a>推荐系统</h4><p>推荐系统使用深度学习为基于内容的音乐推荐的潜在因素模型提取有意义的特征。多视图深度学习已应用于从多个领域学习用户偏好。该模型采用了混合协作和基于内容的方法，并增强了多用户的推荐。多任务。</p><h4 id="生物信息学"><a href="#生物信息学" class="headerlink" title="生物信息学"></a>生物信息学</h4><p>在生物信息学中使用了一个自动编码神经网络来预测基因本体注释和基因功能关系。</p><p>在医学信息学中，深度学习是根据可穿戴设备的数据和电子健康记录数据对健康并发症的预测来预测睡眠质量的。深度学习在医疗保健中也显示出功效。</p><h4 id="医学图像分析"><a href="#医学图像分析" class="headerlink" title="医学图像分析"></a>医学图像分析</h4><p>深入学习在医学应用中产生了竞争性的结果，如癌细胞分类、病变检测、器官分割和图像增强。</p><h4 id="移动广告"><a href="#移动广告" class="headerlink" title="移动广告"></a>移动广告</h4><p>为移动广告寻找合适的移动受众一直是一个挑战，因为在任何广告服务器创建和使用广告服务的目标细分市场之前，必须考虑并吸收许多数据点。深度学习被用来解释大型、多维度的广告数据集。在请求/服务/点击互联网广告周期中收集了许多数据点。这些信息可以构成机器学习的基础，以提高广告的选择。</p><h4 id="图像恢复"><a href="#图像恢复" class="headerlink" title="图像恢复"></a>图像恢复</h4><p>深度学习已成功地应用于逆向工程，如去噪、超分辨率、着色和胶片着色。这些应用包括学习方法，例如“有效图像恢复的收缩场”。在图像数据集上训练，以及“深度图像优先”在需要恢复的图像上训练。</p><h4 id="金融欺诈检测"><a href="#金融欺诈检测" class="headerlink" title="金融欺诈检测"></a>金融欺诈检测</h4><p>深入学习正成功地应用于金融欺诈检测和反洗钱。”深入的反洗钱检测系统可以发现和识别数据之间的关系和相似性，并进一步学习检测异常或对特定事件进行分类和预测”。该解决方案利用了监督学习技术（如可疑交易的分类）和无监督学习（如异常检测）。</p><h4 id="军事"><a href="#军事" class="headerlink" title="军事"></a>军事</h4><p>美国国防部应用深度学习，通过观察训练机器人完成新任务。</p><h3 id="人类认知与大脑发育的关系"><a href="#人类认知与大脑发育的关系" class="headerlink" title="人类认知与大脑发育的关系"></a>人类认知与大脑发育的关系</h3><p>深度学习与认知神经科学家在20世纪90年代早期提出的一类大脑发育理论（特别是新皮质发育）密切相关。这些发展理论在计算模型中被例示，使其成为深度学习系统的前身。这些发展模型具有这样的特性：大脑中各种拟议的学习动态（例如，神经生长因子波）支持组织，有点类似于深度学习模型中使用的神经网络。与新皮层一样，神经网络采用分层过滤器的层次结构，每一层都考虑来自前一层（或操作环境）的信息，然后将其输出（可能是原始输入）传递给其他层。这个过程产生了一个自组织的传感器堆栈，很好地适应了它们的工作环境。1995年的一份描述说，“……婴儿的大脑似乎在所谓的营养因子的影响下组织起来……大脑的不同区域依次连接，一层组织在另一层组织之前成熟，直到整个大脑成熟。</p><p>从神经生物学的角度研究了深层学习模型的合理性。一方面，为了提高处理的真实性，已经提出了几种反向传播算法的变体。其他研究人员认为，无监督的深度学习形式，如基于层次生成模型和深度信仰网络的深度学习形式，可能更接近生物现实。在这篇文章中。特别是，生成神经网络模型与大脑皮层基于采样处理的神经生物学证据有关。</p><p>虽然还没有对人脑组织和深部网络中的神经元编码进行系统的比较，但已有一些类似的报道。例如，深度学习单元进行的计算可能与实际神经元和神经群的计算相似。同样，深度学习模型开发的表示与灵长类视觉系统在单个单元和群体水平上测量的表示相似。</p><h3 id="商业活动"><a href="#商业活动" class="headerlink" title="商业活动"></a>商业活动</h3><p>许多组织为特定的应用程序采用深度学习。Facebook的人工智能实验室执行一些任务，比如用上传图片中的人的名字自动标记上传的图片。</p><p>谷歌的DeepMind技术开发了一个系统，能够学习如何使用像素作为数据输入来玩Atari视频游戏。2015年，他们展示了他们的alphago系统，该系统学得很好，足以打败专业的围棋玩家。</p><p>2015年，Blippar演示了一个移动增强现实应用程序，它使用深度学习来实时识别对象。</p><p>截至2008年，德克萨斯大学奥斯汀分校（UT）的研究人员开发了一种机器学习框架，称为“通过评估性强化（evaluative reinformation）或“驯服者”（tamer）手动培训代理，该框架为机器人或计算机程序提供了新的方法，以便通过与人类导师的互动来学习如何执行任务。</p><p>最早作为Tamer开发的一种称为DeepTamer的新算法后来在2018年由美国陆军研究实验室（ARL）和UT研究人员合作推出。深度驯化器利用深度学习为机器人提供通过观察来学习新任务的能力。</p><p>使用深度驯化器，机器人与人类教练学习一项任务，观看视频流或亲自观察人类执行一项任务。机器人后来在教练的指导下完成了这项任务，教练给机器人提供了“好工作”和“坏工作”等反馈。</p><h3 id="批评和评论"><a href="#批评和评论" class="headerlink" title="批评和评论"></a>批评和评论</h3><p>深度学习既受到了批评，也受到了评论，在某些情况下，这是来自计算机科学以外的领域。</p><h4 id="理论"><a href="#理论" class="headerlink" title="理论"></a>理论</h4><p>一个主要的批评是缺乏围绕某些方法的理论。在最常见的深层架构中学习是使用理解良好的梯度下降来实现的。然而，围绕其他算法的理论，例如对比发散，却不那么清晰。（例如，它会聚了吗？如果是，有多快？近似值是多少？）深度学习的方法通常被视为一个黑匣子，大多数的确认都是通过经验而不是理论进行的。</p><p>其他人指出，深度学习应该被视为实现强大人工智能的一步，而不是一个全面的解决方案。尽管深度学习方法具有强大的威力，但它们仍然缺乏完全实现此目标所需的许多功能。研究心理学家加里马库斯指出：</p><p>“实际上，深度学习只是构建智能机器的更大挑战的一部分。这类技术缺乏表现因果关系的方法，没有明显的逻辑推理方法，而且它们离整合抽象知识（例如关于对象是什么、对象是什么以及它们通常如何使用的信息）还有很长的路要走。像Watson这样最强大的AI系统使用像深度学习这样的技术作为非常复杂的技术集合中的一个元素，从贝叶斯推理的统计技术到演绎推理。</p><p>除了强调深度学习的局限性之外，一位作者推测有可能训练机器视觉堆栈来完成区分“老主人”和业余图形的复杂任务，并假设这种敏感度可能代表了非平凡机器EMPA的雏形。同一位作者提出，这与人类学是一致的，人类学认为美学是行为现代性的一个关键要素。</p><p>在进一步提到艺术敏感性可能存在于相对较低的认知层次中这一观点时，发表了一系列深层（20-30层）神经网络内部状态的图形表示，试图在本质上随机的数据中辨别训练它们的图像。证明了Sual上诉：最初的研究收到了超过1000条评论，是卫报网站上一段时间最常访问的文章的主题。</p><h4 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h4><p>一些深度学习体系结构显示出问题行为，例如自信地将无法识别的图像分类为普通图像的熟悉类别。以及对正确分类的图像的微小干扰进行错误分类。Goertzel假设这些行为是由于其内部重新分类的局限性。陈述和这些限制将抑制集成到异构多组件人工通用智能（AGI）体系结构中。这些问题可以通过内部形成与图像语法相同状态的深度学习体系结构来解决对观察到的实体和事件的分解。学习从训练数据中获得语法（视觉或语言），就相当于将系统限制为常识推理，该推理根据语法产生规则对概念进行操作，是人类语言习得和人工智能（AI）的基本目标。</p><h4 id="网络威胁"><a href="#网络威胁" class="headerlink" title="网络威胁"></a>网络威胁</h4><p>随着深度学习从实验室走向世界，研究和经验表明，人工神经网络容易受到黑客攻击和欺骗。通过识别这些系统用于运行的模式，攻击者可以修改对ANN的输入，从而使ANN找到人类观察者无法识别的匹配项。例如，攻击者可以对图像进行细微的更改，这样，即使图像看起来与搜索目标完全不同，人工神经网络也能找到匹配的图像。这种操作被称为“对抗性攻击”。2016年，研究人员使用一个人工神经网络以试验和错误的方式对图像进行诊断，识别另一个图像的焦点，从而生成欺骗它的图像。修改后的图像在人眼看来没有什么不同。另一组研究表明，打印出来的篡改图像成功地欺骗了图像分类系统。一个防御措施是反向图像搜索，其中一个可能的假图像被提交到Tineye这样的网站，然后可以找到它的其他实例。一种改进是只使用图像的一部分进行搜索，以识别可能从中获取该片段的图像。</p><p>另一组研究表明，某些迷幻眼镜可以愚弄面部识别系统，使其认为普通人是名人，可能允许一个人模仿另一个人。在2017年，研究人员增加了标签来阻止信号，并导致了一个神经网络错误分类它们。</p><p>然而，人工神经网络可以接受进一步的训练，以检测欺骗企图，可能导致攻击者和防御者进入一场类似于已经定义了恶意软件防御行业的军备竞赛。人工神经网络已经被训练来击败基于人工神经网络的反恶意软件软件，通过反复攻击恶意软件进行防御，该恶意软件被遗传算法不断修改，直到它欺骗了反恶意软件，同时保留了其攻击目标的能力。</p><p>另一个研究小组证明，某些声音可以让Google Now语音命令系统打开一个特定的网址，下载恶意软件。</p><p>在“数据中毒”中，假数据不断地被走私到机器学习系统的训练集中，以防止其达到精通状态。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;深层学习（也称为深层结构学习或分层学习）是基于人工神经网络的一系列机器学习方法的一部分。学习可以有监督、半监督或无监督。&lt;/p&gt;
&lt;p&gt;深度学习体系结构，如深度神经网络、深度信念网络、循环神经网络和卷积神经网络，已应用于计算机视觉、语音识别、自然语言处理、音频识别、社会网络
      
    
    </summary>
    
    
      <category term="机器学习" scheme="http://wangchengfei.info/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>计算机的发展</title>
    <link href="http://wangchengfei.info/2019/05/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9A%84%E5%8F%91%E5%B1%95/"/>
    <id>http://wangchengfei.info/2019/05/09/计算机的发展/</id>
    <published>2019-05-09T13:18:51.000Z</published>
    <updated>2019-05-10T09:38:32.450Z</updated>
    
    <content type="html"><![CDATA[<p>计算机是一种可以通过计算机编程指令自动执行算术或逻辑操作序列的机器。现代计算机有能力遵循被称为程序的广义操作集。这些程序使计算机能够执行非常广泛的任务。“完整”计算机，包括“完整”操作所需的硬件、操作系统（主软件）和外围设备，可以称为计算机系统。这个术语也可用于连接在一起并共同工作的一组计算机，特别是计算机网络或计算机集群。</p><p>计算机被用作各种工业和消费设备的控制系统。这包括简单的专用设备，如微波炉和遥控器，工厂设备，如工业机器人和计算机辅助设计，以及通用设备，如个人电脑和移动设备，如智能手机。互联网是在计算机上运行的，它连接着数亿台其他计算机及其用户。</p><p>早期的计算机只被认为是计算设备。自古以来，算盘等简单的手工工具就帮助人们进行计算。在工业革命初期，一些机械装置被用来自动完成一些冗长乏味的任务，例如织机的引导模式。20世纪初，更先进的电机进行了专门的模拟计算。第一台数字电子计算器是在第二次世界大战期间开发出来的。从那时起，计算机的速度、功率和多功能性都在急剧增加。</p><p>传统上，现代计算机由至少一个处理元件（通常是中央处理器）和某种形式的存储器组成。处理元件执行算术和逻辑运算，排序和控制单元可以根据存储的信息改变运算顺序。外围设备包括输入设备（键盘、鼠标、操纵杆等）、输出设备（显示器、打印机等）和执行两种功能的输入/输出设备（例如2000年代的触摸屏）。外围设备允许从外部源检索信息，并允许保存和检索操作结果。</p><h3 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h3><p>根据《牛津英语词典》，第一次使用“计算机”这个词是在1613年，在英国作家理查德·布雷斯韦特写的一本名叫《永人集》的书中：“我读到了时代上最真实的计算机，读到了尤尔（sic）呼吸到的最好的算数学家，他把你的一天缩短为一个短的数字。这是“计算机”一词的用法。指的是人类的计算机，即进行计算的人。这个词一直延续到20世纪中叶。在这一时期的后期，女性经常被雇佣为计算机，因为她们的工资可能比男性低。到1943年，大多数人类计算机都是女性。从19世纪末开始，这个词开始有了更为熟悉的含义，即进行计算的机器。</p><p>在线词源词典在16世纪40年代首次证明了“计算机”的用法，意思是“计算者”；这是“从计算（v.）得到的代理名词”。在线词源词典规定，“计算机”（任何类型）一词的使用始于1897年。”在线词源词典指出，“现代使用”一词的意思是“可编程数字电子计算机”始于“1945年，以这个名字命名；从某种意义上始于1937年，被称为图灵机”。</p><h3 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h3><h4 id="20世纪前"><a href="#20世纪前" class="headerlink" title="20世纪前"></a>20世纪前</h4><p>最早的计数装置可能是一种计数棒。后来，在肥沃的月牙形地区，保存记录的辅助工具包括计算器（粘土球、锥体等），它代表物品的数量，可能是牲畜或谷物，密封在空心的未烧制的粘土容器中。</p><p>算盘最初用于算术任务。罗马算盘早在公元前2400年就由巴比伦人使用的算盘发展而来。从那时起，许多其他形式的计算板或桌子被发明出来。在中世纪欧洲的一个会计室里，一块方格布放在一张桌子上，马克笔根据某些规则在桌子上移动，以帮助计算钱款。</p><p>据Derek J.de Solla Price所说，安提基特拉机制被认为是最早的机械模拟“计算机”，它被设计用来计算天文位置。它于1901年在希腊安提基希拉岛上的安提基希拉残骸中被发现，位于基希拉和克里特之间，可追溯到公元前100年左右。与反Kythera机制相当的复杂程度的装置直到一千年后才会重新出现。</p><p>许多计算和测量的机械辅助设备都是为天文和导航而建造的。平面图是11世纪发明的星图。星盘是在公元前1世纪或2世纪的希腊世界中发明的。星盘是平面和屈光度的结合体，是一种有效的模拟计算机，能够解决球面天文学中的几种不同问题。1235年，波斯伊斯法罕的Abi Bakr发明了一种结合了机械日历计算机和带齿轮的星盘。</p><p>扇形是一种计算工具，用于解决比例、三角、乘法和除法问题，以及各种功能，如平方根和立方根，于16世纪末发展起来，并在射击、测量和导航中得到应用。</p><p>求积仪是一种手动仪器，通过机械连杆追踪闭合图形的面积来计算闭合图形的面积。</p><p>计算尺是在1620-1630年左右发明的，就在对数概念发表后不久。它是一台手工操作的模拟计算机，用于进行乘法和除法运算。随着计算尺的发展，增加的刻度提供了倒数、平方根和平方根、立方根和立方根，以及超越函数，如对数和指数、圆和双曲三角学和其他函数。带特殊刻度的滑尺仍然用于快速执行常规计算，例如用于轻型飞机时间和距离计算的E6B圆形滑尺。</p><p>17世纪70年代，瑞士钟表制造商皮埃尔·贾奎特·德罗兹（Pierre Jaquet Droz）制造了一个机械娃娃（Automaton），可以拿着一支羽毛笔写字。通过切换内部轮子的编号和顺序，可以产生不同的字母，从而产生不同的信息。实际上，它可以通过机械“编程”来读取指令。</p><p>威廉汤姆森爵士于1872年发明的潮汐预报机对浅水区的航行有很大的实用价值。它使用滑轮和钢丝系统来自动计算特定地点某一特定时段内的预测潮位。</p><p>微分分析仪是一种机械模拟计算机，设计用于积分求解微分方程，利用轮盘机构进行积分。1876年，开尔文勋爵已经讨论过这种计算器的可能构造，但他被球盘积分器的有限输出扭矩所困扰，在差分分析仪中，一个积分器的输出驱动下一个积分器的输入，或图形输出。扭矩放大器是使这些机器工作的进步。从20世纪20年代开始，Vannevar-Bush等人开发了机械式差分分析仪。</p><h4 id="第一台设备"><a href="#第一台设备" class="headerlink" title="第一台设备"></a>第一台设备</h4><p>英国机械工程师兼博学家查尔斯·巴贝奇提出了可编程计算机的概念。他被认为是“计算机之父”，在19世纪初，他构思并发明了第一台机械计算机。1833年，他发明了一种革命性的差分引擎，用于辅助航海计算，后来他意识到，一种更通用的设计，即分析引擎，是可能的。程序和数据的输入将通过穿孔卡片提供给机器，这种方法当时正用于指导诸如提花织机之类的机械织机。对于输出，机器将有一台打印机、一台曲线绘图仪和一个钟。这台机器还可以在卡片上打上数字以便日后阅读。该引擎集成了一个算术逻辑单元，以条件分支和循环的形式控制流，以及集成的内存，使其成为通用计算机的第一个设计，可以用现代术语描述为图灵完备。</p><p>这台机器比它的时代早了大约一个世纪。他的机器的所有部件都必须用手工制造——这是一个拥有数千个部件的设备的主要问题。最终，该项目因英国政府决定停止资助而解散。巴贝奇未能完成分析引擎的工作，主要是由于政治和金融上的困难，以及他渴望开发出一台越来越精密的计算机，并以超越其他任何人的速度前进。然而，他的儿子亨利·巴贝奇（HenryBabbage）在1888年完成了分析引擎计算单元（Mill）的简化版。他在1906年成功地演示了它在计算表中的应用。</p><h4 id="模拟计算机"><a href="#模拟计算机" class="headerlink" title="模拟计算机"></a>模拟计算机</h4><p>在20世纪上半叶，越来越复杂的模拟计算机满足了许多科学计算的需要，模拟计算机使用问题的直接机械或电气模型作为计算的基础。然而，这些都是不可编程的，通常缺乏现代数字计算机的通用性和准确性。微分分析仪是一种机械模拟计算机，设计用于通过使用轮盘机构的积分来求解微分方程，由更著名的开尔文勋爵的兄弟詹姆斯·汤姆森于1876年提出概念。</p><p>从1927年开始，由H.L.哈森和vannevar-bush在麻省理工学院建造的差分分析仪使机械模拟计算技术达到了顶峰。这是建立在詹姆斯·汤姆森的机械积分器和H.W.Nieman发明的扭矩放大器的基础上的。这些设备中有十几个是在它们过时之前建造的。到了20世纪50年代，数字电子计算机的成功宣告了大多数模拟计算机器的终结，但在20世纪50年代，模拟计算机仍在一些特殊应用中使用，如教育（控制系统）和飞机（计算尺）。</p><h4 id="数字计算机"><a href="#数字计算机" class="headerlink" title="数字计算机"></a>数字计算机</h4><p><strong>机电</strong></p><p>到1938年，美国海军已经研制出一种机电模拟计算机，其体积足够小，可以在潜艇上使用。这是一台鱼雷数据计算机，它使用三角法来解决向移动目标发射鱼雷的问题。在第二次世界大战期间，其他国家也开发了类似的装置。</p><p>早期的数字计算机是机电式的；电子开关驱动机械继电器进行计算。这些设备的运行速度很低，最终被速度更快的全电子计算机所取代，最初使用的是真空管。Z2由德国工程师Konrad Zuse于1939年发明，是最早的机电式中继计算机的例子之一。</p><p>1941年，Zuse使用了世界上第一台可工作的机电可编程全自动数字计算机Z3。Z3配备了2000个继电器，实现了一个22位字长，工作时的时钟频率约为5–10_Hz。Z3在穿孔胶片上提供了程序代码，而数据可以存储在64个字的内存中或由键盘提供。它在某些方面与现代机器非常相似，开创了诸如浮点数之类的众多进步。而不是更难实现的十进制系统（在查尔斯·巴贝奇的早期设计中使用），使用二进制系统意味着，考虑到当时可用的技术，zuse的机器更容易建造，而且可能更可靠。</p><p><strong>真空管和数字电子电路</strong></p><p>纯电子电路元件很快取代了它们的机械和机电等价物，同时数字计算取代了模拟计算。工程师汤米·弗劳尔斯于20世纪30年代在伦敦的邮局研究站工作，他开始探索电子设备在电话交换中的可能用途。他在1934年建造的实验设备在五年后投入使用，将电话交换网络的一部分转换成一个电子数据处理系统，使用数千个真空管[20]在美国，爱荷华州立大学的John Vincent Atanasoff和Clifford E.Berry开发并测试了Atanasoff–Berry计算机。R（ABC）公司于1942年[28]推出了第一台“自动电子数字计算机”。[29]这种设计也是全电子的，使用了大约300个真空管，电容器固定在机械旋转的磁鼓中，用于存储。</p><p>第二次世界大战期间，英国人在布莱奇利公园成功地破坏了德国的加密军事通信。德国的加密机“谜”号最初是在通常由女性操作的机电炸弹的帮助下被攻击的。为了破解更为复杂的德国Lorenz SZ 40/42机器，这台机器用于高级别的陆军通信，Max Newman和他的同事们委托Floors建造了这个巨人。他花了11个月的时间。从1943年2月初开始，在1943年12月进行功能测试后，巨像被运送到布莱奇利公园，在那里于1944年1月18日交付并于2月5日攻击其第一条信息。</p><p>巨像是世界上第一台电子数字可编程计算机。它有纸带输入，并且能够配置为对其数据执行各种布尔逻辑操作，但它没有图灵完成。建造了九台MK II巨像（MK I被改装成MK II，总共制造了十台机器）。巨像Mark I包含1500个热离子阀（管），但Mark II具有2400个阀，操作起来比Mark I快5倍，更简单，大大加快了解码过程。</p><p>ENIAC（电子数字积分器和计算机）是美国第一台电子可编程计算机。虽然ENIAC与巨人相似，但它更快、更灵活，而且图灵完备。像巨人一样，ENIAC上的“程序”是由其接线和交换机的状态定义的，这与后来出现的存储程序电子机器大不相同。一旦编写了一个程序，就必须通过手动重置插头和开关将其机械地设置到机器中。ENIAC的程序员是六名妇女，通常统称为“ENIAC女孩”。</p><p>它结合了电子技术的高速性和对许多复杂问题进行编程的能力。它可以每秒加或减5000次，比任何其他机器快1000倍。它还具有乘法、除法和平方根的模块。高速内存限制在20个字（大约80字节）。在宾夕法尼亚大学的约翰·莫奇利和J.Presper Eckert的指导下建造，ENIAC的开发和建设从1943年持续到1945年底全面运行。这台机器巨大，重30吨，使用200千瓦的电力，包括18000多个真空管、1500个继电器和数十万个电阻器、电容器和电感器。</p><h4 id="现代计算机"><a href="#现代计算机" class="headerlink" title="现代计算机"></a>现代计算机</h4><p><strong>现代计算机概念</strong></p><p>现代计算机的原理是由阿兰·图灵在他1936年关于可计算数字的开创性论文中提出的。图灵提出了一种简单的装置，他称之为“通用计算机”，现在称之为通用图灵机。他证明了这种机器能够通过执行存储在磁带上的指令（程序）来计算任何可计算的东西，从而使机器可以编程。图灵设计的基本概念是存储程序，其中所有的计算指令都存储在内存中。冯·诺依曼承认，现代计算机的核心概念源于本文。图灵机器至今仍是计算理论研究的核心对象。现代计算机被称为图灵完备（即，它们具有与通用图灵机相当的算法执行能力），但其有限内存存储所施加的限制除外。</p><p><strong>存储程序</strong></p><p>早期的计算机有固定的程序。改变它的功能需要重新布线和重新构造机器。随着存储程序计算机的提议，这一改变。一种存储程序计算机，通过设计一个指令集，可以在存储器中存储一组详细计算的指令（程序）。艾伦·图灵在1936年的论文中为存储程序计算机奠定了理论基础。1945年，图灵加入国家物理实验室，开始开发电子存储程序数字计算机。他1945年的报告《拟议中的电子计算器》是这种装置的第一个规范。宾夕法尼亚大学的约翰·冯·诺依曼（JohnvonNeumann）也在1945年分发了他关于EDVAC的报告初稿。</p><p>曼彻斯特婴儿是世界上第一台存储程序计算机。它由弗雷德里克·C·威廉斯、汤姆·基尔伯恩和杰夫·托蒂尔在曼彻斯特维多利亚大学建造，并于1948年6月21日运行了它的第一个程序。它被设计成威廉斯管的试验台，这是第一个随机存取数字存储设备。尽管按照当时的标准，计算机被认为是“小而原始的”，这是第一台包含现代电子计算机所必需的所有元素的工作机器。婴儿一证明其设计的可行性，该大学就启动了一个项目，将其开发成一种更有用的计算机。GraceHopper是第一个开发编程语言编译器的人。</p><p>反过来，Mark 1很快成为了世界上第一台商用通用计算机费朗蒂Mark 1的原型。由费朗蒂制造，1951年2月交付曼彻斯特大学。1953年至1957年间，至少有七台这类后来的机器交付，其中一台交付给阿姆斯特丹的壳牌实验室。1947年10月，英国餐饮公司J.Lyons&amp;Company的董事决定积极推动计算机的商业发展。利奥一号计算机于1951年4月投入使用并运行了世界上第一个常规的办公室计算机工作。</p><p><strong>晶体管</strong></p><p>双极晶体管发明于1947年。从1955年起，晶体管在计算机设计中取代了真空管，从而产生了“第二代”计算机。与真空管相比，晶体管有许多优点：它们比真空管小，而且比真空管需要更少的功率，因此释放的热量更少。硅结晶体管比真空管更可靠，使用寿命更长、不确定。晶体管计算机可以在相对紧凑的空间中包含数万个二进制逻辑电路。</p><p>在曼彻斯特大学，一个由Tom Kilburn领导的团队设计并制造了一台使用最新开发的晶体管而非阀门的机器。他们的第一台晶体管计算机和世界上第一台晶体管计算机于1953年投入使用，第二个版本于1955年4月在那里完成。然而，这台机器确实利用阀门来产生125千赫的时钟波形，并在磁鼓存储器的读写电路中，因此它不是第一台完全晶体管化的计算机。由哈韦尔原子能研究机构的电子部门建造。</p><p><strong>集成电路</strong></p><p>随着集成电路的出现，计算能力又有了新的巨大进步。集成电路的想法最初是由国防部皇家雷达研究所的雷达科学家杰弗里W.A.杜默提出的。Dummer于1952年5月7日在华盛顿举行的质量电子元件进展研讨会上首次公开了对集成电路的描述。</p><p>第一个实用的集成电路是由德克萨斯仪器公司的杰克·基尔比（Jack Kilby）和Fairchild半导体公司的罗伯特·诺伊斯（Robert Noyce）发明的。基尔比于1958年7月记录了他对集成电路的最初想法，并于1958年9月12日成功地演示了第一个工作中的集成示例。在1959年2月6日的专利申请中，基尔比·德斯（Kilby Desc）。他将他的新装置称为“一个半导体材料体”…其中电子电路的所有元件都是完全集成的。它是在Fairchild半导体公司生产的，由硅制成，而Kilby的芯片则由锗制成。</p><p>这一新的发展预示着计算机的商业和个人用途的爆炸性增长，并导致微处理器的发明。虽然关于哪种设备是第一个微处理器的问题存在争议，部分原因是对术语“微处理器”的确切定义缺乏一致性，但毫无疑问，第一个单芯片微处理器是由英特尔的Ted Hoff、Federico Faggin和Stanley Mazor设计和实现的Intel 4004。</p><p>芯片上的系统（SOCS）是硬币大小的微型芯片（或芯片）上的完整计算机。可能没有集成的RAM和闪存。如果没有集成，RAM通常直接放在SOC的上方（即封装上的封装）或下方（在电路板的另一侧），而闪存通常放在SOC的旁边，这一切都是为了提高数据传输速度，因为数据信号不必长距离传输。自1945年ENIAC以来，计算机取得了巨大的进步，现代SOC的体积只有一枚硬币大小，同时也比ENIAC强大数十万倍，集成了数十亿个晶体管，仅消耗几瓦电能。</p><h4 id="移动计算机"><a href="#移动计算机" class="headerlink" title="移动计算机"></a>移动计算机</h4><p>第一台移动电脑很重，由主电源供电。50LB IBM 5100是一个早期的例子。后来的便携式设备，如Osborne1和Compaq便携式设备，重量要轻得多，但仍然需要插上电源。第一批笔记本电脑，如网格罗盘，通过整合电池，消除了这一要求，随着计算资源的不断小型化和便携式电池寿命的进步，便携式计算机在2000年代开始流行起来。</p><p>这些智能手机和平板电脑运行在各种操作系统上，最近成为市场上的主要计算设备，据制造商报告，2013年第二季度，估计已售出2.37亿台设备。智能手机等移动设备由芯片上的系统（SOC）供电，芯片上的系统是微型芯片上的完整计算机。只有硬币的大小。</p><h3 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h3><p>计算机通常根据其用途分类：</p><h4 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h4><ul><li>模拟计算机</li><li>数字计算机</li><li>混合计算机</li></ul><h4 id="尺寸"><a href="#尺寸" class="headerlink" title="尺寸"></a>尺寸</h4><ul><li>智能手机</li><li>微型计算机</li><li>工作站</li><li>个人计算机</li><li>笔记本电脑</li><li>小型计算机</li><li>大型计算机</li><li>超级计算机</li><li>平板电脑</li></ul><h3 id="硬件"><a href="#硬件" class="headerlink" title="硬件"></a>硬件</h3><p>“硬件”一词涵盖了计算机中所有有形物理物体的组成部分。电路、计算机芯片、图形卡、声卡、内存（RAM）、主板、显示器、电源、电缆、键盘、打印机和“鼠标”输入设备都是硬件。</p><h4 id="计算硬件历史"><a href="#计算硬件历史" class="headerlink" title="计算硬件历史"></a>计算硬件历史</h4><p>通用计算机有四个主要部件：算术逻辑单元（ALU）、控制单元、存储器和输入输出设备（统称为I/O）。这些部件通过总线互连，通常由一组电线组成。每一个部件内部都有数千到数万亿个小型电路，这些电路可以通过电子开关关闭或打开。每个电路代表一个信息位（二进制数字），因此当电路接通时，它代表一个“1”，当电路断开时，它代表一个“0”（正逻辑表示）。电路布置在逻辑门中，以便一个或多个电路可以控制一个或多个其他电路的状态。</p><h4 id="其他硬件主题"><a href="#其他硬件主题" class="headerlink" title="其他硬件主题"></a>其他硬件主题</h4><h4 id="输入设备"><a href="#输入设备" class="headerlink" title="输入设备"></a>输入设备</h4><p>当未处理的数据在输入设备的帮助下发送到计算机时，数据被处理并发送到输出设备。输入装置可以是手动或自动的。处理行为主要由CPU控制。输入设备的一些示例包括：</p><ul><li>计算机键盘</li><li>数码相机</li><li>数字视频</li><li>图形板</li><li>图像扫描仪</li><li>操纵杆</li><li>话筒</li><li>鼠标</li><li>覆盖键盘</li><li>实时时钟</li><li>轨迹球</li><li>触摸屏</li></ul><h4 id="输出设备"><a href="#输出设备" class="headerlink" title="输出设备"></a>输出设备</h4><p>计算机输出的手段称为输出设备。输出设备的一些示例包括：</p><ul><li>计算机监视器</li><li>打印机</li><li>电脑扬声器</li><li>投影机</li><li>声卡</li><li>视频卡</li></ul><h4 id="控制单元"><a href="#控制单元" class="headerlink" title="控制单元"></a>控制单元</h4><p>控制单元（通常称为控制系统或中央控制器）管理计算机的各种组件；它读取和解释（解码）程序指令，将它们转换成控制信号，激活计算机的其他部分。高级计算机的控制系统可能会改变某些指令的执行顺序。</p><p>所有CPU共用的一个关键组件是程序计数器，它是一个特殊的内存单元（寄存器），用于跟踪下一条指令将从内存中读取的位置。</p><p>控制系统的功能如下：请注意，这是一个简化的描述，根据CPU的类型，这些步骤中的某些步骤可以同时执行，也可以以不同的顺序执行：</p><ol><li>从程序计数器指示的单元格中读取下一条指令的代码。</li><li>将指令的数字代码解码成一组命令或信号，用于每个其他系统。</li><li>增加程序计数器，使其指向下一条指令。</li><li>从内存中的单元（或者从输入设备）读取指令所需的任何数据。所需数据的位置通常存储在指令代码中。</li><li>向ALU或寄存器提供必要的数据。</li><li>如果指令需要一个ALU或专用硬件来完成，则指示硬件执行请求的操作。</li><li>把从ALU得到的结果写回到一个内存位置，或者一个寄存器，或者一个输出设备。</li><li>跳回到步骤（1）。</li></ol><p>由于程序计数器（概念上）只是另一组内存单元，因此可以通过在ALU中进行的计算来更改它。将100添加到程序计数器将导致从程序下100个位置读取下一条指令。修改程序计数器的指令通常被称为“跳转”，允许循环（计算机重复的指令）和条件指令执行（这两个例子都是控制流）。</p><p>控制单元处理一条指令所经历的操作序列本身就像一个短的计算机程序，实际上，在一些更复杂的CPU设计中，还有一个更小的计算机叫做微序列器，它运行一个微代码程序，导致所有这些事件的发生。</p><h4 id="中央处理器"><a href="#中央处理器" class="headerlink" title="中央处理器"></a>中央处理器</h4><p>控制单元、ALU和寄存器统称为中央处理器（CPU）。早期的CPU由许多独立的组件组成，但自20世纪70年代中期以来，CPU通常是在一个称为微处理器的集成电路上构建的。</p><h4 id="算术逻辑单元-ALU"><a href="#算术逻辑单元-ALU" class="headerlink" title="算术逻辑单元(ALU)"></a>算术逻辑单元(ALU)</h4><p>ALU能够执行两类运算：算术和逻辑。一个特定的ALU支持的一组算术运算可能仅限于加法和减法，或者可能包括乘法、除法、三角函数（如正弦、余弦等）和平方根。有些只能对整数（整数）进行运算，而另一些则使用浮点来表示实数，尽管精度有限。然而，任何只能够执行最简单操作的计算机都可以通过编程将更复杂的操作分解成它可以执行的简单步骤。因此，任何计算机都可以编程来执行任何算术运算，但如果其ALU不直接支持该运算，则需要花费更多的时间。ALU还可以比较数字并返回布尔真值（真或假），这取决于一个值等于、大于或小于另一个值（“64大于65？”）.逻辑运算涉及布尔逻辑：AND、OR、XOR和NOT。这些对于创建复杂的条件语句和处理布尔逻辑很有用。</p><p>超标量计算机可能包含多个ALU，允许它们同时处理多个指令。图形处理器和具有SIMD和MIMD功能的计算机通常包含可以对向量和矩阵执行算术运算的ALU。</p><h4 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h4><p>计算机的内存可以被看作是一个可以放入或读取数字的单元列表。每个单元格都有一个编号的“地址”，可以存储一个数字。可以指示计算机“将123号放入1357号单元格”或“将1357号单元格中的数字添加到2468号单元格中的数字，并将答案放入1595号单元格。”存储在内存中的信息实际上可以表示任何内容。字母、数字，甚至计算机指令都可以同样容易地放入内存。由于CPU不区分不同类型的信息，因此软件有责任赋予内存所看到的重要意义，而只是一系列数字。</p><p>在几乎所有的现代计算机中，每个存储单元都被设置成以8位（称为字节）为一组存储二进制数。每个字节可以表示256个不同的数字（28=256）；从0到255或−128到+127。为了存储更大的数字，可以使用几个连续的字节（通常是两个、四个或八个）。当需要负数时，它们通常存储在两个补码符号中。其他安排是可能的，但通常在专门的应用或历史背景之外看不到。如果计算机可以用数字表示，它就可以在内存中存储任何类型的信息。现代计算机有数十亿甚至万亿字节的内存。</p><p>CPU包含一组称为寄存器的特殊内存单元，可以比主内存区更快地读写。根据CPU的类型，通常有两百多个寄存器。寄存器用于最频繁需要的数据项，以避免每次需要数据时都必须访问主存储器。随着数据的不断处理，减少对主存储器的访问需求（与ALU和控制单元相比，这通常很慢）大大提高了计算机的速度。</p><p>计算机主存储器有两种主要类型：</p><ul><li>随机存取存储器或RAM</li><li>只读存储器或只读存储器</li></ul><p>RAM可以在CPU命令的任何时候读写，但是ROM预加载的数据和软件永远不会改变，因此CPU只能从中读取。ROM通常用于存储计算机的初始启动指令。通常，当计算机电源关闭时，RAM的内容会被删除，但ROM会无限期地保留其数据。在PC机中，ROM包含一个称为bios的专门程序，当计算机打开或重置时，该程序协调将计算机的操作系统从硬盘驱动器加载到RAM中。在通常没有磁盘驱动器的嵌入式计算机中，所有必需的软件都可以存储在ROM中。存储在ROM中的软件通常称为固件，因为它在概念上更像硬件而不是软件。闪存模糊了ROM和RAM之间的区别，因为它在关闭时保留数据，但也可以重写。但是，它通常比传统的ROM和RAM慢得多，因此它的使用仅限于不需要高速的应用程序。</p><p>在更复杂的计算机中，可能有一个或多个RAM缓存，它们比寄存器慢，但比主内存快。通常，具有这种缓存的计算机被设计成自动将经常需要的数据移动到缓存中，而不需要程序员的任何干预。</p><h4 id="输入-输出"><a href="#输入-输出" class="headerlink" title="输入/输出"></a>输入/输出</h4><p>I/O是计算机与外界交换信息的手段。向计算机提供输入或输出的设备称为外围设备。在典型的个人计算机上，外围设备包括键盘和鼠标等输入设备，以及显示器和打印机等输出设备。硬盘驱动器、软盘驱动器和光盘驱动器是输入和输出设备。计算机网络是I/O的另一种形式。I/O设备通常是具有自己的CPU和内存的复杂计算机。一个图形处理单元可能包含50台或更多的小型计算机，这些计算机执行显示三维图形所需的计算。现代桌面计算机包含许多小型计算机，这些计算机协助主CPU执行I/O。2016年的平板显示器包含其自己的计算机电路。</p><h4 id="多任务"><a href="#多任务" class="headerlink" title="多任务"></a>多任务</h4><p>虽然一台计算机可以被看作是运行一个存储在主存储器中的巨大程序，但在某些系统中，必须给出同时运行几个程序的外观。这是通过多任务处理来实现的，即让计算机在依次运行每个程序之间快速切换。实现这一点的一种方法是使用一种称为中断的特殊信号，这种信号可以周期性地使计算机停止执行原来的指令，而代之以做其他事情。通过记住它在中断前的执行位置，计算机可以稍后返回到该任务。如果多个程序同时运行。然后，中断生成器可能每秒导致数百个中断，每次都会导致程序切换。由于现代计算机通常执行指令的速度比人类的感知快几个数量级，因此许多程序似乎同时运行，即使在任何给定的时刻只有一个程序在执行。这种多任务的方法有时被称为“分时”，因为每个程序依次被分配一个“时间片”。</p><p>在廉价计算机时代之前，多任务处理的主要用途是允许许多人共享同一台计算机。看起来，多任务处理会使一台计算机在几个程序之间切换，其运行速度与它正在运行的程序数量成正比，但大多数程序花费大量时间等待缓慢的输入/输出设备完成任务。如果程序正在等待用户单击鼠标或按键盘上的键，那么在等待的事件发生之前，它不会占用“时间片”。这为其他程序的执行腾出了时间，使许多程序可以同时运行，而不会造成不可接受的速度损失。</p><h4 id="多进程"><a href="#多进程" class="headerlink" title="多进程"></a>多进程</h4><p>一些计算机被设计成以多处理配置在多个CPU上分配它们的工作，这种技术曾经只用于大型和强大的计算机，如超级计算机、大型机和服务器。多处理器和多核（单个集成电路上有多个CPU）个人和笔记本电脑现在广泛使用，因此在低端市场上的应用也越来越多。</p><p>特别是超级计算机通常具有非常独特的体系结构，这与基本的存储程序体系结构和通用计算机有很大的不同。它们通常具有数千个CPU、定制的高速互连和专用的计算硬件。由于一次成功利用大部分可用资源所需的大规模项目组织，这种设计往往只对专门任务有用。超级计算机通常用于大规模模拟、图形绘制和密码学应用，以及其他所谓的“令人尴尬的并行”任务。</p><h3 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h3><p>软件是指计算机中没有实质形式的部分，如程序、数据、协议等。软件是计算机系统的一部分，它由编码信息或计算机指令组成，与系统所用的物理硬件不同。计算机软件包括计算机程序、库和相关的不可执行数据，如在线文档或数字媒体。它通常分为系统软件和应用软件，计算机硬件和软件相互需要，两者都不能单独实际使用。当软件存储在不易修改的硬件中时，例如IBM PC兼容计算机中的BIOS ROM，有时称为“固件”。</p><h4 id="语言"><a href="#语言" class="headerlink" title="语言"></a>语言</h4><p>有成千上万种不同的编程语言，有些是通用的，有些仅对高度专业化的应用程序有用。</p><h4 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h4><p>现代计算机区别于其他所有机器的决定性特征是它们可以被编程。也就是说，某些类型的指令（程序）可以给计算机，它将处理它们。基于冯·诺依曼体系结构的现代计算机通常使用命令式编程语言形式的机器代码。从实际意义上讲，计算机程序可能只是一些指令，也可能扩展到数百万条指令，例如用于文字处理器和Web浏览器的程序。一台典型的现代计算机每秒可以执行数十亿条指令（GigaFlops），在多年的运行中很少出错。由数百万条指令组成的大型计算机程序可能需要几年的时间来编写，而且由于任务的复杂性，几乎可以肯定包含错误。</p><p><strong>存储程序体系结构</strong></p><p>在大多数情况下，计算机指令很简单：将一个数字添加到另一个数字，将一些数据从一个位置移动到另一个位置，向某个外部设备发送消息等。这些指令从计算机内存中读取，通常按给定的顺序执行。但是，通常有专门的指令来告诉计算机在程序中向前或向后跳到其他地方，并从那里继续执行。这些被称为“跳转”指令（或分支）。此外，跳转指令可以有条件地执行，以便根据之前的某些计算结果或某些外部事件使用不同的指令序列。许多计算机通过提供一种跳转类型来直接支持子例程，这种跳转类型“记住”它所跳转的位置，并提供另一条返回该跳转指令后面的指令的指令。</p><p>程序执行可以比作阅读一本书。虽然一个人通常会按顺序阅读每一个单词和每一行，但有时他们可能会跳回到文本中较早的位置，或者跳过不感兴趣的部分。类似地，计算机有时会反复地返回并重复程序的某些部分中的指令，直到满足某些内部条件为止。这被称为程序中的控制流，它允许计算机在没有人为干预的情况下重复执行任务。</p><p>相比之下，使用袖珍计算器的人可以执行基本的算术运算，例如只需按几下按钮就可以添加两个数字。但要把1到1000之间的所有数字加起来，需要数千次按键和大量时间，几乎肯定会出错。另一方面，一台计算机可以通过编程来实现这一点，只需几个简单的指令。以下示例是用MIPS汇编语言编写的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">begin:</span><br><span class="line">addi $8, $0, 0           # initialize sum to 0</span><br><span class="line">addi $9, $0, 1           # set first number to add = 1</span><br><span class="line">loop:</span><br><span class="line">slti $10, $9, 1000       # check if the number is less than 1000</span><br><span class="line">beq $10, $0, finish      # if odd number is greater than n then exit</span><br><span class="line">add $8, $8, $9           # update sum</span><br><span class="line">addi $9, $9, 1           # get next number</span><br><span class="line">j loop                   # repeat the summing process</span><br><span class="line">finish:</span><br><span class="line">add $2, $8, $0           # put sum in output register</span><br></pre></td></tr></table></figure><p>一旦被告知运行此程序，计算机将执行重复的加法任务，而无需进一步的人工干预。它几乎永远不会犯错误，现代PC可以在几秒钟内完成这项任务。</p><p><strong>机器代码</strong></p><p>在大多数计算机中，单个指令存储为机器代码，每个指令都有一个唯一的编号（简称操作码或操作码）。将两个数字相加的命令将有一个操作码；将它们相乘的命令将有不同的操作码，依此类推。最简单的计算机可以执行任意一种不同的指令；更复杂的计算机有几百种可供选择，每一种都有一个独特的数字代码。由于计算机的存储器能够存储数字，所以它也可以存储指令代码。这导致了一个重要的事实，即整个程序（只是这些指令的列表）可以表示为数字列表，并且可以在计算机内部以与数字数据相同的方式进行操作。将程序与它们操作的数据一起存储在计算机内存中的基本概念是冯·诺依曼（von neumann）体系结构（或存储程序[需要引用]）的关键。在某些情况下，计算机可能将其程序的一部分或全部存储在内存中，而该内存与计算机运行的数据是分开的。这被称为哈佛架构。现代冯·诺依曼计算机在其设计中显示出哈佛架构的一些特征，例如在CPU缓存中。</p><p>虽然可以将计算机程序编写成长的数字列表（机器语言），而且这种技术在许多早期计算机中都使用过，但在实践中，特别是在复杂的程序中，这种方法极其繁琐，而且可能出错。相反，每个基本指令都可以有一个简短的名称，表示它的功能，并且易于记忆，这是一种助记符，如add、sub、mult或jump。这些记忆法统称为计算机的汇编语言。把用汇编语言编写的程序转换成计算机能真正理解的东西（机器语言）通常是由一个叫做汇编程序的计算机程序完成的。</p><p><strong>程序语言</strong></p><p>编程语言提供了各种指定计算机运行程序的方法。与自然语言不同，编程语言的设计不允许有歧义，而且要简洁。它们是纯书面语言，通常难以大声朗读。它们通常要么在运行前由编译器或汇编程序翻译成机器代码，要么在运行时由解释器直接翻译。有时程序是通过两种技术的混合方法来执行的。</p><p><strong>低级语言</strong></p><p>机器语言和表示它们的汇编语言（统称为低级编程语言）对于特定类型的计算机来说往往是唯一的。例如，ARM体系结构的计算机（如在智能手机或手持电子游戏中找到的计算机）无法理解在PC中的x86 CPU的机器语言。</p><p><strong>高级语言</strong></p><p>虽然比机器语言容易得多，但用汇编语言编写长程序通常很困难，而且也容易出错。因此，大多数实用程序都是用更抽象的高级编程语言编写的，这些语言能够更方便地表达程序员的需求（从而有助于减少程序员的错误）。高级语言通常使用另一个称为编译器的计算机程序“编译”成机器语言（有时编译成汇编语言，然后再编译成机器语言）。高级语言与目标计算机的工作关系比汇编语言小，与probl的语言和结构关系更大。最终程序要解决的问题。因此，通常可以使用不同的编译器将同一高级语言程序翻译成许多不同类型计算机的机器语言。这是使视频游戏等软件可用于不同计算机架构（如个人计算机和各种视频游戏控制台）的方法的一部分。</p><p><strong>程序设计</strong></p><p>小程序的程序设计相对简单，包括分析问题、收集输入、使用语言中的程序结构、设计或使用既定的程序和算法、为输出设备提供数据以及解决问题（如适用）。随着问题越来越大、越来越复杂，会遇到诸如子程序、模块、正式文档以及诸如面向对象编程之类的新范例等特性。涉及数千行代码及更多代码的大型程序需要正式的软件方法。开发大型软件系统的任务是一个重大的智力挑战。在可预测的时间表和预算内生产具有可接受的高可靠性的软件历来都是困难的；软件工程的学术和专业学科专门关注这一挑战。</p><p><strong>漏洞</strong></p><p>计算机程序中的错误称为“错误”。它们可能是良性的，不会影响程序的有效性，或者只有细微的影响。但在某些情况下，它们可能会导致程序或整个系统“挂起”，对输入（如鼠标单击或按键）失去响应，完全失败或崩溃。否则，善意的bug有时可能会被肆无忌惮的用户利用，这些用户编写的代码旨在利用bug并破坏计算机的正常执行。错误通常不是计算机的故障。由于计算机只执行它们所发出的指令，错误几乎总是由程序错误或程序设计中的疏忽造成的。美国计算机科学家、第一个编译器的开发人员格蕾丝·霍珀上将被认为是在发现死蛀虫后首次在计算中使用了“错误”一词。1947年9月，在哈佛Mark II计算机上短路继电器。</p><h3 id="网络和因特网"><a href="#网络和因特网" class="headerlink" title="网络和因特网"></a>网络和因特网</h3><p>自20世纪50年代以来，计算机被用来协调多个地点之间的信息。美国军方的SAGE系统是这种系统的第一个大规模例子，它导致了许多特殊用途的商业系统，如SABRE在20世纪70年代，美国研究机构的计算机工程师开始n使用电信技术将他们的计算机连接在一起。这项工作是由ARPA（现在的DARPA）资助的，由此产生的计算机网络被称为“ARPANET”。</p><p>随着时间的推移，这个网络扩展到学术和军事机构之外，并被称为互联网。网络的出现涉及到对计算机本质和边界的重新定义。修改了计算机操作系统和应用程序，使其能够定义和访问网络上其他计算机的资源，如外围设备、存储信息等，作为单个计算机资源的扩展。最初，这些设施主要是为在高科技环境中工作的人们提供的，但在20世纪90年代，电子邮件和万维网等应用程序的普及，加上以太网和ADSL等廉价、快速的网络技术的发展，使得计算机网络几乎无处不在。事实上，联网的计算机数量正在显著增长。有很大一部分的个人电脑定期连接到互联网，以进行通信和接收信息。”无线网络，通常利用移动电话网络，意味着网络越来越普遍，甚至在移动计算环境中。</p><h3 id="非常规计算机"><a href="#非常规计算机" class="headerlink" title="非常规计算机"></a>非常规计算机</h3><p>计算机不需要是电子的，甚至不需要有处理器，内存，甚至硬盘。虽然“计算机”一词的流行用法是个人电子计算机的同义词，但计算机的现代定义是字面上的：“计算的一种设备，尤其是可编程的（通常）电子计算机，它执行高速数学或逻辑操作，或组装、存储、关联或以其他方式处理。信息。“任何处理信息的设备都可以作为计算机，特别是当处理是有目的的时。</p><h3 id="趋势"><a href="#趋势" class="headerlink" title="趋势"></a>趋势</h3><p>人们正在积极研究利用许多有前途的新型技术制造计算机，如光学计算机、DNA计算机、神经计算机和量子计算机。大多数计算机都是通用的，能够计算任何可计算的函数，并且只受其内存容量和运行速度的限制。然而，不同的计算机设计可以为特定的问题提供非常不同的性能；例如，量子计算机可以很快地（通过量子因子分解）破坏一些现代加密算法。</p><h4 id="计算机体系结构"><a href="#计算机体系结构" class="headerlink" title="计算机体系结构"></a>计算机体系结构</h4><p>有多种类型的计算机体系结构：</p><ul><li>量子计算机与化学计算机</li><li>标量处理器与矢量处理器</li><li>非统一内存访问（NUMA）计算机</li><li>寄存器机器与堆栈机器</li><li>哈佛架构与冯诺依曼架构</li><li>蜂窝结构</li></ul><p>在所有这些抽象机器中，量子计算机最有希望使计算发生革命性的变化。逻辑门是一种常见的抽象，可以应用于上述大多数数字或模拟范式。存储和执行被称为程序的指令列表的能力使计算机非常通用，使之与计算器区别开来。丘奇-图灵理论是这种多功能性的数学表述：原则上，任何具有最小能力（图灵完成）的计算机都能够执行任何其他计算机可以执行的相同任务。因此，只要有足够的时间和存储容量，任何类型的计算机（上网本、超级计算机、细胞自动机等）都能够执行相同的计算任务。</p><h4 id="人工智能"><a href="#人工智能" class="headerlink" title="人工智能"></a>人工智能</h4><p>计算机将完全按照其编程的方式解决问题，而不考虑效率、替代解决方案、可能的快捷方式或代码中可能出现的错误。学习和适应的计算机程序是人工智能和机器学习新兴领域的一部分。基于人工智能的产品通常分为两大类：基于规则的系统和模式识别系统。基于规则的系统试图表示人类专家使用的规则，开发起来往往很昂贵。基于模式的系统使用有关问题的数据来生成结论。基于模式的系统包括语音识别、字体识别、翻译和在线营销的新兴领域。</p><h3 id="职业和组织"><a href="#职业和组织" class="headerlink" title="职业和组织"></a>职业和组织</h3><p>随着计算机的使用在全社会的普及，越来越多的职业涉及计算机。</p><table><thead><tr><th>领域</th><th style="text-align:left">方向</th></tr></thead><tbody><tr><td>硬件</td><td style="text-align:left">电气工程、电子工程、计算机工程、电信工程、光学工程、纳米工程</td></tr><tr><td>软件</td><td style="text-align:left">计算机科学、计算机工程、桌面出版、人机交互、信息技术、信息系统、计算科学、软件工程、视频游戏行业、网页设计</td></tr></tbody></table><p>计算机协同工作和交换信息的需求，催生了许多正规和非正式的标准组织、俱乐部和社会的需求。</p><table><thead><tr><th>机构类型</th><th>机构名称</th></tr></thead><tbody><tr><td>标准组</td><td>ANSI、IEC、IEEE、IETF、ISO、W3C标准</td></tr><tr><td>专业协会</td><td>ACM、AIS、IET、IFIP、BCS</td></tr><tr><td>免费/开源软件组</td><td>自由软件基金会，Mozilla基金会，Apache软件基金会</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;计算机是一种可以通过计算机编程指令自动执行算术或逻辑操作序列的机器。现代计算机有能力遵循被称为程序的广义操作集。这些程序使计算机能够执行非常广泛的任务。“完整”计算机，包括“完整”操作所需的硬件、操作系统（主软件）和外围设备，可以称为计算机系统。这个术语也可用于连接在一起并
      
    
    </summary>
    
    
      <category term="互联网" scheme="http://wangchengfei.info/tags/%E4%BA%92%E8%81%94%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>研发流程规范</title>
    <link href="http://wangchengfei.info/2019/04/30/%E7%A0%94%E5%8F%91%E6%B5%81%E7%A8%8B%E8%A7%84%E8%8C%83/"/>
    <id>http://wangchengfei.info/2019/04/30/研发流程规范/</id>
    <published>2019-04-30T06:52:35.000Z</published>
    <updated>2019-05-06T01:44:41.972Z</updated>
    
    <content type="html"><![CDATA[<p>如何把大象装进冰箱？</p><p>如何批量的把大象装进冰箱？</p><h3 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h3><p>任何目标的实现都有N多路径，那么当我们确定目标后，如何快速达成目标，除了目标拆解和关键点设置检查，规范的流程规范是保障我们目标和关键点顺利落地的保障工具。</p><p>在我们设定研发目标后，有哪些核心步骤，每个步骤有哪些问题及解决工具，标准化的流程和工具如何达成团队共识落地，以下为总结中见。</p><p>以下通过规范约束的形式，明确每个阶段需要关注的内容和落地的形式。</p><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><h4 id="需求管理"><a href="#需求管理" class="headerlink" title="需求管理"></a>需求管理</h4><p><strong>规范约束</strong></p><ul><li>统一存储和浏览空间。分散是丢失的开始。</li><li>统一设计格式和风格。差异化是增加理解成本的开始。</li><li>统一核心业务概念描述。业务沟通成本最高的地方就是理解不一致。</li><li>统一文档迭代meta数据。使用5W1H描述法。</li></ul><h4 id="迭代管理"><a href="#迭代管理" class="headerlink" title="迭代管理"></a>迭代管理</h4><p><strong>规范约束</strong></p><ul><li>需求划分方式：时间或功能。时间适用小团队迭代，分功能适合多团队、多系统迭代。</li><li>功能需求聚合到一个空间。理解需求有延续性，并方便维护。</li></ul><h4 id="bug管理"><a href="#bug管理" class="headerlink" title="bug管理"></a>bug管理</h4><p><strong>规范约束</strong></p><ul><li>bug也是需求的一部分。很多业务迭代后期无法解释是早期需求成为后期bug，而bug修改无文档可追溯。</li><li>bug需求需要补充或引用到功能需求下。改功能需要先理解原需求是什么后做优化修改。</li></ul><h3 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h3><h4 id="可维护性"><a href="#可维护性" class="headerlink" title="可维护性"></a>可维护性</h4><p><strong>规范约束</strong></p><ul><li>当行字符长度不超过80</li><li>单方法行数不超过80</li><li>见PSR1、PSR2</li></ul><h4 id="编码规范"><a href="#编码规范" class="headerlink" title="编码规范"></a>编码规范</h4><p><strong>规范约束</strong></p><ul><li>日志规范见PSR3、RFC5424</li><li>自动加载见PSR4</li><li>缓存见PSR6、RFC2119</li><li>接口规范见PSR7</li></ul><h4 id="重复检查"><a href="#重复检查" class="headerlink" title="重复检查"></a>重复检查</h4><p><strong>规范约束</strong></p><ul><li>每个模块使用的工具和基础类抽象到基础LIB库。</li><li>每个接口使用的工具和基础类抽象到模块基础LIB类。</li></ul><p><strong>检查工具</strong></p><ul><li>PHP-Parser。php静态代码分析工具。</li><li>PHPMD: Php mess detector。代码bug、冗余代码、烂代码、无用方法和参数检查</li><li>PHP dead code detector。检查冗余未使用代码。</li><li>PHP copy sniffer。冗余代码检查</li></ul><h4 id="本地测试"><a href="#本地测试" class="headerlink" title="本地测试"></a>本地测试</h4><p><strong>规范约束</strong></p><ul><li>基础库代码单测覆盖100%。</li><li>接口测试覆盖核心路径。</li><li>接口验证每个参数校验及返回值。</li></ul><h4 id="分支测试"><a href="#分支测试" class="headerlink" title="分支测试"></a>分支测试</h4><p><strong>规范约束</strong></p><ul><li>每个功能从界面触发回归测试。</li><li>整体单侧用例回归。</li></ul><h4 id="合并规范"><a href="#合并规范" class="headerlink" title="合并规范"></a>合并规范</h4><p><strong>规范约束</strong></p><ul><li>分支开发分支发布。避免主干顺路上线导致bug。</li><li>冲突需要沟通修改。避免影响已上线代码。</li></ul><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><h4 id="安全扫描"><a href="#安全扫描" class="headerlink" title="安全扫描"></a>安全扫描</h4><p><strong>规范约束</strong></p><ul><li>必须经过安全扫描后上线。</li></ul><p><strong>推荐工具</strong></p><ul><li>PHP marlware Finder</li></ul><h4 id="自动化回归测试"><a href="#自动化回归测试" class="headerlink" title="自动化回归测试"></a>自动化回归测试</h4><p><strong>规范约束</strong></p><ul><li>必须跑完并通过单侧后提交基础代码。</li><li>必须联调、验证、验收接口后提交合入代码。</li></ul><h4 id="测试用例管理"><a href="#测试用例管理" class="headerlink" title="测试用例管理"></a>测试用例管理</h4><p><strong>规范约束</strong></p><ul><li>所有测试用例统一设计规则。</li><li>所有测试用例统一管理。</li><li>所有测试用例支持分版本、分端设置测试集合。</li></ul><p><strong>推荐工具</strong></p><ul><li>FitNesse</li><li>qaManager</li></ul><h4 id="压力测试"><a href="#压力测试" class="headerlink" title="压力测试"></a>压力测试</h4><p><strong>规范约束</strong></p><ul><li>接口请求在压测满足要求后发起上线。</li></ul><p><strong>推荐工具</strong></p><ul><li>Jmeter</li><li>Postman</li></ul><h3 id="上线"><a href="#上线" class="headerlink" title="上线"></a>上线</h3><h4 id="包管理"><a href="#包管理" class="headerlink" title="包管理"></a>包管理</h4><p><strong>规范约束</strong></p><ul><li>所有代码通过tag包的方式发布上线。</li><li>发布包和QA测试通过包一致。</li></ul><h4 id="分级部署"><a href="#分级部署" class="headerlink" title="分级部署"></a>分级部署</h4><p><strong>规范约束</strong></p><ul><li>发布由OP发起。</li><li>必须预览机验证通过后进行下一步。</li><li>任何阶段发现问题，第一时间回滚。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;如何把大象装进冰箱？&lt;/p&gt;
&lt;p&gt;如何批量的把大象装进冰箱？&lt;/p&gt;
&lt;h3 id=&quot;缘起&quot;&gt;&lt;a href=&quot;#缘起&quot; class=&quot;headerlink&quot; title=&quot;缘起&quot;&gt;&lt;/a&gt;缘起&lt;/h3&gt;&lt;p&gt;任何目标的实现都有N多路径，那么当我们确定目标后，如何快速达成
      
    
    </summary>
    
    
      <category term="管理" scheme="http://wangchengfei.info/tags/%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>有限状态机</title>
    <link href="http://wangchengfei.info/2019/04/28/%E6%9C%89%E9%99%90%E7%8A%B6%E6%80%81%E6%9C%BA/"/>
    <id>http://wangchengfei.info/2019/04/28/有限状态机/</id>
    <published>2019-04-28T08:01:20.000Z</published>
    <updated>2019-04-28T10:02:45.473Z</updated>
    
    <content type="html"><![CDATA[<p>有限状态机（FSM:<strong>finite-state machine</strong> ）或有限状态机（FSA:<strong>finite-state automaton</strong>）、有限自动机或简单的状态机是计算的数学模型。它是一个抽象的机器，在任何给定的时间内都可以处于有限个状态中的一个。FSM可以根据一些外部输入从一个状态更改为另一个状态；从一个状态更改为另一个状态称为转换。FSM由其状态列表、初始状态和每个转换的条件定义。有限状态机有两种类型——确定性有限状态机和非确定性有限状态机。确定性有限状态机可以构造为任何非确定性状态机。</p><p>现代社会的许多装置都可以观察到状态机的行为，这些装置根据一系列事件来执行预定的动作序列。简单的例子是自动售货机，当硬币的正确组合存放时，自动售货机分配产品；电梯，其停止顺序由乘客要求的楼层决定；交通灯，当汽车等待时改变顺序；组合锁，需要按正确的顺序输入组合号。</p><p>有限状态机的计算能力比其他一些计算模型（如图灵机）要小，计算能力的区别意味着图灵机可以完成但FSM不能完成的计算任务。这是因为FSM的内存受其状态数的限制。FSMS是在更一般的自动机理论领域进行研究的。</p><h3 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h3><p>一个可以用状态机模拟的简单机械装置的例子是旋转栅门。旋转栅门用于控制地铁和游乐园游乐设施的进出，它是一个在腰部高度有三个旋转臂的门，一个在入口通道上。最初被锁住，堵住入口，防止顾客通过。把硬币或代币放在旋转栅门上的一个槽中，就能打开门把手，让一个顾客可以通过。客户通过后，手臂再次锁定，直到插入另一枚硬币。</p><p>作为状态机，旋转栅门有两种可能的状态：锁定和解锁。有两种可能的输入影响其状态：将硬币放入槽（硬币）和推动臂（推动）。在锁定状态下，推动臂没有任何作用；无论给多少次输入推动，它都保持锁定状态。把硬币放进去——也就是给机器一个硬币输入——将状态从锁定转换为解锁。在解锁状态下，放入额外的硬币没有效果；即，提供额外的硬币输入不会改变状态。但是，客户通过手臂推动，提供推动输入，将状态切换回锁定状态。</p><p>转门状态机可以用状态转换表表示，显示每个可能的状态、它们之间的转换（基于给机器的输入）和每个输入产生的输出：</p><table><thead><tr><th style="text-align:center">Current State</th><th style="text-align:center">Input</th><th style="text-align:center">Next State</th><th style="text-align:center">Output</th></tr></thead><tbody><tr><td style="text-align:center">Locked</td><td style="text-align:center">coin</td><td style="text-align:center">Unlocked</td><td style="text-align:center">Unlocks the turnstile so that the customer can push through.</td></tr><tr><td style="text-align:center">push</td><td style="text-align:center">Locked</td><td style="text-align:center">None</td><td style="text-align:center">None</td></tr><tr><td style="text-align:center">Unlocked</td><td style="text-align:center">coin</td><td style="text-align:center">Unlocked</td><td style="text-align:center">None</td></tr><tr><td style="text-align:center">push</td><td style="text-align:center">Locked</td><td style="text-align:center">When the customer has pushed through, locks the turnstile.</td><td style="text-align:center">None</td></tr></tbody></table><p>转门状态机也可以用一个称为状态图的有向图来表示。每个状态都由一个节点（圆）表示。边（箭头）显示从一种状态到另一种状态的转换。每个箭头都标有触发转换的输入。不引起状态变化的输入（如处于解锁状态的硬币输入）由返回原始状态的圆形箭头表示。从黑点进入锁定节点的箭头表示它是初始状态。</p><h3 id="概念和术语"><a href="#概念和术语" class="headerlink" title="概念和术语"></a>概念和术语</h3><p>状态是对正在等待执行转换的系统状态的描述。转换是在满足条件或接收到事件时要执行的一组操作。例如，当使用音频系统收听收音机时（系统处于“收音机”状态），接收到“下一个”刺激会导致移动到下一个电台。当系统处于“cd”状态时，“next”刺激会导致移动到下一个轨道。相同的刺激根据当前状态触发不同的动作。</p><p>在某些有限状态机表示中，也可以将动作与状态关联：</p><ul><li><p>进入动作：进入状态时执行。</p></li><li><p>退出操作：退出状态时执行。</p></li></ul><h3 id="表示"><a href="#表示" class="headerlink" title="表示"></a>表示</h3><p>状态图是计算机科学和相关领域用来描述系统行为的一种图。状态图要求所描述的系统由有限数量的状态组成；有时确实如此，而有时这是一个合理的抽象。存在多种形式的状态图，它们略有不同，语义也有所不同。</p><h4 id="状态-事件表"><a href="#状态-事件表" class="headerlink" title="状态/事件表"></a>状态/事件表</h4><p>使用了几种状态转换表类型。最常见的表示形式如下：当前状态（例如B）和输入（例如Y）的组合显示下一个状态（例如C）。完整操作的信息没有直接在表中描述，只能使用脚注添加。包含完整动作信息的FSM定义可以使用状态表（另请参见虚拟有限状态机）。</p><table><thead><tr><th style="text-align:center">Current stateInput</th><th style="text-align:center">State A</th><th style="text-align:center">State B</th><th style="text-align:center">State C</th></tr></thead><tbody><tr><td style="text-align:center">Input X</td><td style="text-align:center">…</td><td style="text-align:center">…</td><td style="text-align:center">…</td></tr><tr><td style="text-align:center">Input Y</td><td style="text-align:center">…</td><td style="text-align:center">State C</td><td style="text-align:center">…</td></tr><tr><td style="text-align:center">Input Z</td><td style="text-align:center">…</td><td style="text-align:center">…</td><td style="text-align:center">…</td></tr></tbody></table><h4 id="UML状态机"><a href="#UML状态机" class="headerlink" title="UML状态机"></a>UML状态机</h4><p>统一建模语言有一个描述状态机的符号。UML状态机克服了传统有限状态机的局限性，同时保留了它们的主要优点。UML状态机引入了层次嵌套状态和正交区域的新概念，同时扩展了操作的概念。UML状态机具有Mealy机器和Moore机器的特性。它们支持依赖于系统状态和触发事件的操作，如在Mealy机器中，以及与状态而非转换相关的进入和退出操作，如在Moore机器中。</p><h4 id="SDL状态机"><a href="#SDL状态机" class="headerlink" title="SDL状态机"></a>SDL状态机</h4><p>规范和描述语言是ITU的一个标准，其中包括描述转换中动作的图形符号：</p><ul><li>发送事件</li><li>接收一个事件</li><li>启动计时器</li><li>取消计时器</li><li>启动另一个并发状态机</li><li>决策</li></ul><p>SDL嵌入称为“抽象数据类型”的基本数据类型、操作语言和执行语义，以便使有限状态机可执行。</p><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><p>除了在这里介绍的系统建模中的应用之外，有限状态机在许多不同的领域中都具有重要意义，包括电气工程、语言学、计算机科学、哲学、生物学、数学和逻辑。有限状态机是在自动机理论和计算理论中研究的一类自动机。在计算机科学中，有限状态机广泛应用于应用行为建模、硬件数字系统设计、软件工程、编译器、网络协议以及计算和语言研究。</p><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><p>有限状态机可以细分为传感器、接收器、分类器和序列器。</p><h4 id="接受者（识别者）"><a href="#接受者（识别者）" class="headerlink" title="接受者（识别者）"></a>接受者（识别者）</h4><p>接收器（也称为识别器和序列检测器）产生二进制输出，指示是否接受接收的输入。FSM的每个状态要么是“接受”，要么是“不接受”。收到所有输入后，如果当前状态为接受状态，则接受输入；否则拒绝输入。通常，输入是一系列符号（字符）；不使用动作。</p><p>一组（可能是无限的）符号序列，又名。形式语言，如果有某个有限状态机恰好接受该集合，则称为常规语言。例如，偶数为零的二进制字符串集是一种常规语言，而长度为质数的所有字符串集不是。</p><p>机器也可以被描述为定义一种语言，该语言包含机器接受的每个字符串，但不包含被拒绝的字符串；该语言被机器“接受”。根据定义，FSM接受的语言是常规语言——如果有一些FSM接受，那么语言就是常规语言。</p><p>确定给定的有限状态接受者所接受的语言的问题是代数路径问题本身的一个实例，它将最短路径问题推广到具有由（任意）半环元素加权的边的图上。</p><p>开始状态也可以是接受状态，在这种情况下，自动机接受空字符串。</p><h4 id="分类器"><a href="#分类器" class="headerlink" title="分类器"></a>分类器</h4><p>分类器是有限状态机的一种推广，它类似于接受者，在终止时生成单个输出，但有两个以上的终止状态。</p><h4 id="换能器"><a href="#换能器" class="headerlink" title="换能器"></a>换能器</h4><p>传感器根据给定的输入或使用动作的状态生成输出。它们用于控制应用和计算语言学领域。</p><p>在控制应用程序中，可区分两种类型：</p><p><strong>摩尔机</strong></p><p>FSM仅使用入口操作，即输出仅取决于状态。摩尔模型的优点是简化了行为。考虑一个电梯门。状态机识别两个命令：“命令打开”和“命令关闭”，触发状态更改。进入动作（E:）在“打开”状态下启动电机打开车门，在“关闭”状态下启动电机在另一方向关闭门。状态“打开”和“关闭”在完全打开或关闭时停止电机。它们向外部世界（例如，向其他电梯）发出“门是开的”或“门是关的”的信号。</p><p><strong>梅利机</strong></p><p>FSM还使用输入动作，即输出取决于输入和状态。使用有限的FSM通常会导致状态数量的减少。示例显示了一个实施与摩尔示例中相同行为的简单FSM（该行为取决于实施的FSM执行模型，并且将起作用，例如，对于虚拟FSM，但对于事件驱动的FSM不起作用）。有两个输入动作（i:）：“如果命令关闭到达，启动电机关闭车门”和“如果命令打开到达，启动电机向另一个方向打开车门”。未显示“打开”和“关闭”中间状态。</p><h4 id="序列器"><a href="#序列器" class="headerlink" title="序列器"></a>序列器</h4><p>序列器或发生器是具有单个字母输入字母表的接受器和传感器类型的一个子类。它们只产生一个序列，可以看作是接受器或传感器输出的输出序列。</p><h4 id="决定论"><a href="#决定论" class="headerlink" title="决定论"></a>决定论</h4><p>另一个区别是确定性（dfa）和非确定性（nfa，gnfa）自动机。在确定性自动机中，每个状态对于每个可能的输入只有一个转换。在非确定性自动机中，输入可以导致给定状态的一个、多个或没有转换。Powerset构造算法可以将任何非确定性自动机转换为具有相同功能的（通常更复杂）确定性自动机。</p><p>只有一种状态的有限状态机称为“组合FSM”。它只允许在转换到状态时执行操作。这个概念在需要许多有限状态机一起工作的情况下是有用的，并且当把一个纯粹的组合部分看作一种适合设计工具的FSM形式时也是很方便的。</p><h3 id="替代语义学"><a href="#替代语义学" class="headerlink" title="替代语义学"></a>替代语义学</h3><p>还有其他一些语义可以用来表示状态机。例如，有一些用于为嵌入式控制器建模和设计逻辑的工具。它们将分层状态机（通常具有多个当前状态）、流程图和真值表组合成一种语言，从而形成不同的形式主义和语义集。这些图，如Harel的原始状态机[12]支持层次嵌套状态、正交区域、状态操作和转换操作。</p><h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><p>优化一个FSM意味着找到一个具有执行相同功能的最小状态数的机器。最快的已知算法是Hopcroft最小化算法其他技术包括使用蕴涵表或摩尔约简过程。此外，非循环FSA可以在线性时间内最小化。</p><h3 id="实施"><a href="#实施" class="headerlink" title="实施"></a>实施</h3><h4 id="硬件应用"><a href="#硬件应用" class="headerlink" title="硬件应用"></a>硬件应用</h4><p>在数字电路中，可以使用可编程逻辑器件、可编程逻辑控制器、逻辑门和触发器或继电器来构建FSM。更具体地说，硬件实现需要一个寄存器来存储状态变量，一个确定状态转换的组合逻辑块，以及第二个确定FSM输出的组合逻辑块。典型的硬件实现之一是理查兹控制器。</p><p>在Medvedev机器中，输出直接连接到状态触发器，以最小化触发器和输出之间的时间延迟。</p><p>对于低功耗状态机，可以通过状态编码进行优化，以最小化功耗。</p><h4 id="软件应用程序"><a href="#软件应用程序" class="headerlink" title="软件应用程序"></a>软件应用程序</h4><p>以下概念通常用于使用有限状态机构建软件应用程序：</p><ul><li>基于自动机的程序设计</li><li>事件驱动有限状态机</li><li>虚拟有限状态机</li><li>状态设计模式</li></ul><h4 id="有限状态机和编译器"><a href="#有限状态机和编译器" class="headerlink" title="有限状态机和编译器"></a>有限状态机和编译器</h4><p>有限自动机常用于编程语言编译器的前端。这样的前端可能包含几个有限状态机，它们实现词汇分析器和语法分析器。从一系列字符开始，词汇分析器构建一系列语言标记（如保留字、文本和标识符），解析器从中构建语法树。词汇分析器和解析器处理编程语言语法的常规部分和上下文无关部分。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;有限状态机（FSM:&lt;strong&gt;finite-state machine&lt;/strong&gt; ）或有限状态机（FSA:&lt;strong&gt;finite-state automaton&lt;/strong&gt;）、有限自动机或简单的状态机是计算的数学模型。它是一个抽象的机器，在任何给定
      
    
    </summary>
    
    
      <category term="架构" scheme="http://wangchengfei.info/tags/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>算法</title>
    <link href="http://wangchengfei.info/2019/04/28/%E7%AE%97%E6%B3%95/"/>
    <id>http://wangchengfei.info/2019/04/28/算法/</id>
    <published>2019-04-28T05:45:57.000Z</published>
    <updated>2019-04-28T08:01:23.718Z</updated>
    
    <content type="html"><![CDATA[<p>在数学和计算机科学中，算法是解决一类问题的明确说明。算法可以执行计算、数据处理、自动推理和其他任务。</p><p>作为一种有效的方法，一种算法可以在有限的空间和时间内，用一种定义良好的形式语言表示，用于计算一个函数从初始状态和初始输入（可能为空）开始，指令描述了一种计算，当执行时，通过有限个定义进行计算，最终产生“输出”，并最终在结束状态终止。从一个状态到下一个状态的转换不一定是确定性的；一些被称为随机化算法的算法结合了随机输入。</p><p>算法的概念已经存在了几个世纪。希腊数学家使用埃拉托斯滕斯筛中的算法来寻找素数，使用欧几里得算法来寻找两个数的最大公约数。</p><p>单词algorithm本身源自9世纪的数学家。部分形式化成为现代算法的概念始于试图解决由大卫希尔伯特在1928年提出的Entscheidungsproblem（决策问题）。后来的形式化是试图定义“有效的可计算性”或“有效的方法”。这些形式化包括1930、1934和1935年的G_del–Herbrand–Kleene递归函数、1936年的Alonzo Church的lambda微积分、1936年的Emil Post公式1以及1936-37和1939年的Alan Turing机器。</p><h3 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h3><p>“算法”一词的词源于将穆罕默德伊本穆萨的名字拉丁化，这是到Algorismus的第一步，他是波斯数学家、天文学家、地理学家和学者。</p><p>大约825年，al-khwarizmi写了一篇关于印度教-阿拉伯数字系统的阿拉伯语论文，在12世纪被翻译成拉丁语，标题为algoritmi de numero indorum。这个标题的意思是“印地安人的数字上的算法”，其中“算法”是翻译al-khwarizmi名字的拉丁化。选择他的名字，简单的意思是“十进制数字系统”。15世纪，在希腊语单词“算术”的影响下，拉丁语单词改为algorithmus，相应的英语术语“算法”在17世纪首次得到证实；19世纪引入了现代意义。</p><p>在英语中，它最初在1230年被使用，然后在1391年被使用。英语采用了法语术语，但直到19世纪末，“算法”才有了现代英语的含义。</p><p>这个词的另一个早期用法是1240年，在亚历山大德维尔迪欧撰写的名为《卡门·德阿尔戈里斯莫》的手册中。由此开始：</p><blockquote><p>算法主义是目前我们使用印度数字2乘以5的艺术。</p></blockquote><p>这首诗有几百行长，总结了印度骰子，塔利布斯印度语，或印度数字的新风格计算的艺术。</p><h3 id="非正式定义"><a href="#非正式定义" class="headerlink" title="非正式定义"></a>非正式定义</h3><p>非正式的定义可以是“一组精确定义操作序列的规则”。包括所有计算机程序，包括不执行数值计算的程序。通常，程序只有在最终停止时才是一种算法。</p><p>一个典型的算法例子是欧几里得算法，用于确定两个整数的最大公因数；后面的章节例子描述了这个算法（还有其他的例子）。</p><p>Boolos，Jeffrey&amp;1974，1999在以下引文中提供了该词的非正式含义：</p><blockquote><p>没有人能写得足够快、足够长或足够小†（†“越来越小，没有限制……你应该试着写在分子、原子、电子上”），列出一个可枚举的无限集合的所有成员，用一些符号一个接一个地写下他们的名字。但是人类可以做同样有用的事情，在某些可枚举的无限集合的情况下：他们可以给出明确的指令来确定集合的第n个成员，对于任意有限的n。这些指令要非常明确地给出，在某种形式下，它们可以被一台计算机跟随，或者由一个能够驾驶汽车的人跟随。只对符号进行非常基本的运算。</p></blockquote><p>“可枚举无限集”是其元素可以与整数一一对应的集合。因此，Boolos和Jeffrey说，一个算法暗示了一个过程的指令，该过程从一个或多个任意的“输入”整数“创建”输出整数，理论上，这些整数可以任意大。因此，一个算法可以是一个代数方程，例如y=m+n——两个任意的“输入变量”m和n，它们产生一个输出y。但是，不同作者试图定义这个概念，表明这个词的含义远不止这个，它的顺序是（例如加法）：</p><blockquote><p>精确的指令（用“计算机”所理解的语言表示）。对于一个快速、高效、良好的过程，该过程规定了“计算机”的“移动”（机器或人，具有必要的内部信息和能力）。查找、解码，然后处理任意输入整数/符号m和n、符号+和=…以及“有效地”在“合理的”时间内，在指定的地点，以指定的格式，产生个整数y。</p></blockquote><p>算法的概念也被用来定义可判定性的概念。这个概念对于解释正式系统是如何从一组小的公理和规则开始形成的至关重要。在逻辑上，一个算法需要完成的时间是无法测量的，因为它显然与我们习惯的物理维度无关。由于这些不确定性，即正在进行的工作的特征，导致算法定义不可用，既适合具体（在某种意义上）又适合术语的抽象用法。</p><h3 id="形式化"><a href="#形式化" class="headerlink" title="形式化"></a>形式化</h3><p>算法对于计算机处理数据的方式至关重要。许多计算机程序都包含详细说明计算机执行特定任务（按特定顺序）应执行的特定指令的算法，例如计算员工工资或打印学生报告卡。因此，一个算法可以被认为是任何可以被图灵完整系统模拟的操作序列。主张这篇论文的作者包括明斯基（1967年）、萨维奇（1987年）和古列维奇（2000年）：</p><blockquote><p>明斯基：“但我们也会保持，图灵……任何可以“自然”被称为有效的过程，实际上都可以通过（简单的）机器来实现。虽然这看起来很极端，但争论…对它有利是很难反驳的。</p></blockquote><blockquote><p>古列维奇：“…图灵支持他的论文的非正式论点证明了一个更强有力的论点：每种算法都可以被图灵机器模拟……根据Savage，算法是由图灵机定义的计算过程。</p></blockquote><p>通常，当算法与处理信息相关联时，可以从输入源读取数据，写入输出设备，并存储数据以进行进一步处理。存储的数据被视为执行算法的实体的内部状态的一部分。实际上，状态存储在一个或多个数据结构中。</p><p>对于某些这样的计算过程，必须严格定义算法：以它在所有可能出现的情况下应用的方式指定。也就是说，任何有条件的步骤都必须系统地逐个处理；每种情况的标准必须是明确的（并且是可计算的）。</p><p>由于算法是精确步骤的精确列表，因此计算顺序对算法的运行始终至关重要。通常假定指令被明确地列出，并且被描述为“从上到下”的开始，这是一种更正式地由控制流描述的思想。</p><p>到目前为止，对算法形式化的讨论假定了命令式编程的前提。这是最常见的概念，它试图用离散的“机械”的方式来描述一个任务。对于这种形式化算法的概念来说，唯一的一点就是赋值操作，即设置变量的值。它源于“记忆”作为草稿的直觉。下面有这样一个例子。</p><p>有关构成算法的其他概念，请参阅函数编程和逻辑编程。</p><h4 id="表示算法"><a href="#表示算法" class="headerlink" title="表示算法"></a>表示算法</h4><p>算法可以用多种符号表示，包括自然语言、伪代码、流程图、Drakon图、编程语言或控制表（由译员处理）。算法的自然语言表达往往是冗长和模棱两可的，很少用于复杂或技术算法。伪代码、流程图、drakon图和控制表是表示算法的结构化方法，避免了自然语言语句中常见的许多不明确之处。编程语言主要用于以计算机可以执行的形式表示算法，但通常用作定义或记录算法的方法。</p><p>有各种各样的表示可能，人们可以将给定的图灵机程序表示为一系列机器表（更多见有限状态机、状态转换表和控制表）、流程图和drakon图（更多见状态图）或称为“q集”的基本机器代码或汇编代码的形式。</p><p>算法的表示可分为图灵机器描述的三个可接受级别：</p><p>高级描述</p><p>​    “忽略实现细节。在这个层次上，我们不需要提及机器如何管理其磁带或磁头。”</p><p>实现描述</p><p>​    “用于定义图灵机使用其头部的方式以及在磁带上存储数据的方式。在这个层次上，我们不提供状态或过渡函数的细节。”</p><p>正式描述</p><p>​    最详细的“最低级别”给出了图灵机的“状态表”。</p><p>有关所有三个级别中描述的简单算法“添加m+n”的示例，请参见算法示例。</p><h3 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h3><p>算法设计是指求解问题的一种方法或数学过程以及工程算法。算法的设计是运筹学许多解理论的一部分，如动态规划、分治等。设计和实现算法设计的技术也称为算法设计模式，例如模板方法模式和装饰器模式。</p><p>算法设计的一个最重要的方面是创建一个具有高效运行时的算法，也称为大O。</p><p>算法开发的典型步骤：</p><ol><li>问题定义</li><li>模型的开发</li><li>算法说明</li><li>设计算法</li><li>检查算法的正确性</li><li>算法分析</li><li>算法的实现</li><li>程序测试</li><li>文件准备</li></ol><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>大多数算法都是作为计算机程序来实现的。然而，算法也可以通过其他方式实现，例如在生物神经网络（例如，人脑实现算法或昆虫寻找食物）、电路或机械装置中。</p><h3 id="计算机算法"><a href="#计算机算法" class="headerlink" title="计算机算法"></a>计算机算法</h3><p>在计算机系统中，算法基本上是软件开发人员在软件中编写的逻辑实例，对于预期的“目标”计算机从给定的（可能为空）输入产生输出是有效的。即使是在旧硬件中运行的优化算法，也会比在更高效的硬件中运行的非最优（时间复杂度更高）算法产生更快的结果；这就是为什么算法（如计算机硬件）被视为技术的原因。</p><p>“优雅”（紧凑）程序，“良好”（快速）程序：在克努斯非正式地出现“简单和优雅”的概念，如此：</p><blockquote><p>Knuth：“……我们需要一些定义松散的美学意义上的好算法。一个标准…是执行算法所用的时间长度…其他标准包括算法对计算机的适应性、简单性和优雅性等。</p></blockquote><blockquote><p>Chaitin：“……一个程序是“优雅的”，我的意思是它是产生输出的最小可能的程序。</p></blockquote><p>在他的定义前加了一句话：“我将向你展示，你无法证明一个程序是‘优雅的’”——这样的证明可以解决停顿问题（同上）。</p><p>算法与可由算法计算的函数：对于给定的函数，可能存在多个算法。这是真的，即使没有扩展可供程序员使用的指令集。罗杰斯观察到“这是…重要的是要区分算法的概念，即过程和可由算法计算的函数的概念，即由过程生成的映射。同一个函数可能有几个不同的算法。</p><p>不幸的是，在好（速度）和优雅（紧凑）之间可能存在一种权衡——一个优雅的程序可能需要更多的步骤来完成计算，而不是一个不那么优雅的程序。下面是一个使用欧几里得算法的例子。</p><p>计算模型：计算机是一种受限制的机器，是一种盲目遵循其指令的“离散确定性机械装置”。不可区分的计数器代理和相对于代理的能力有效的指令列表。</p><p>明斯基在他的“非常简单的可计算性基础”中描述了兰贝克的“算盘”模型的一个更为契合的变体。除了停止之外，明斯基的机器还包括三种分配操作：零（例如，被0:L←0替换的位置的内容）、继承者（例如，L←L+1）和减量（例如，L←L−1）。程序员很少需要用如此有限的指令集编写“代码”。但明斯基（和梅尔扎克和兰贝克一样）表明，他的机器只有四种基本类型的指令：条件goto、无条件goto、分配/替换/替换和停止。</p><p>模拟算法：计算机（Computor）语言：Knuth建议读者“学习算法的最佳方法是尝试它”。…立即拿笔和纸做一个例子，但模拟或执行真实的东西呢？程序员必须将算法翻译成模拟器/计算机/计算机可以有效执行的语言。斯通举了一个例子：当计算二次方程的根时，计算机必须知道如何取平方根。如果不这样做，那么算法必须提供一组规则来提取平方根，才能有效地发挥作用。</p><p>这意味着程序员必须知道相对于目标计算代理（计算机/计算机）有效的“语言”。</p><p>但是模拟应该使用什么模型呢？vanEmdeBoas观察到，“即使我们把复杂性理论建立在抽象的基础上而不是具体的机器上，模型选择的任意性仍然存在。此时，模拟的概念进入了，当测量速度时，指令集很重要。例如，欧几里得算法中计算余数的子程序执行速度要快得多，如果程序员有一个“模”指令，而不仅仅是减法（或者更糟的是：只有明斯基的“减法”）。</p><p>结构化编程、规范结构：根据丘奇-图灵理论，任何算法都可以通过已知图灵完备的模型来计算，并且根据明斯基的演示，图灵完备只需要四种指令类型：条件goto、无条件goto、赋值、停止。Kemeny和Kurtz观察到，虽然无条件goto和有条件if-then goto的“无纪律”使用会导致“意大利面条代码”，但是程序员可以只使用这些指令编写结构化程序；另一方面，“用结构化语言编写结构化差的程序也可能，而且不太难。” Tausworthe增加了三个规范结构：序列、if-then-else和while-do，还有两个：do-while和case。结构化程序的另一个好处是，它使用数学归纳法来证明正确性。</p><p>标准流程图符号：图形辅助工具称为流程图，提供了描述和记录算法（以及一个计算机程序）的方法。就像minsky机器的程序流程一样，流程图总是从页面的顶部开始向下。它的主要符号只有四个：显示程序流的定向箭头、矩形（序列、GoTo）、菱形（if-then-else）和点（或tie）。标准结构由这些原始形状构成。子结构可以“嵌套”成矩形，但前提是上部结构只有一个出口。符号及其用于构建规范结构的用途如图所示。</p><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><h4 id="算法示例"><a href="#算法示例" class="headerlink" title="算法示例"></a>算法示例</h4><p>最简单的算法之一是在随机顺序的数字列表中找到最大的数字。找到解决方案需要查看列表中的每个数字。由此得出一个简单的算法，可以用英语散文的高级描述来说明，如下所示：</p><p>高层次的描述：</p><ol><li>如果集合中没有数字，则没有最高数字。</li><li>假设集合中的第一个数字是集合中最大的数字。</li><li>对于集合中的每个剩余数字：如果此数字大于当前最大数字，则将此数字视为集合中的最大数字。</li><li>当集合中没有要迭代的数字时，请将当前最大的数字视为集合中最大的数字。</li></ol><p>（准）形式描述：用散文写，但更接近于计算机程序的高级语言，以下是用伪代码或pidgin代码对算法进行更正式的编码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Algorithm LargestNumber</span><br><span class="line">  Input: A list of numbers L.</span><br><span class="line">  Output: The largest number in the list L.</span><br><span class="line">  if L.size = 0 return null</span><br><span class="line">  largest ← L[0]</span><br><span class="line">  for each item in L, do</span><br><span class="line">    if item &gt; largest, then</span><br><span class="line">      largest ← item</span><br><span class="line">  return largest</span><br></pre></td></tr></table></figure><blockquote><p>“←”表示分配。例如，“最大←项”是指最大值的值变化到项的值。</p><p>“返回”终止算法并输出以下值。</p></blockquote><h4 id="欧几里得算法"><a href="#欧几里得算法" class="headerlink" title="欧几里得算法"></a>欧几里得算法</h4><p>欧几里得计算两个数的最大公约数（gcd）的算法在其元素的第七卷（“初等数理论”）中出现。欧几里得提出了这样一个问题：“给定两个数互不相乘，以找到它们的最大公约数。”他定义“一个由单位组成的多个数”：一个计数数，一个不包括零的正整数。“测量”是将较短的测量长度s沿较长的长度l连续放置（q次），直到剩余部分r小于较短的长度。在现代词汇中，余数r=l−q×s，q是商，或余数r是“模”，即除法后剩余的整数分数部分。</p><p>为了使欧几里得方法成功，起始长度必须满足两个要求：长度不能为零，并且减法必须是“适当的”；即，测试必须保证两个数字中较小的数字从较大的数字中减去（或者，两个数字可以相等，以便减法得出零）。</p><p>欧几里得的原始证明又增加了第三个要求：两个长度不能是素数。欧几里得规定了这一点，这样他就可以建立一个约简和荒谬的证据，证明两个数字的共同度量实际上是最大的。虽然尼科马丘斯的算法与欧几里得的算法相同，但当这些数字互为素数时，就产生了它们共同度量的数字“1”。所以，准确地说，下面的算法确实是尼科马丘斯的算法。</p><h5 id="欧几里得算法的计算机语言"><a href="#欧几里得算法的计算机语言" class="headerlink" title="欧几里得算法的计算机语言"></a>欧几里得算法的计算机语言</h5><p>执行欧几里得算法只需要几个指令类型：一些逻辑测试（条件goto）、无条件goto、赋值（替换）和减法。</p><p>位置用大写字母表示，例如S、A等。</p><p>一个地点的不同数量（数字）用小写字母书写，并且（通常）与该地点的名称相关。例如，起始位置L可能包含数字L=3009。</p><h4 id="欧几里得算法的一个差程序"><a href="#欧几里得算法的一个差程序" class="headerlink" title="欧几里得算法的一个差程序"></a>欧几里得算法的一个差程序</h4><p>以下算法的框架是Knuth的Euclid’s和Nicomachus的四步版本，但它不是使用除法来查找余数，而是使用剩余长度r中较短长度s的连续减法，直到r小于s。用粗体显示的高级描述改编自Knuth 1973:2-4：</p><p>INPUT：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1 [Into two locations L and S put the numbers l and s that represent the two lengths]:</span><br><span class="line">  INPUT L, S</span><br><span class="line">2 [Initialize R: make the remaining length r equal to the starting/initial/input length l]:</span><br><span class="line">  R ← L</span><br></pre></td></tr></table></figure><p>E0：确保R≥S</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">3 [Ensure the smaller of the two numbers is in S and the larger in R]:</span><br><span class="line">  IF R &gt; S THEN</span><br><span class="line">    the contents of L is the larger number so skip over the exchange-steps 4, 5 and 6:</span><br><span class="line">    GOTO step 6</span><br><span class="line">  ELSE</span><br><span class="line">    swap the contents of R and S.</span><br><span class="line">4   L ← R (this first step is redundant, but is useful for later discussion).</span><br><span class="line">5   R ← S</span><br><span class="line">6   S ← L</span><br></pre></td></tr></table></figure><p>E1：[求余数]：直到R中剩余的长度r小于S中较短的长度s，重复地从R中剩余的长度r中减去S中的测量数字s。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">7 IF S &gt; R THEN</span><br><span class="line">    done measuring so</span><br><span class="line">    GOTO 10</span><br><span class="line">  ELSE</span><br><span class="line">    measure again,</span><br><span class="line">8   R ← R − S</span><br><span class="line">9   [Remainder-loop]:</span><br><span class="line">    GOTO 7.</span><br></pre></td></tr></table></figure><p>E2：[余数是零吗？]：（i）最后一个度量精确，r中的余数为零，程序可以停止，要么（ii）算法必须继续：最后一个度量在r中留下的余数小于s中的度量数。</p><p>E3：【交换S和R】：欧几里得算法的核心。使用余数r来测量以前较小的数s；l用作临时位置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">11  L ← R</span><br><span class="line">12  R ← S</span><br><span class="line">13  S ← L</span><br><span class="line">14  [Repeat the measuring process]:</span><br><span class="line">    GOTO 7</span><br></pre></td></tr></table></figure><p>OUTPUT：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">16 HALT, END, STOP.</span><br></pre></td></tr></table></figure><h4 id="欧几里得算法的一个好程序"><a href="#欧几里得算法的一个好程序" class="headerlink" title="欧几里得算法的一个好程序"></a>欧几里得算法的一个好程序</h4><p>以下版本的欧几里得算法只需要六个核心指令就可以完成“不雅”的十三个指令；更糟的是，“不雅”需要更多类型的指令。在本文的顶部可以找到“优雅”的流程图。在（非结构化）基本语言中，步骤是编号的，指令let[]=[]是用←符号表示的赋值指令。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">5 REM Euclid&apos;s algorithm for greatest common divisor</span><br><span class="line">6 PRINT &quot;Type two integers greater than 0&quot;</span><br><span class="line">10 INPUT A,B</span><br><span class="line">20 IF B=0 THEN GOTO 80</span><br><span class="line">30 IF A &gt; B THEN GOTO 60</span><br><span class="line">40 LET B=B-A</span><br><span class="line">50 GOTO 20</span><br><span class="line">60 LET A=A-B</span><br><span class="line">70 GOTO 20</span><br><span class="line">80 PRINT A</span><br><span class="line">90 END</span><br></pre></td></tr></table></figure><p>“优雅”是如何工作的：代替外部的“欧几里得循环”，“优雅”在两个“CO循环”之间来回移动，A&gt;B循环计算A←A−B，A B≤A循环计算B←B−A。这是因为，当minutend m最后小于或等于subtrahend s（difference=minutend−subtrahend）时，minutend可以变为s（新的测量长度），副斜线可以变为新的r（要测量的长度）；换句话说，减法的“意义”相反。</p><p>以下版本可用于面向对象的语言：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// Euclid&apos;s algorithm for greatest common divisor</span><br><span class="line">int euclidAlgorithm (int A, int B)&#123;</span><br><span class="line">     A=Math.abs(A);</span><br><span class="line">     B=Math.abs(B);</span><br><span class="line">     while (B!=0)&#123;</span><br><span class="line">          if (A&gt;B) A=A-B;</span><br><span class="line">          else B=B-A;</span><br><span class="line">     &#125;</span><br><span class="line">     return A;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="检查欧几里得算法"><a href="#检查欧几里得算法" class="headerlink" title="检查欧几里得算法"></a>检查欧几里得算法</h4><p>算法是否按照作者的要求执行？一些测试用例通常对核心功能有一定的信心。但测试是不够的。对于测试用例，一个源代码使用3009和884。Knuth建议40902，24140。另一个有趣的例子是两个相对质数14157和5950。</p><p>但是“例外情况”必须被识别和测试。当r&gt;s，s&gt;r，r=s时，“烂代码”会正常运行吗？“优雅”同上：b&gt;a，a&gt;b，a=b？（对所有人都是）。当一个数字为零，两个数字都为零时会发生什么？（“烂代码”在所有情况下永远计算；“优雅”在a=0时永远计算。）如果输入负数会发生什么？分数？如果输入的数字，即由算法/程序计算的函数的域，只包含正整数（包括零），则在零处的失败表示算法（以及实例化它的程序）是一个部分函数而不是一个总函数。一个值得注意的失败由于例外是阿里安5号飞行501火箭失败（1996年6月4日）。</p><h4 id="欧几里得算法的测量与改进"><a href="#欧几里得算法的测量与改进" class="headerlink" title="欧几里得算法的测量与改进"></a>欧几里得算法的测量与改进</h4><p>优雅（紧凑）与善良（速度）：只有六个核心指令，“优雅”是明显的赢家，而“不雅”是13个指令。然而，“不雅”的速度更快（它以更少的步骤到达停止）。算法分析指出了这种情况的原因：“Elegant”在每个减法循环中执行两个条件测试，而“Elegant”只执行一个条件测试。由于算法（通常）需要许多循环通过，所以在执行“b=0”时平均要浪费很多时间。仅在计算余数后才需要的测试。</p><p>算法可以改进吗？：一旦程序员判断一个程序“合适”和“有效”——也就是说，它计算出作者想要的函数，那么问题就变成了，它能被改进吗？</p><p>通过消除五个步骤，可以提高“不雅”的紧凑性。但是Chaitin证明了压缩算法不能用广义算法实现自动化；相反，它只能用启发式的方法实现，即通过穷尽搜索（在繁忙的海狸身上找到的例子）、试错、聪明、洞察力、归纳推理的应用等。观察到步骤4、5和6在步骤11、12和6中重复。这些步骤以及步骤2和3可以被消除。这将核心指令的数量从13个减少到了8个，这使得它在9个步骤中“比”优雅“更优雅”。</p><p>移动“b=0”可以提高“优雅”的速度。在两个减法循环之外进行测试。此更改需要添加三个指令（b=0？A＝0？GOTO）。现在，“优雅”计算示例数更快；对于任何给定的a、b和r、s，是否总是这样，都需要进行详细的分析。</p><h3 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h3><p>通常重要的是要知道给定算法理论上需要多少特定资源（如时间或存储）。已经开发了用于分析算法以获得定量答案（估计值）的方法；例如，上述排序算法的时间要求为o（n），使用n作为列表长度的大o符号。在任何时候，算法只需要记住两个值：迄今为止发现的最大值，以及它在输入列表中的当前位置。因此，如果不计算存储输入数字所需的空间，则称其具有O（1）的空间要求；如果计算输入数字，则称其具有O（n）的空间要求。</p><p>不同的算法可以用不同的指令集在比其他算法更少或更多的时间、空间或“努力”内完成相同的任务。例如，当用于排序列表或数组上的表查找时，二进制搜索算法（具有cost o（log n））优于顺序搜索（cost o（n））。</p><h4 id="形式与经验"><a href="#形式与经验" class="headerlink" title="形式与经验"></a>形式与经验</h4><p>对算法的分析和研究是计算机科学的一门学科，通常是抽象地实践，而不使用特定的编程语言或实现。从这个意义上讲，算法分析与其他数学学科相似，因为它关注算法的基本属性，而不是任何特定实现的细节。</p><p>通常，伪代码用于分析，因为它是最简单和最一般的表示。然而，最终，大多数算法通常在特定的硬件/软件平台上实现，它们的算法效率最终通过实际代码进行测试。</p><p>对于“一次性”问题的解决，特定算法的效率可能不会产生重大后果（除非n非常大），但对于设计用于快速交互、商业或长寿命科学应用的算法，这可能是至关重要的。从小n到大n的缩放经常暴露出效率低下的算法，否则是良性的。</p><p>经验测试很有用，因为它可能揭示影响性能的意外交互作用。基准点可用于比较程序优化前后的潜在改进与程序优化后的算法。然而，经验检验不能取代正式的分析，以公平的方式进行分析也不容易。</p><h4 id="执行效率"><a href="#执行效率" class="headerlink" title="执行效率"></a>执行效率</h4><p>为了说明即使在成熟的算法中也可能有潜在的改进，最近一项与FFT算法（在图像处理领域中大量使用）相关的重大创新可以将处理时间缩短1000倍，用于医疗成像等应用。一般来说，速度的改进取决于这一问题在实际应用中非常普遍。这种规模的加速使计算机设备能够广泛地利用图像处理（如数码相机和医疗设备）来降低功耗。</p><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><p>对算法进行分类有多种方法，每种方法都有其自身的优点。</p><h4 id="按实现类型"><a href="#按实现类型" class="headerlink" title="按实现类型"></a>按实现类型</h4><p><strong>递归</strong></p><p>递归算法是一种反复调用（引用）自身的算法，直到某个条件（也称为终止条件）匹配为止，这是函数编程常用的方法。迭代算法使用循环这样的重复构造，有时使用堆栈这样的额外数据结构来解决给定的问题。有些问题很自然地适合于一种实现或另一种实现。例如，使用递归实现可以很好地理解汉内塔。每一个递归版本都有一个等价的（但可能或多或少复杂）迭代版本，反之亦然。</p><p><strong>逻辑</strong></p><p>一个算法可以被看作是受控逻辑推理。这个概念可以表示为：算法=逻辑+控制。逻辑组件表示可用于计算的公理，而控制组件决定对公理应用推导的方式。这是逻辑编程范式的基础。在纯逻辑编程语言中，控制组件是固定的，算法是通过只提供逻辑组件来指定的。这种方法的吸引力在于优雅的语义：公理的变化会在算法中产生定义明确的变化。</p><p><strong>串行、并行或分布式</strong></p><p>通常讨论算法时假定计算机一次执行一条算法指令。这些计算机有时被称为串行计算机。为这种环境设计的算法称为串行算法，而不是并行算法或分布式算法。并行算法利用计算机体系结构，其中多个处理器可以同时处理一个问题，而分布式算法则利用与计算机网络连接的多台计算机。</p><p>并行或分布式算法将问题划分为更对称或不对称的子问题，并将结果收集在一起。这种算法的资源消耗不仅是每个处理器上的处理器周期，而且是处理器之间的通信开销。一些排序算法可以有效地并行化，但是它们的通信开销很高。迭代算法通常是可并行的。有些问题没有并行算法，称为固有的串行问题。</p><p><strong>确定性或非确定性</strong></p><p>确定性算法在算法的每一步都用精确的决策来解决问题，而非确定性算法则是通过猜测来解决问题，尽管典型的猜测是通过启发式更精确地进行的。</p><p><strong>精确或近似</strong></p><p>当许多算法达到精确解时，近似算法寻求更接近真实解的近似。近似可以通过使用确定性策略或随机策略来实现。这种算法对许多困难问题都有实用价值。近似算法的一个例子是背包问题，其中有一组给定的项目。它的目标是包装背包以获得最大的总价值。每件物品都有一定的重量和价值。可携带的总重量不超过某个固定数字x。因此，解决方案必须考虑物品的重量及其值。</p><p><strong>量子算法</strong></p><p>它们运行在一个现实的量子计算模型上。这个术语通常用于那些看似固有量子的算法，或使用量子计算的一些基本特征，如量子叠加或量子纠缠。</p><h4 id="按设计范式"><a href="#按设计范式" class="headerlink" title="按设计范式"></a>按设计范式</h4><p>对算法进行分类的另一种方法是通过它们的设计方法或范式。有一定数量的范例，每一个都不同。此外，这些类别中的每一个都包含许多不同类型的算法。一些常见的范例是：</p><p><strong>暴力或全部搜索</strong></p><p>这是一种幼稚的方法，尝试各种可能的解决方案，看看哪一个是最好的。</p><p><strong>分而治之</strong></p><p>分而治之的算法反复地将一个问题的实例减少到同一个问题的一个或多个较小实例（通常是递归的），直到这些实例足够小，可以轻松解决为止。分而治之的一个例子就是合并排序。在将数据分割成段后，可以对每个数据段进行排序，通过合并段，可以在征服阶段获得整个数据的排序。</p><p>分而治之的一个更简单的变体被称为减少和征服算法，它解决一个相同的子问题，并使用这个子问题的解决方案来解决更大的问题。分而治之将问题划分为多个子问题，因此征服阶段比减少和征服算法更为复杂。减少和征服算法的一个例子是二进制搜索算法。</p><p><strong>搜索和枚举</strong></p><p>许多问题（如下棋）可以被建模为图上的问题。图搜索算法指定了围绕图移动的规则，对于此类问题非常有用。这一类还包括搜索算法、分支和绑定枚举以及回溯。</p><p><strong>随机算法</strong></p><p>这种算法随机（或伪随机）做出一些选择。对于那些无法找到精确解的问题，它们可以非常有用地找到近似解（参见下面的启发式方法）。对于其中一些问题，我们知道最快的近似值必须包含一些随机性。对于某些问题，具有多项式时间复杂度的随机算法是否可以是最快的算法，这是一个开放的问题，称为p对np问题。这种算法有两大类：</p><ol><li>蒙特卡罗算法返回正确答案的概率很高。例如，rp是以多项式时间运行的子类。</li><li>拉斯维加斯算法总是返回正确的答案，但它们的运行时间只是概率限制的，例如ZPP。</li></ol><p><strong>降低复杂性</strong></p><p>这项技术涉及到通过将一个困难问题转化为我们（希望）有渐近最优算法的更为知名的问题来解决它。其目的是找到一种简化算法，其复杂度不受生成的简化算法的控制。例如，一种用于在未排序列表中查找中间值的选择算法，首先对列表（昂贵部分）进行排序，然后拉出排序列表中的中间元素（便宜部分）。这种技术也被称为转换和征服。</p><p><strong>回溯</strong></p><p>在这种方法中，当确定多个解决方案无法生成有效的完整解决方案时放弃它们，并将逐步构建多个解决方案。</p><h4 id="优化问题"><a href="#优化问题" class="headerlink" title="优化问题"></a>优化问题</h4><p>对于优化问题，有一个更具体的算法分类；针对此类问题的算法可以分为上述一个或多个一般类别，也可以分为以下类别之一：</p><p><strong>线性规划</strong></p><p>在寻找线性等式和不等式约束下的线性函数的最优解时，问题的约束可以直接用于产生最优解。有一些算法可以解决这类问题，例如流行的单纯形算法。可以用线性规划解决的问题包括有向图的最大流问题。如果一个问题另外要求一个或多个未知数必须是整数，那么它将被分类为整数编程。</p><p>如果可以证明整数值的所有限制都是表面的，即解满足这些限制，那么线性规划算法就可以解决这一问题。在一般情况下，根据问题的难度，使用专门的算法或找到近似解的算法。</p><p><strong>动态规划</strong></p><p>当一个问题显示最优子结构时，意味着可以从子问题的最优解和重叠子问题的最优解构造出一个问题的最优解，这意味着相同的子问题被用于解决许多不同的问题实例，</p><p>一种称为动态规划的更快方法避免了重新计算已经存在的解。已经计算出来了。例如，Floyd–Warshall算法，通过使用从所有相邻顶点到目标的最短路径，可以找到从加权图中的顶点到目标的最短路径。动态编程和记忆化结合在一起。</p><p>动态规划与分而治之的主要区别在于，子问题在分而治之中或多或少是独立的，而在动态规划中，子问题是重叠的。</p><p>动态编程和直接递归的区别在于递归调用的缓存或内存化。当子问题是独立的，没有重复的时候，记忆没有帮助，因此动态编程不是所有复杂问题的解决方案。</p><p>通过使用memoization或维护已经解决的子问题表，动态规划将许多问题的指数性质降低到多项式复杂性。</p><p><strong>贪婪算法</strong></p><p>贪婪算法类似于动态编程算法，它通过检查子结构来工作，在这种情况下，不是问题而是给定的解决方案。这种算法从一些可能给出或以某种方式构造的解开始，并通过做一些小的修改来改进它。对于某些问题，它们可以找到最优解，而对于其他问题，它们则停留在局部最优解，也就是说，在算法无法改进但不是最优的解上。</p><p>贪婪算法最常用的用途是寻找最小生成树，在那里用这种方法可以找到最优解。哈夫曼树、克鲁斯卡尔、普里姆、索林都是贪婪的算法，可以解决这个优化问题。</p><p><strong>启发算法</strong></p><p>在优化问题中，启发式算法可用于在无法找到最优解的情况下找到接近最优解的解。这些算法的工作原理是，随着算法的发展，越来越接近最优解。原则上，如果运行无限长的时间，他们会找到最优解。它们的优点是在相对较短的时间内可以找到一个非常接近最优解的解。</p><p>这些算法包括局部搜索、禁忌搜索、模拟退火和遗传算法。其中一些算法，如模拟退火算法，是非确定性算法，而另一些算法，如禁忌搜索算法，则是确定性算法。当已知非最优解的误差界时，该算法又被进一步分类为近似算法。</p><h4 id="按研究领域"><a href="#按研究领域" class="headerlink" title="按研究领域"></a>按研究领域</h4><p>每个科学领域都有自己的问题，需要有效的算法。一个领域的相关问题经常一起研究。一些示例类包括搜索算法、排序算法、合并算法、数字算法、图形算法、字符串算法、计算几何算法、组合算法、医学算法、机器学习、密码学、数据压缩算法和解析技术。</p><p>领域往往相互重叠，一个领域中的算法改进可能会改善另一个领域（有时完全不相关）。例如，动态规划是为了优化工业中的资源消耗而发明的，但现在已用于解决许多领域的广泛问题。</p><h4 id="按复杂性"><a href="#按复杂性" class="headerlink" title="按复杂性"></a>按复杂性</h4><p>与输入大小相比，算法可以按需要完成的时间量分类：</p><ul><li>恒定时间：如果算法所需的时间相同，则不考虑输入大小。例如，对数组元素的访问。</li><li>线性时间：如果时间与输入大小成比例。例如，列表的遍历。</li><li>对数时间：如果时间是输入大小的对数函数。例如二进制搜索算法。</li><li>多项式时间：如果时间是输入大小的幂。例如，气泡排序算法具有二次时间复杂性。</li><li>指数时间：如果时间是输入大小的指数函数。例如，暴力搜索。</li></ul><p>有些问题可能有多个复杂度不同的算法，而其他问题可能没有算法或已知的高效算法。还有一些问题到其他问题的映射。基于此，基于最优算法的复杂性，将问题本身进行分类，而不是将算法分为等价类更为合适。</p><h3 id="连续算法"><a href="#连续算法" class="headerlink" title="连续算法"></a>连续算法</h3><p>形容词“continuous”应用于“algorithm”一词时可以表示：</p><p>一种对表示连续量的数据进行运算的算法，即使该数据由离散近似表示，这种算法也在数值分析中进行研究；或一种微分方程形式的算法，在模拟计算机上连续地对数据进行运算。</p><h3 id="法律问题"><a href="#法律问题" class="headerlink" title="法律问题"></a>法律问题</h3><p>算法本身通常不具有专利权。在美国，仅由抽象概念、数字或信号的简单操作组成的主张不构成“过程”（USPTO 2006），因此算法不具有专利权（如Gottschalk v.Benson）。然而，算法的实际应用有时是可申请专利的。例如，在Diamond v.Diehr中，应用简单反馈算法帮助合成橡胶固化被认为是可申请专利的。软件专利是一个极具争议的领域，涉及算法的专利备受批评，尤其是数据压缩算法，如Unisys的LZW专利。</p><p>此外，一些加密算法有导出限制。</p><h3 id="算法的发展"><a href="#算法的发展" class="headerlink" title="算法的发展"></a>算法的发展</h3><h4 id="古代近东"><a href="#古代近东" class="headerlink" title="古代近东"></a>古代近东</h4><p>古希腊使用了算法。两个例子是埃拉托斯坦的筛子，这是尼科马克《算术导论》中描述的：Ch9.2和欧几里得算法，这是在欧几里得元素（约公元前300年）中首次描述的。Ch9.1巴比伦粘土片描述和使用算法程序来计算重要天文事件的时间和地点。</p><h4 id="离散和可分辨符号"><a href="#离散和可分辨符号" class="headerlink" title="离散和可分辨符号"></a>离散和可分辨符号</h4><p>理货记号：为了记录他们的羊群、他们的粮食袋和他们的钱，古人使用理货：在木棍上堆积石头或留下记号，或在粘土中制作离散的符号。通过巴比伦和埃及对标记和符号的使用，最终罗马数字和算盘得以发展（Dilson，第16-41页）。在图灵机器和后图灵机器计算中使用的一元数字系统算法中，计数标记突出显示。</p><h4 id="作为数字“占位符”的符号处理：代数"><a href="#作为数字“占位符”的符号处理：代数" class="headerlink" title="作为数字“占位符”的符号处理：代数"></a>作为数字“占位符”的符号处理：代数</h4><p>古希腊几何学家（欧几里得算法）、印度数学家布拉马库塔（Brahmagupta）和波斯数学家阿尔赫瓦里兹米（Algorism和Algorithmi是从他们的名字衍生而来）以及西欧数学家的工作最终达到了莱布尼兹的微积分比率（ca 1680）的概念：</p><blockquote><p>莱布尼兹提出了逻辑代数，这是一种代数，它规定了用普通代数规定数字运算规则的方式来处理逻辑概念的规则。</p></blockquote><h4 id="具有离散状态的机械装置"><a href="#具有离散状态的机械装置" class="headerlink" title="具有离散状态的机械装置"></a>具有离散状态的机械装置</h4><p>博尔特认为重量驱动的钟的发明是“关键发明[中世纪的欧洲]”，特别是边缘逃逸为我们提供了一个机械钟的滴答声。从13世纪开始，精确的自动机器”。立即导致了“机械自动化”，最终导致了“计算机器”—19世纪中叶查尔斯·巴贝奇和艾达·洛维拉斯伯爵夫人的差分引擎和分析引擎。作为计算机巴贝奇的分析引擎，第一台设备被认为是一台真正的图灵完整的计算机，而不仅仅是一台计算器，因此有时也被称为“历史上的第一个程序员”，尽管巴贝奇的第二台设备的完整实现在她有生之年之后才得以实现。</p><p>逻辑机器1870年——斯坦利·杰文斯（Stanley Jevons）的“逻辑算盘”和“逻辑机器”：技术问题是当以类似于现在所称的卡诺图的形式呈现时，减少布尔方程。Jevons（1880）首先描述了一个简单的“算盘”，它是一种用别针装饰的木头滑片，其设计使任何部分或类别的[逻辑]组合都能被机械地挑选出来。然而，最近，我把这个系统简化成一个完全机械的形式，从而把整个间接的推理过程体现在所谓的逻辑机器上：“他的机器配备了“某些可移动的木杆”和“脚上有21个键，如钢琴的键等等”。用这台机器，他可以分析“三段论或任何其他简单的逻辑论证”。</p><p>1870年，他在英国皇家学会的研究员面前展示了这台机器。然而，另一位逻辑学家约翰·文恩（JohnVenn）在1881年的《符号逻辑》（Symbolic Logic）一书中，却对这一努力的目光：“我对有时被称为逻辑机器的东西的兴趣和重要性没有很高的估计……在我看来，目前已知的或可能被发现的任何发明都不应该被称为逻辑机器”，请参阅算法特征。但不甘示弱，他也提出了“一个计划，有点类似，我理解，以教授的算盘，对应于Jevons教授的逻辑机，可以描述以下发明。我宁愿称之为一个逻辑图机器。但我认为，它可以完全完成任何逻辑机器所能合理预期的一切工作。</p><p>提花织机、Hollerith穿孔卡片、电报和电话——机电继电器：Bell和Newell（1971年）指出，提花织机（1801年）、Hollerith卡片的前身（穿孔卡片，1887年）和“电话交换技术”是导致第一台计算机发展的一棵树的根。电报，电话的前身，在全世界使用，它的离散和可区分的字母编码作为“点和破折号”一个共同的声音。到19世纪末，售票机磁带（约1870年代）开始使用，1890年美国人口普查中使用的是霍利斯卡。然后电传打字机（约1910年）带着穿孔纸，在磁带上使用波特码。</p><p>机电式继电器的电话交换网络（发明于1835年）是数字加法装置的发明者乔治·斯蒂比茨（1937年）的工作的基础。当他在贝尔实验室工作时，他观察到机械计算器与齿轮的“繁重”使用。他在1937年的一个晚上回家，打算测试他的想法…修补工作结束后，Stibitz构建了一个二进制添加设备。</p><p>Davis（2000）观察了机电式继电器的特殊重要性（其两个“二进制状态”打开和关闭）：</p><blockquote><p>只有从20世纪30年代开始，随着使用电气继电器的机电计算器的发展，机器的制造才有了巴贝奇预想的范围。</p></blockquote><h4 id="19世纪到20世纪中叶的数学"><a href="#19世纪到20世纪中叶的数学" class="headerlink" title="19世纪到20世纪中叶的数学"></a>19世纪到20世纪中叶的数学</h4><p>符号和规则：在快速连续的过程中，乔治·布尔（1847、1854）、戈特洛布·弗雷格（1879）和朱塞佩·皮诺（1888-1889）的数学将算术简化为一系列由规则操纵的符号。皮亚诺的算术原理，由一种新方法（1888年）提出，是“在符号语言中对数学公理化的第一次尝试”。</p><p>但是海耶诺特给了弗雷格（1879）这个荣誉：弗雷格的“也许是有史以来最重要的逻辑著作”。…其中我们看到一种“公式语言”，即一种语言特征，一种用特殊符号书写的语言，“纯粹的思想”，即没有修辞修饰…由特定的符号构成，这些符号按照明确的规则进行操作。弗雷格的作品在《数学原理》（1910-1913）中被阿尔弗雷德·诺斯怀特黑德和伯特兰·罗素进一步简化和放大。</p><p>悖论：同时，文献中出现了许多令人不安的悖论，特别是布阿里-富蒂悖论（1897年）、拉塞尔悖论（1902-03年）和理查德悖论。由此产生的考虑导致了Kurt G_del的论文（1931年），他特别引用了骗子悖论，它完全降低了递归的数字。</p><p>有效可计算性：为了解决希尔伯特在1928年精确定义的EntscheidungsProblem问题，数学家首先着手定义“有效方法”或“有效计算”或“有效可计算性”（即成功的计算）的含义。随后，出现了以下内容：阿隆佐·丘奇（Alonzo Church）、斯蒂芬·克莱恩（Stephen Kleene）和J.B.罗瑟（J.B.Rosser）的《λ-微积分》（λ-微积分）：根据雅克·赫伯兰（Jacques Herbrand）的建议（参见1934年G·戴尔普林斯顿（Princeton）的演讲）和克莱恩（Kleene）随后的简化，对“一般递归”（Entscheidu）进行了精细的定义。</p><p>问题是无法解决的，埃米尔·波斯特把有效的可计算性定义为一个工人在不经意地遵循一系列指示的情况下，在一系列房间里左右移动，或者在那里标记或擦除一张纸，或者观察纸，并对下一条指示作出“是”或“否”的决定。ungsproblem是无法解决的，因为他使用了他的“A-[自动-]机器”——实际上几乎等同于波斯特的“公式”，J.Barkley Rosser对“有效方法”的定义，即“机器”。S.C.Kleene提出了“教会论文”的前身，他称之为“论文一”，几年后，Kleene将他的论文重命名为“教会论文”。并提出了”图灵论文”。</p><h4 id="埃米尔（1936年）和阿兰·图灵（1936-1939）"><a href="#埃米尔（1936年）和阿兰·图灵（1936-1939）" class="headerlink" title="埃米尔（1936年）和阿兰·图灵（1936-1939）"></a>埃米尔（1936年）和阿兰·图灵（1936-1939）</h4><p>Emil Post（1936）将“计算机”（人类）的行为描述如下：</p><blockquote><p>“…涉及两个概念：一个符号空间的概念，在该空间中执行从问题到答案的工作，以及一组固定不变的方向。</p></blockquote><p>他的符号空间是：</p><blockquote><p>“双向无限的空间或盒子序列…问题解决者或工作人员将在这个符号空间中移动和工作，能够一次只在一个框中移动和工作……一个框只允许有两种可能的条件，即空的或没有标记的，并且其中只有一个标记，例如垂直笔画。</p><p>“一个盒子被挑出来称为起点。…一个特定的问题是由有限数量的框（即输入框）以符号形式给出，并用笔画进行标记。同样地，答案[即输出]将以符号形式通过这样一个标记框的配置给出…</p><p>“适用于一般问题的一组指导方针在应用于每个特定问题时会建立一个确定性过程。此过程仅在到达（c）型方向[即停止]时终止。更多信息请参见后转向机。</p></blockquote><p>阿兰·图灵的作品早于斯蒂比茨（1937年）；斯蒂比茨是否知道图灵的作品还不得而知。图灵的传记作者相信图灵使用一种类似打字机的模型是出于年轻人的兴趣：“艾伦小时候就梦想着发明打字机；图灵夫人有一台打字机，他很可能从问自己把打字机称为‘机械’是什么意思开始。”考虑到摩尔斯电码和电报的流行，蒂克克尔磁带机和电传打字机，我们可能猜测所有的影响。</p><p>图灵他的计算模型现在被称为图灵机器，正如波斯特所做的那样，开始分析一台人类计算机，他将其简化为一组简单的基本运动和“精神状态”。但他继续向前一步，创建了一个机器作为计算数字的模型。</p><blockquote><p>计算通常是通过在纸上写一些符号来完成的。我们可以假设这篇论文像孩子的算术书一样被分成正方形……然后我假设计算是在一维的纸上进行的，也就是说，在被分成正方形的磁带上进行的。我还要假设，可以印刷的符号数量是有限的…</p><p>计算机在任何时刻的行为都是由他所观察到的符号和他在那一时刻的“精神状态”决定的。我们可以假设有一个b与符号或正方形的数量绑定，计算机可以在一个时刻观察到。如果他想观察更多，他必须使用连续的观察。我们还将假设需要考虑的心理状态的数量是有限的…</p><p>“让我们想象一下，计算机执行的操作被分割成‘简单操作’，这些操作非常简单，不容易想象它们被进一步分割。”</p></blockquote><p>图灵的约化得到以下结果：</p><blockquote><p>“因此，简单的操作必须包括：“</p><p>（a）观察到的一个方块上符号的变化“</p><p>（b）观察到的其中一个正方形变为之前观察到的其中一个正方形的L平方内的另一个正方形。</p></blockquote><p>“这可能是因为其中的一些变化必然会引起精神状态的变化。因此，最一般的单一操作必须视为以下操作之一：</p><blockquote><p>“（a）符号可能发生的变化（a）以及思想状态可能发生的变化。</p><p>（b）观察到的正方形可能发生的变化（b），以及可能的精神状态变化。</p></blockquote><p>“我们现在可以建造一台机器来完成这台计算机的工作。”</p><p>几年后，图灵用这种有力的表达扩展了他的分析（论文，定义）：</p><blockquote><p>如果一个函数的值可以通过某种纯粹的机械过程找到，那么它被称为“有效可计算的”。虽然很容易直观地理解这个概念，但还是需要有一些更明确的、数学上可表达的定义。我们可以从字面上理解这句话，通过一个纯粹的机械过程来理解，这个过程可以通过一台机器来实现。可以用某种正常形式对这些机器的结构进行数学描述。这些思想的发展导致了作者对可计算函数的定义，以及对可计算性的识别†与有效的可计算性。</p><p>我们将使用表达式“可计算函数”来表示机器可计算的函数，并且我们让“有效可计算”指的是直观的概念，而不需要对这些定义中的任何一个进行特别的识别。”</p></blockquote><h4 id="Rosser（1939年）和S-C-克林（1943年）"><a href="#Rosser（1939年）和S-C-克林（1943年）" class="headerlink" title="Rosser（1939年）和S.C.克林（1943年）"></a>Rosser（1939年）和S.C.克林（1943年）</h4><p>J.Barkley Rosser以以下方式定义了“有效方法”：</p><blockquote><p>“有效方法”在这里是一种相当特殊的方法，它的每一步都是精确确定的，并且一定会以有限的步骤产生答案。有了这个特殊的含义，迄今为止已经给出了三种不同的精确定义。其中最简单的陈述（由于post和turing）基本上是说，如果一个人能制造出一台机器，在没有人为干预的情况下解决集合的任何问题，除了插入问题和（稍后）阅读答案，就存在解决某些问题的有效方法。这三个定义都是等价的，所以使用哪一个并不重要。此外，这三者都是等价的，这是证明任何一个的正确性的有力论据。”（罗瑟1939:225-226）</p></blockquote><p>Rosser的脚注5引用了Church和Kleene的著作及其对λ-可定义性的定义，特别是Church在他的初等数理论的一个无法解决的问题（1936）中对它的使用；Herbrand和G_del及其对递归的使用，特别是G_del在他著名的论文中对形式上不可决定的pri命题的使用。NCPIA Mathematica和相关系统I（1931）；以及Post（1936）和Turing（1936-37）在其计算机制模型中。</p><p>史蒂芬C克莱恩把他现在著名的“论文一”定义为教会图灵论文。但他是在以下情况下做的（原文中的粗体字）：</p><blockquote><p>“12。算法理论…在建立一个完整的算法理论时，我们要做的是描述一个过程，该过程对于独立变量的每一组值都是可执行的，该过程必然终止，并且以这样的方式，从结果中我们可以看到一个明确的答案，“是”或“否”，对于问题，“谓词值是真的吗？”（克莱恩1943:273）</p></blockquote><h4 id="1950年以后的历史"><a href="#1950年以后的历史" class="headerlink" title="1950年以后的历史"></a>1950年以后的历史</h4><p>许多努力都是为了进一步完善“算法”的定义，由于围绕数学（特别是丘奇-图灵理论）和思想哲学（特别是关于人工智能的争论）的问题，活动正在进行中。有关更多信息，请参见算法特征化。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在数学和计算机科学中，算法是解决一类问题的明确说明。算法可以执行计算、数据处理、自动推理和其他任务。&lt;/p&gt;
&lt;p&gt;作为一种有效的方法，一种算法可以在有限的空间和时间内，用一种定义良好的形式语言表示，用于计算一个函数从初始状态和初始输入（可能为空）开始，指令描述了一种计算，
      
    
    </summary>
    
    
      <category term="算法" scheme="http://wangchengfei.info/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>机器学习</title>
    <link href="http://wangchengfei.info/2019/04/26/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    <id>http://wangchengfei.info/2019/04/26/机器学习/</id>
    <published>2019-04-26T05:58:54.000Z</published>
    <updated>2019-04-28T02:03:18.645Z</updated>
    
    <content type="html"><![CDATA[<p>机器学习（ML）是对计算机系统使用的算法和统计模型的科学研究，这些算法和统计模型不使用显式指令，而是依靠模式和推理来有效地执行特定的任务。它被视为人工智能的一个子集。机器学习算法基于样本数据（称为“训练数据”）建立数学模型，以便在没有明确编程来执行任务的情况下做出预测或决策。</p><p>机器学习算法被广泛应用于各种应用中，如电子邮件过滤和计算机视觉。在这些应用中它是不可行的，开发执行任务的特定指令的算法。机器学习与计算统计密切相关，计算统计集中于使用计算机进行预测。数学优化的研究为机器学习领域提供了方法、理论和应用领域。数据挖掘是机器学习中的一个研究领域，其重点是通过无监督学习进行探索性数据分析。在其跨业务问题的应用中，机器学习也称为预测分析。</p><h3 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h3><p>机器学习这个名字是由阿瑟·塞缪尔于1959年创造的。汤姆·M·米切尔对机器学习领域中所研究的算法提供了一个广泛引用的、更正式的定义：“据说，计算机程序是从经验E中学习一些任务t和性能度量p，如果它在t中的任务表现，就像度量p一样。红色被P所取代，随着经验E而改进。“ 机器学习所涉及的任务的定义提供了一个基本的操作定义，而不是用认知术语定义领域。这是根据阿兰·图灵在他的论文《计算机器和智能》中的论述，在论文中，“机器能思考吗？”替换为“机器能做我们（作为思考实体）能做的吗？” 在图灵的建议中，揭示了思维机器可能具有的各种特性以及在构建思维机器时的各种含义。</p><h4 id="机器学习任务"><a href="#机器学习任务" class="headerlink" title="机器学习任务"></a>机器学习任务</h4><p>机器学习任务分为几个大类。在有监督学习中，该算法从包含输入和期望输出的一组数据中建立数学模型。例如，如果任务正在确定图像是否包含某个对象，则受监督学习算法的训练数据将包括包含该对象和不包含该对象的图像（输入），并且每个图像都将有一个标签（输出），指示其是否包含该对象。在特殊情况下，输入可能仅部分可用，或仅限于特殊反馈。半监督学习算法根据不完整的培训数据开发数学模型，其中一部分样本输入没有标签。</p><p>分类算法和回归算法是监督学习的类型。当输出限制在一组有限的值时，使用分类算法。对于过滤电子邮件的分类算法，输入将是传入电子邮件，输出将是要在其中归档电子邮件的文件夹的名称。对于识别垃圾邮件的算法，输出将是“垃圾邮件”或“非垃圾邮件”的预测，由布尔值true和false表示。回归算法以其连续输出命名，这意味着它们在一个范围内可能有任何值。连续值的例子是对象的温度、长度或价格。</p><p>在无监督学习中，该算法从一组只包含输入而不包含所需输出标签的数据中建立数学模型。无监督学习算法被用来寻找数据中的结构，如数据点的分组或聚类。无监督学习可以发现数据中的模式，并可以将输入分组到类别中，如特征学习。维数减少是减少一组数据中“特征”或输入的数量的过程。</p><p>强化学习算法根据预算访问有限输入集的所需输出（培训标签），并优化将获取培训标签的输入选择。当以交互方式使用时，可以将它们显示给人类用户进行标记。强化学习算法在动态环境中以正强化或负强化的形式给出反馈，用于自动驾驶汽车或学习与人类对手进行游戏。</p><p>机器学习中的其他专门算法包括主题建模，其中计算机程序被赋予一组自然属性。所有语言文档，并查找包含类似主题的其他文档。在密度估计问题中，机器学习算法可以用来寻找不可观测的概率密度函数。元学习算法根据以往的经验学习自己的归纳偏倚。在发展机器人学中，机器人学习算法产生自己的学习经验序列，也被称为课程，通过自我引导的探索和与人类的社会互动累积获得新的技能。这些机器人使用主动学习、成熟、运动协同和模仿等指导机制。</p><h3 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h3><p>美国计算机游戏和人工智能领域的先驱阿瑟·塞缪尔（Arthur Samuel）于1959年在IBM时创造了“机器学习”一词。作为一项科学，机器学习源于对人工智能的探索。早在人工智能作为一门学科的早期，一些研究人员就对让机器从数据中学习感兴趣。他们试图用各种象征性的方法，以及后来被称为“神经网络”的方法来解决这个问题；这些方法主要是感知器和其他模型，后来被发现是对统计学的广义线性模型的再发明。</p><p>然而，越来越多地强调基于知识的逻辑方法，导致了人工智能和机器学习之间的裂痕。概率系统受到数据采集和表示的理论和实践问题的困扰：到1980年，专家系统已成为人工智能的主导，统计学不再受欢迎。</p><p>在人工智能中继续进行符号/基于知识的学习工作，导致归纳逻辑编程，但更多的统计线研究Earch现在不在人工智能领域，而是模式识别和信息检索领域；755个神经网络的研究被人工智能和计算机科学所抛弃。这条线也在人工智能/计算机系统领域外延续，被霍普菲尔德、鲁梅尔哈特和辛顿等其他学科的研究人员称为“连接主义”。他们的主要成功发生在20世纪80年代中期，当时他们重新发明了反向传播。</p><p>机器学习作为一个独立的领域在20世纪90年代开始蓬勃发展，该领域的目标从实现人工智能转变为解决实际问题。它将焦点从它从人工智能继承的象征性方法转移到了从统计学和概率论中借用的方法和模型上。</p><h4 id="与数据挖掘的关系"><a href="#与数据挖掘的关系" class="headerlink" title="与数据挖掘的关系"></a>与数据挖掘的关系</h4><p>机器学习和数据挖掘通常采用相同的方法，并且重叠显著，但是机器学习侧重于预测，基于从培训数据中学习到的已知属性，数据挖掘侧重于发现（以前）数据中的未知属性（这是数据库中知识发现的分析步骤）。数据挖掘使用许多机器学习方法，但目标不同；另一方面，机器学习也使用数据挖掘方法作为“无监督学习”或作为预处理步骤，以提高学习者的准确性。这两个研究团体之间的许多混淆来自他们工作的基本假设：在机器学习中，性能通常是根据复制已知知识的能力来评估的，而在知识发现中Y和数据挖掘（KDD）的关键任务是发现以前未知的知识。根据已知知识评估，未形成（未监督）的方法很容易优于其他监督方法，而在典型的KDD任务中，由于训练数据不可用，监督方法无法使用。</p><h4 id="与优化的关系"><a href="#与优化的关系" class="headerlink" title="与优化的关系"></a>与优化的关系</h4><p>机器学习还与优化密切相关：许多学习问题都被定义为在一组训练示例上最小化某些损失函数。损失函数表示被训练模型的预测与实际问题实例之间的差异（例如，在分类中，人们希望为实例分配一个标签，并且模型被训练为正确预测一组示例的预先分配的标签）。这两个领域之间的差异源于泛化的目标：虽然优化算法可以最大限度地减少训练集的损失，但是机器学习关注的是最小化看不见样本的损失。</p><h4 id="与统计的关系"><a href="#与统计的关系" class="headerlink" title="与统计的关系"></a>与统计的关系</h4><p>机器学习和统计是密切相关的领域。根据迈克尔乔丹的观点，机器学习的思想，从方法论原理到理论工具，在统计学上有着悠久的历史。</p><p>Leo Breiman区分了两种统计建模范式：数据模型和算法模型，其中“算法模型”意味着或多或少的机器学习算法，如随机森林。</p><p>一些统计学家采用了机器学习的方法，从而形成了一个他们称之为统计学习的综合领域。</p><h3 id="理论"><a href="#理论" class="headerlink" title="理论"></a>理论</h3><p>学习者的一个核心目标是从其经验中进行概括。在这种情况下，概括就是学习机器在经历了学习数据集之后，能够准确地执行新的、未看到的示例/任务。训练示例来自一些通常未知的概率分布（被认为是发生空间的代表），学习者必须建立一个关于该空间的通用模型，使其能够在新情况下产生足够精确的预测。</p><p>机器学习算法及其性能的计算分析是计算机理论的一个分支，被称为计算学习理论。由于训练集是有限的，未来是不确定的，学习理论通常不能保证算法的性能。相反，性能的概率界限是很常见的。偏方差分解是量化泛化误差的一种方法。</p><p>为了在泛化上下文中获得最佳性能，假设的复杂性应与数据基础函数的复杂性相匹配。如果假设比函数的复杂度低，那么模型就在数据下面。如果模型的复杂度增加，则训练误差减小。但是，如果假设过于复杂，那么模型会被过度拟合，一般化会更差。</p><p>学习理论家除了研究学习的性能界限外，还研究学习的时间复杂性和可行性。在计算学习理论中，如果计算可以在多项式时间内完成，则认为计算是可行的。有两种时间复杂性结果。正结果表明，一类函数可以在多项式时间内学习。负结果表明，某些类在多项式时间内是无法学习的。</p><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><h4 id="学习算法类型"><a href="#学习算法类型" class="headerlink" title="学习算法类型"></a>学习算法类型</h4><p>机器学习算法的类型在其方法、输入和输出的数据类型以及要解决的任务或问题类型上有所不同。</p><h5 id="监督和半监督学习"><a href="#监督和半监督学习" class="headerlink" title="监督和半监督学习"></a>监督和半监督学习</h5><p>有监督的学习算法建立了一组数据的数学模型，其中包含输入和期望的输出。这些数据被称为训练数据，由一组训练示例组成。每个训练示例都有一个或多个输入和一个期望的输出，也称为监控信号。在半监督学习算法的情况下，一些训练示例缺少所需的输出。在数学模型中，每个训练示例都由一个数组或向量表示，训练数据由一个矩阵表示。通过对目标函数的迭代优化，监督学习算法学习可用于预测与新输入相关的输出的函数。优化函数将允许算法正确确定不属于训练数据的输入的输出。据说，随着时间的推移，一种提高输出或预测精度的算法已经学会了执行这项任务。</p><p>监督学习算法包括分类和回归。当输出限制在一组有限的值时，使用分类算法；当输出可能在一个范围内有任何数值时，使用回归算法。相似性学习是一个与回归和分类密切相关的有监督机器学习领域，但目标是使用相似函数从示例中学习，该函数测量两个对象的相似性或相关程度。它在排名、推荐系统、视觉身份跟踪、人脸验证和演讲者验证等方面都有应用。</p><h5 id="无监督学习"><a href="#无监督学习" class="headerlink" title="无监督学习"></a>无监督学习</h5><p>无监督学习算法采用一组仅包含输入的数据，并在数据中查找结构，如数据点的分组或聚类。因此，这些算法从没有被标记、分类或分类的测试数据中学习。无监督学习算法不响应反馈，而是识别数据中的共性，并根据每一个新数据中存在或不存在这种共性做出反应。无监督学习的一个核心应用是统计学中的密度估计，尽管无监督学习包含了包括总结和解释数据特征的其他领域。</p><p>聚类分析是将一组观测值分配到子集（称为聚类）中，以便根据一个或多个预先指定的标准，同一聚类内的观测值相似，而从不同聚类中提取的观测值不同。不同的聚类技术对数据的结构做出不同的假设，通常由一些相似性度量来定义和评估，例如通过内部紧度或同一个聚类成员之间的相似性，以及分离、聚类之间的差异。其他方法基于估计的密度和图连通性。</p><h5 id="强化学习"><a href="#强化学习" class="headerlink" title="强化学习"></a>强化学习</h5><p>强化学习是机器学习的一个领域，它涉及到软件代理应该如何在环境中采取行动，从而使累积奖励的某些概念最大化。由于其一般性，该领域的研究涉及到许多其他学科，如博弈论、控制论、运筹学、信息论、基于仿真的优化、多智能体系统、群体智能、统计学和遗传算法等。（MDP）。许多强化学习算法使用动态编程技术。强化学习算法不假定掌握MDP精确数学模型的知识，并在精确模型不可行时使用。强化学习算法用于自动车辆或学习人类。</p><h4 id="过程和技术"><a href="#过程和技术" class="headerlink" title="过程和技术"></a>过程和技术</h4><p>各种过程、技术和方法可应用于一种或多种机器学习算法，以提高其性能。</p><h5 id="功能学习"><a href="#功能学习" class="headerlink" title="功能学习"></a>功能学习</h5><p>一些学习算法旨在发现培训期间提供的输入的更好的表示。经典示例包括主成分分析和聚类分析。特征学习算法，也称为表示学习算法，通常试图在输入中保存信息，但也以使其有用的方式对其进行转换，通常作为执行分类或预测之前的预处理步骤。此技术允许重建来自未知数据生成分布的输入，但不一定忠实于在该分布下不可信的配置。这取代了手动功能工程，并允许机器学习这些功能并使用它们来执行特定的任务。</p><p>特征学习可以是有监督的，也可以是无监督的。在有监督的特征学习中，使用标记的输入数据学习特征。例子包括人工神经网络、多层感知器和监督字典学习。在无监督特征学习中，特征是用未标记的输入数据学习的。示例包括字典学习、独立组件分析、自动编码器、矩阵分解和各种形式的集群。</p><p>流形学习算法试图在学习表示是低维的约束下实现。稀疏编码算法试图在已知表示是稀疏的约束下实现，这意味着数学模型有许多零。多行子空间学习算法的目标是直接从多维数据的张量表示中学习低维表示，而不将其重塑为高维向量。深度学习算法发现具有更高层次、更抽象特征的多层次表示或特征层次。根据（或生成）低级功能定义。有人认为，智能机器是一种学习表示的机器，它能解开解释观测数据的变化的基本因素。</p><p>特征学习的动机是机器学习任务（如分类）。通常需要数学和计算上便于处理的输入。然而，现实世界的数据，如图像、视频和感官数据，并没有屈服于算法上定义特定特征的尝试。另一种方法是通过检查发现这些特征或表示，而不依赖于显式算法。</p><h5 id="分散学习词典"><a href="#分散学习词典" class="headerlink" title="分散学习词典"></a>分散学习词典</h5><p>稀疏字典学习是一种特征学习方法，其中训练实例表示为基函数的线性组合，并假定为稀疏矩阵。该方法具有较强的NP难解性和近似难解性[32]一种常用的稀疏字典学习启发式方法是K-SVD算法。稀疏字典学习已经应用于多种场合。在分类中，问题是确定以前看不见的培训示例属于哪个类。对于已经构建了每个类的字典，新的培训示例与相应字典最稀疏地表示的类相关联。稀疏字典学习在图像去噪中也得到了应用。关键的想法是一个干净的图像补丁可以用图像字典稀疏地表示，但是噪声不能。</p><h5 id="异常检测"><a href="#异常检测" class="headerlink" title="异常检测"></a>异常检测</h5><p>在数据挖掘中，异常检测，也称为异常检测，是对稀有项目、事件或观察结果的识别，这些项目、事件或观察结果与大多数数据显著不同，从而引起怀疑。通常，异常项目代表一个问题，如银行欺诈、结构缺陷、医疗问题或文本中的错误。异常被称为异常值、新奇、噪音、偏差和异常。</p><p>特别是在滥用和网络入侵检测的背景下，有趣的对象往往不是罕见的对象，而是意外的突发活动。这种模式不符合离群值作为稀有对象的常见统计定义，并且许多离群值检测方法（特别是无监督算法）将在此类数据上失败，除非已对其进行了适当的聚合。相反，聚类分析算法可能能够检测到由这些模式形成的微聚类。</p><p>存在三大类异常检测技术。无监督异常检测技术在假设数据集中的大多数实例都是正常的情况下，通过寻找似乎最不适合数据集其余部分的实例，检测未标记测试数据集中的异常。监督异常检测技术需要一个标记为“正常”和“异常”的数据集，并且需要训练分类器（与许多其他统计分类问题的关键区别在于离群值检测固有的不平衡性）。半监督异常检测技术从一个给定的正常训练数据集构造一个代表正常行为的模型，然后测试模型生成测试实例的可能性。</p><h5 id="决策树"><a href="#决策树" class="headerlink" title="决策树"></a>决策树</h5><p>决策树学习使用决策树作为预测模型，从项目的观察（在分支中表示）到项目目标值的结论（在叶中表示）。它是用于统计、数据挖掘和机器学习的预测建模方法之一。目标变量可以采用离散值集的树模型称为分类树；在这些树结构中，叶表示类标签，分支表示导致这些类标签的特征的连词。目标变量可以取连续值（通常为实数）的决策树称为回归树。在决策分析中，决策树可以用来直观、明确地表示决策和决策。在数据挖掘中，决策树描述数据，但生成的分类树可以作为决策的输入。</p><h5 id="关联规则"><a href="#关联规则" class="headerlink" title="关联规则"></a>关联规则</h5><p>关联规则学习是一种基于规则的机器学习方法，用于发现大型数据库中变量之间的关系。它的目的是使用某种“有趣性”的度量来识别在数据库中发现的强规则。这种基于规则的方法在分析更多数据时生成新规则。假设数据集足够大，最终目标是帮助机器模拟人脑的特征提取和抽象关联能力，以获取尚未分类的数据。</p><p>基于规则的机器学习是任何机器学习方法的通用术语，用于识别、学习或发展“规则”来存储、操作或应用知识。基于规则的机器学习算法的定义特征是识别和利用一组关系规则，这些规则共同表示系统捕获的知识。这与其他机器学习算法不同，这些算法通常识别一个奇异模型，该模型可普遍应用于任何实例，以进行预测。基于规则的机器学习方法包括学习分类器系统、关联规则学习和人工免疫系统。</p><p>基于强规则的概念，Rakesh Agrawal、Tomasz Imieli_ski和Arun Swami引入了关联规则，用于发现超市销售点（POS）系统记录的大规模交易数据中产品之间的规律性。例如，洋葱、土豆在超市的销售数据中发现，如果顾客一起购买洋葱和土豆，他们也可能购买汉堡包肉。这些信息可作为市场营销活动（如促销定价或产品投放）决策的基础。除了市场篮分析之外，关联规则现在还应用于应用领域，包括Web使用挖掘、入侵检测、连续生产和生物信息学。与序列挖掘不同，关联规则学习通常不考虑事务内部或跨事务的项目顺序。</p><p>学习分类器系统（LCS）是一系列基于规则的机器学习算法，它们将发现组件（通常是遗传算法）与学习组件结合起来，执行有监督学习、强化学习或无监督学习。他们试图确定一组与上下文相关的规则，这些规则以分段的方式共同存储和应用知识，以便做出预测。</p><p>归纳逻辑规划（ILP）是一种规则学习方法，它将逻辑规划作为输入实例、背景知识和假设的统一表示。给定已知背景知识的编码和一组表示为事实逻辑数据库的实例，ILP系统将派生出一个假设逻辑程序，该程序包含所有正示例和非负示例。归纳编程是一个相关的领域，它考虑了任何一种表示假设（不仅是逻辑编程）的编程语言，例如函数程序。</p><p>归纳逻辑编程在生物信息学和自然语言处理中特别有用。Gordon Plotkin和Ehud Shapiro在逻辑环境中为归纳机器学习奠定了初步的理论基础。夏皮罗于1981建立了他们的第一个实现（模型推理系统）：Prolog程序，从正反例子归纳归纳逻辑程序。非亲子归纳法，提出一种解释观察到的事实的理论，而不是数学归纳法，为一个有序集合的所有成员证明一个性质。</p><h4 id="人工神经网络"><a href="#人工神经网络" class="headerlink" title="人工神经网络"></a>人工神经网络</h4><p>人工神经网络（anns），或称连接主义系统，是受构成动物大脑的生物神经网络的模糊启发而设计的计算系统。神经网络本身不是一种算法，而是许多不同机器学习算法共同工作和处理复杂数据输入的框架。这种系统“学习”通过考虑示例来执行任务，通常不使用任何特定于任务的规则进行编程。</p><p>神经网络是一种基于被称为“人工神经元”的连接单元或节点集合的模型，它松散地模拟生物大脑中的神经元。每一个连接，就像生物大脑中的突触一样，都能把信息，一个“信号”从一个人工神经元传递到另一个神经元。接收信号的人工神经元可以对其进行处理，然后再向与之相连的其他人工神经元发送信号。在通常的人工神经网络实现中，人工神经元之间连接处的信号是实数，每个人工神经元的输出由其输入和的非线性函数计算。人工神经元之间的连接称为“边缘”。人工神经元和边缘的重量通常随着学习的进行而调整。重量增加或减少连接处的信号强度。人工神经元可能有一个阈值，只有当聚合信号超过该阈值时才发送信号。通常，人工神经元聚集成层。不同的层可以对其输入执行不同类型的转换。信号从第一层（输入层）传输到最后一层（输出层），可能在多次遍历层之后。</p><p>神经网络方法的最初目标是以人脑的方式解决问题。然而，随着时间的推移，注意力转移到了执行特定任务上，导致了对生物学的偏离。人工神经网络已广泛应用于计算机视觉、语音识别、机器翻译、社会网络过滤、游戏机和电子游戏以及医学诊断等领域。</p><p>深度学习由人工神经网络中的多个隐藏层组成。这种方法试图模拟人脑将光和声音处理成视觉和听觉的方式。深度学习的一些成功应用是计算机视觉和语音识别。</p><h4 id="支持向量机"><a href="#支持向量机" class="headerlink" title="支持向量机"></a>支持向量机</h4><p>支持向量机（SVMS）又称支持向量网络，是一组用于分类和回归的相关监督学习方法。给出了一组训练示例，每个示例都标记为属于两个类别中的一个，SVM训练算法建立了一个模型，该模型预测新示例是否属于一个类别。SVM训练算法是一个非概率、二元、线性分类器，尽管在Probabi中使用SVM的方法有platt scaling。列表分类设置。除了执行线性分类之外，SVMS还可以使用所谓的内核技巧高效地执行非线性分类，将输入隐式映射到高维特征空间。</p><h4 id="贝叶斯网络"><a href="#贝叶斯网络" class="headerlink" title="贝叶斯网络"></a>贝叶斯网络</h4><p>贝叶斯网络、信念网络或有向无环图模型是一种概率图模型，它用有向无环图（DAG）表示一组随机变量及其条件独立性。例如，贝叶斯网络可以表示疾病和症状之间的概率关系。根据症状，该网络可用于计算各种疾病出现的概率。存在执行推理和学习的有效算法。对变量序列（如语音信号或蛋白质序列）建模的贝叶斯网络称为动态贝叶斯网络。贝叶斯网络在不确定性条件下能表示和求解决策问题的推广称为影响图。</p><h4 id="遗传算法"><a href="#遗传算法" class="headerlink" title="遗传算法"></a>遗传算法</h4><p>遗传算法（GA）是一种模拟自然选择过程的搜索算法和启发式技术，利用突变和交叉等方法生成新的基因型，以期找到一个给定问题的良好解决方案。在机器学习中，80年代和90年代使用了遗传算法。相反，机器学习技术被用来提高遗传算法和进化算法的性能。</p><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><p>机器学习有许多应用，包括：</p><p>2006年，网络电影公司Netflix举行了第一次“Netflix奖”竞赛，以寻找一个能够更好地预测用户偏好并提高现有Cinematch电影推荐算法精度至少10%的程序。一个由AT&amp;T实验室研究人员组成的联合小组与大混乱和实用理论小组合作，建立了一个合奏模型，以1.6亿美元的价格赢得2009年的大奖。Ecommendation），他们相应地改变了推荐引擎。2010年，《华尔街日报》报道了公司Rebellion Research以及他们使用机器学习来预测金融危机。2012年，Sun Microsystems的联合创始人Vinod Khosla预测，未来两个时期，80%的医生工作岗位将失去。数十年来，自动化机器学习医学诊断软件问世2014年，据报道，机器学习算法已应用于艺术史领域，用于研究美术绘画，并可能揭示了艺术家之间之前未被认可的影响。</p><h3 id="限制"><a href="#限制" class="headerlink" title="限制"></a>限制</h3><p>虽然机器学习在某些领域已经发生了变革，但是机器学习程序往往无法实现预期的结果。原因很多：缺乏（合适的）数据、无法访问数据、数据偏差、隐私问题、选择不当的任务和算法、错误的工具和人员、缺乏资源和评估。</p><p>2018年，Uber的一辆自驾汽车未能检测到一名行人，该行人在一次碰撞中丧生。尝试在医疗保健中使用机器学习，而IBM Watson系统即使经过多年的时间和数十亿的投资，也未能实现。</p><h4 id="偏见"><a href="#偏见" class="headerlink" title="偏见"></a>偏见</h4><p>尤其是机器学习方法可能存在不同的数据偏差。仅针对当前客户的机器学习系统可能无法预测培训数据中未表示的新客户群的需求。</p><p>当对人造数据进行培训时，机器学习可能会产生与社会上已经存在的相同的宪法和无意识偏见。从数据中学习的语言模型已被证明包含类似人类的偏见。用于刑事风险评估的机器学习系统被发现对黑人有偏见。</p><p>在2015年，谷歌的照片经常将黑人标记为大猩猩，而在2018年，这一问题仍然没有得到很好的解决，但据报道谷歌仍在使用解决方案从训练数据中删除所有大猩猩，因此根本无法识别真正的大猩猩。</p><p>2016年，微软测试了一款从Twitter上学习的聊天机器人，它很快就学会了种族主义和性别歧视的语言。由于这些挑战，机器学习的有效使用可能需要更长的时间才能在其他领域被采用。关注减少机器学习的偏见，推动机器学习为人类造福，是我的问题。</p><p>人工智能科学家，包括李飞飞，不断地表达，他提醒工程师，“人工智能没有任何人造的东西……它是受人启发的，它是由人创造的，最重要的是它会影响人。这是一个我们才刚刚开始了解的强大工具，这是一个深刻的责任。</p><h3 id="模型评估"><a href="#模型评估" class="headerlink" title="模型评估"></a>模型评估</h3><p>分类机学习模型可以通过精度估计技术（如维持方法）进行验证，该方法将训练和测试集中的数据进行分割（通常为2/3训练集和1/3测试集指定），并评估训练模型在测试集上的性能。相比之下，k-折叠交叉验证方法将数据随机划分为k子集，然后分别进行k实验，考虑1个用于评估的子集和剩余的k-1子集用于训练模型。除了维持和交叉验证方法外，bootstrap还可以用来评估模型的准确性，它对n个实例进行抽样，并从数据集中替换这些实例。</p><p>除了总的准确性外，研究者还经常报告敏感性和特异性，即真阳性率（TPR）和真阴性率（TNR）。同样，研究者有时报告假阳性率（fpr）和假阴性率（fnr）。然而，这些比率并不能揭示其分子和分母。总操作特性（TOC）是表达模型诊断能力的有效方法。TOC显示了前面提到的速率的分子和分母，因此TOC提供的信息比常用的接收器操作特征（ROC）和曲线下ROC的相关面积（AUC）更多。</p><h3 id="伦理"><a href="#伦理" class="headerlink" title="伦理"></a>伦理</h3><p>机器学习提出了一系列伦理问题。对收集到的带有偏见的数据集进行培训的系统可能会在使用时显示这些偏见（算法偏见），从而数字化文化偏见。例如，使用具有种族主义雇佣政策的公司的招聘数据可能会导致机器学习系统复制偏见，通过对求职者与以前的SUC的相似性进行评分。负责人负责收集系统使用的数据和算法规则文档，因此是机器学习的关键部分。</p><p>因为语言包含偏见，所以在语言语料库上训练的机器也必然会学习偏见。</p><p>其他形式的伦理挑战，与个人偏见无关，在医疗保健中更常见。卫生保健专业人员担心，这些系统的设计可能不符合公众利益，而是作为创收机器。这在美国尤其如此，那里存在着一个永久的道德困境，即改善医疗保健，同时增加利润。例如，算法的设计可以为患者提供不必要的测试或药物，在这些测试或药物中，算法的所有者持有股份。在医疗保健领域，机器学习有巨大的潜力，为专业人员提供诊断、药物治疗甚至为患者规划康复路径的强大工具，但只有在前面提到的个人偏见和这些“贪婪”偏见得到解决之前，这种情况才会发生。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;机器学习（ML）是对计算机系统使用的算法和统计模型的科学研究，这些算法和统计模型不使用显式指令，而是依靠模式和推理来有效地执行特定的任务。它被视为人工智能的一个子集。机器学习算法基于样本数据（称为“训练数据”）建立数学模型，以便在没有明确编程来执行任务的情况下做出预测或决策
      
    
    </summary>
    
    
      <category term="人工智能" scheme="http://wangchengfei.info/tags/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>人工智能</title>
    <link href="http://wangchengfei.info/2019/04/24/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    <id>http://wangchengfei.info/2019/04/24/人工智能/</id>
    <published>2019-04-24T01:32:21.000Z</published>
    <updated>2019-04-26T05:58:34.640Z</updated>
    
    <content type="html"><![CDATA[<p>在计算机科学中，人工智能（ai）有时被称为机器智能，是机器所展示的智能，与人类和动物所展示的自然智能不同。计算机科学将人工智能研究定义为对“智能代理”的研究：任何感知环境并采取最大化成功实现目标机会的行动的设备。通俗地说，“人工智能”一词用于描述模拟人类与其他人类关联的“认知”功能的机器。思想，如“学习”和“解决问题”。</p><p>随着机器能力的日益增强，被认为需要“智能”的任务常常被从人工智能的定义中删除，这种现象被称为人工智能效应。特斯勒定理中的一句妙语是：“人工智能是任何尚未完成的工作。” 例如，光学字符识别经常被排除在人工智能之外，成为一种常规技术，现代机器能力通常被归类为人工智能，包括成功理解人类语言，在最高层次上竞争。在战略游戏系统（如国际象棋和围棋）、自动操作汽车、内容交付网络中的智能路由和军事模拟中。</p><p>人工智能可以分为三种不同类型的系统：分析型人工智能、启发型人工智能和人性化人工智能。</p><p>分析型人工智能与认知智能一致的特征；生成世界的认知表征，并利用基于过去经验的学习来通知未来决策。受人类启发的人工智能具有来自认知和情感智能的元素；除了认知元素之外，还了解人类的情感，并在决策时考虑它们。人性化的人工智能显示出各种能力的特征（即认知、情感和社会智力），能够自我意识，并且在与他人的互动中具有自我意识。</p><p>人工智能于1956年作为一门学术学科成立，此后的几年里，经历了几次乐观的浪潮，接着是失望和资金损失（被称为“人工智能冬天”），接着是新的方法、成功和新的资金投入，在其历史的大部分时间里，人工智能研究被划分为对于经常无法相互沟通的子领域，这些子领域基于技术考虑，例如特定目标（例如“机器人”或“机器学习”），使用特定工具（“逻辑”或人工神经网络），或深刻的哲学差异。</p><p>人工智能研究的传统问题（或目标）包括推理、知识表示、规划、学习、自然语言处理、感知以及移动和操纵物体的能力一般智能是该领域的长期目标之一，方法包括统计方法、计算智能和Tradit。象征性的人工智能。人工智能中使用了许多工具，包括搜索和数学优化版本、人工神经网络以及基于统计、概率和经济学的方法。人工智能领域涉及计算机科学、信息工程、数学、心理学、语言学、哲学等许多领域。</p><p>这个领域建立在这样一个主张上，即人类的智能“可以被如此精确地描述，以至于可以制造出一台机器来模拟它”。这提出了关于精神的本质和创造具有类人智能的人造人的伦理的哲学论据，这是神话、小说和哲学所探讨的问题。自远古以来，我就很自以为是。一些人还认为，如果人工智能的发展不减，它对人类是一种危险。其他人认为，人工智能不同于以往的技术革命，会造成大量失业的风险。</p><p>二十一世纪，随着云计算、大数据和理论理解的同步发展，人工智能技术经历了复兴；人工智能技术已成为技术产业的重要组成部分，有助于解决计算机科学、软件工程和操作学中许多具有挑战性的问题。</p><h3 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h3><p>有思想能力的人造人在古代被视为讲故事的工具，在小说中很常见，如玛丽·雪莱的《弗兰肯斯坦》或卡雷尔·阿佩克的《R.U.R》（罗森的《通用机器人》）。这些人物及其命运引发了许多与《人工智能伦理学》中讨论的问题相同的问题。</p><p>对机械或“形式”推理的研究始于古代的哲学家和数学家。对数学逻辑的研究直接导致了阿兰·图灵的计算理论，该理论认为，一台机器，通过改变简单的符号“0”和“1”，可以模拟任何可能的数学推导行为。这种数字计算机可以模拟任何形式推理过程的见解被称为丘奇-图灵理论，伴随着神经生物学、信息理论和控制论的同时发现，这使得研究人员考虑了构建电子大脑的可能性。图灵提出，“如果人类不能区分机器和人类的反应，那么机器可以被认为是“智能的”。第一个被公认为人工智能的工作是麦卡卢奇和皮特1943年为图灵完整的“人工神经元”的正式设计。</p><p>人工智能研究领域于1956年诞生于达特茅斯学院的一个研讨会上。与会者艾伦·纽厄尔（CMU）、赫伯特·西蒙（CMU）、约翰·麦卡锡（MIT）、马文·明斯基（MIT）和亚瑟·塞缪尔（IBM）成为人工智能研究的创始人和领导者。他们和他们的学生制作了被媒体称为“惊人”的程序。在学习跳棋策略（约1954年）时（据报道，到1959年，跳棋的效果比普通人好），在代数中解决单词问题，证明逻辑定理（逻辑理论家，首次运行于1956年），讲英语到60年代中期，美国的研究得到了国防部和洛杉矶大学的大力资助。实验室已经在世界各地建立起来了，人工智能的创立者们对未来持乐观态度：赫伯特·西蒙预言，“机器在20年内将能够做任何人类能做的工作”。马文·明斯基同意，他写道，“在一代人的时间内……创造“人工智能”的问题将得到实质性的解决。</p><p>他们没有意识到剩下的一些任务的困难。在1974年，美国和英国政府都停止了人工智能的探索性研究，这是对詹姆斯·莱特希尔爵士（37岁）的批评和美国国会持续施压以资助更具生产力的项目的回应。接下来的几年将被称为“人工智能的冬天”，在这个时期，为人工智能项目获得资金是困难的。</p><p>20世纪80年代初，人工智能研究因专家系统的商业成功而复兴，一种模拟人类专家知识和分析技能的人工智能程序。到1985年，人工智能的市场已经超过10亿美元。与此同时，日本的第五代计算机项目激励美国和英国政府恢复对学术研究的资助。然而，从1987年Lisp机器市场崩溃开始，人工智能再一次声名狼藉，第二次，持续时间更长的停滞开始了。</p><p>在20世纪90年代末和21世纪初，人工智能开始被用于物流、数据挖掘、医疗诊断和其他领域。之所以成功，是因为计算能力（见摩尔定律）、对解决特定问题的更大重视、人工智能与其他领域（如统计学、经济学和数学）之间的新联系以及委员会管理。研究人员对数学方法和科学标准的研究。Deep Blue于1997年5月11日成为第一个击败世界象棋冠军Garry Kasparov的计算机象棋系统。</p><p>2011年，一场危险！问答展示赛，IBM的问答系统，华生，击败了两大冠军，Brad Rutter和Ken Jennings，获得了巨大的优势。更快的计算机、算法改进和对大量数据的访问，使机器学习和感知取得了进步；渴望数据的深度学习方法在2012年左右开始主导精度基准。Kinect，它提供了一个三维身体运动界面。对于Xbox 360和Xbox One而言，它使用的算法与智能手机中的智能个人助理一样，都是从漫长的人工智能研究中产生。2016年3月，AlphaGo在与围棋冠军Lee Sedol的5场围棋中赢得了4场，成为第一个击败无障碍职业围棋选手的计算机围棋系统。2017年围棋高峰会的未来，阿尔法戈与当时连续两年蝉联世界第一的克杰，三局比赛，标志着人工智能发展的一个重要里程碑的完成，围棋是一个极其复杂的游戏，比国际象棋更为复杂。</p><p>据彭博社的杰克•克拉克（Jack Clark）称，2015年是人工智能的里程碑年，谷歌内部使用人工智能的软件项目数量从2012年的“零星使用”增加到2700多个项目。Clark还提供了事实数据，表明自2011年以来，图像处理任务中的错误率已显著下降。他将这归因于可复用的神经网络的增加，这是由于云计算基础设施的增加以及研究工具和数据集的增加。其他引用的示例包括微软的开发Skype系统可以自动从一种语言转换到另一种语言，Facebook的系统可以向盲人描述图像。在2017年的一项调查中，五分之一的公司报告称，他们“在某些产品或流程中加入了人工智能”。2016年前后，中国大大加快了其政府融资速度；鉴于其庞大的供应量一些观察家认为，随着数据的增长及其研究成果的快速增长，中国可能正逐步成为“人工智能超级大国”。</p><h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><p>一个典型的人工智能分析环境，并采取行动，以最大限度地提高其成功的机会。人工智能的预期效用函数（或目标）可以是简单的（1如赢得了一场围棋，否则为0），也可以是复杂的（在数学上与过去成功的行动相似）。目标可以被明确地定义或诱导。如果人工智能被设定为“强化学习”，目标可以通过奖励某些类型的行为或惩罚其他类型的行为而被隐含地诱导。或者，进化系统可以通过使用“适应功能”来诱导目标变异并优先复制高得分的人工智能系统，类似于动物如何进化为天生的欲望。RTAIN目标，例如寻找食物，一些人工智能系统，例如最近的邻居，而不是通过类比推理，这些系统通常不是给定的目标，除非目标隐含在他们的培训数据中，如果非目标系统被设计成一个“目标”是成功适应的系统，那么这些系统仍然可以作为基准。划分其狭窄的分类任务。</p><p>人工智能通常围绕着算法的使用。一个算法是机械计算机可以执行的一组明确的指令。一个复杂的算法通常建立在其他更简单的算法之上。</p><p>许多人工智能算法能够从数据中学习；它们可以通过学习新的启发式（策略或“经验法则”，在过去很有效）来增强自己，或者自己编写其他算法。下面描述的一些“学习者”，包括贝叶斯网络、决策树和最近邻，理论上可以（给定无限的数据、时间和内存）学习近似任何函数，包括哪种数学函数组合最能描述世界。因此，这些学习者可以通过考虑每一个可能的假设并将它们与数据相匹配，从而获得所有可能的知识。在实践中，几乎不可能考虑每一种可能性，因为“组合爆炸”现象，解决问题所需的时间呈指数增长。许多人工智能研究涉及如何识别和避免考虑广泛的可能性，这些可能性不大可能是有益的。例如，当观看地图时，寻找从丹佛到东部的纽约最短的行驶路线，在大多数情况下，你可以跳过任何通过旧金山或其他地区的路径。因此，使用像*这样的寻路算法的人工智能可以避免组合爆炸，如果必须依次考虑每一条可能的路径，那么组合爆炸就会发生。</p><p>最早（也是最容易理解）的人工智能方法是象征性的（例如形式逻辑）：“如果一个健康的成年人发烧，那么他们可能患上流感”。第二种更为普遍的方法是贝叶斯推理：“如果当前患者发烧，调整他们患流感的可能性。”第三种主要的方法，在日常的商业人工智能应用中非常流行，是类似的，如SVM和最近邻：“通过检查已知的过去患者的记录，这些患者的温度、症状、年龄和其他因素大部分与当前患者相匹配，其中X%的患者患上了流感。”第四种方法很难直观地理解，但受到大脑机械工作原理的启发：人工神经网络方法使用人工“神经元”，通过将自身与所需的输出进行比较并改变内部神经元之间连接的强度来“强化”似乎是有用的。这四种主要方法可以相互重叠，也可以与进化系统重叠；例如，神经网络可以学习做出推论、归纳和进行类比。一些系统隐式或显式地使用这些方法中的多种，以及许多其他的人工智能和非人工智能算法；根据问题的不同，最佳方法通常是不同的。</p><p>学习算法的工作原理是、工作良好的策略、算法和推论在未来可能会继续表现良好。这些推论是显而易见的，比如“在过去的10000天里，太阳每天早上升起，明天早上也可能升起”。它们可以是细微的，例如“X%的科有地理上不同的物种和颜色的变体，所以有Y%的可能性，未发现的黑天鹅存在”。学习者也在“奥卡姆剃刀”的基础上工作：解释数据的最简单理论是最有可能的。因此，要想取得成功，学习者的设计必须使其更喜欢简单的理论而不是复杂的理论，除非复杂的理论被证明是相当好的。解决一个不好的，过于复杂的理论，去适应所有过去的训练数据，这被称为过度拟合。许多系统试图通过根据理论与数据的匹配程度来奖励理论来减少过度拟合，但根据理论的复杂程度来惩罚理论。</p><p>除了经典的过度拟合，算法还可能因为“学习错误的数据”而失误。一个搞笑的例子是，一个只在棕色黑猫的图片上训练的图像分类器可能会得出结论，所有棕色斑块都可能是猫。一个现实世界的例子是，与人类不同，当前的图像分类器不确定图片组件之间的空间关系，而是学习抽象模式。指人类所忽略的像素，但与某些类型的真实物体的图像线性相关的像素。在合法图像上叠加这样的模式会导致“adversarial”图像，系统会错误分类。</p><p>与人类相比，现有的人工智能缺乏人类“常识推理”的几个特征；最显著的是，人类对于“自然物理”的推理具有强大的机制，如空间、时间和物理交互。这使得即使是年幼的孩子也很容易做出这样的推论：“如果我把这支笔从桌子上滚下来，它就会掉到地上。”人类还有一种强大的“民间心理”机制，可以帮助他们理解自然语言的句子，比如“市议员因为倡导暴力而拒绝了示威者的许可”。（一个普通的人工智能很难推断出议员或示威者是否是所谓的鼓吹暴力的人。）缺乏“共同知识”意味着人工智能经常犯不同于人类的错误，其方式似乎不可理解。例如，现有的自动驾驶汽车不能像人类那样准确地解释行人的位置和意图，而是必须使用非人类的推理模式来避免事故发生。</p><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>人工智能的总体研究目标是创造使计算机和机器以智能方式工作的技术。模拟（或创造）智能的一般问题被分解为子问题。这些特征或能力是研究人员期望智能系统显示出来的。下面描述的特性受到了最广泛的关注。</p><h4 id="推理，解决问题"><a href="#推理，解决问题" class="headerlink" title="推理，解决问题"></a>推理，解决问题</h4><p>早期的研究人员开发了模拟人类解决难题或进行逻辑推理时使用的逐步推理的算法，到20世纪80年代末和90年代，人工智能研究已经开发了处理不确定或不完整信息的方法，采用了概率和经济学的概念。</p><p>事实证明，这些算法不足以解决大型推理问题，因为它们经历了一次“组合爆炸”：随着问题越来越大，它们会以指数级的速度变慢。事实上，甚至人类也很少使用早期人工智能研究能够建模的逐步推论。他们用快速、直观的判断来解决大部分问题。</p><h4 id="知识表示"><a href="#知识表示" class="headerlink" title="知识表示"></a>知识表示</h4><p>知识表示和知识工程是经典人工智能研究的核心。一些“专家系统”试图将专家在某些狭义领域拥有的明确知识集合起来。此外，一些项目试图将普通人所知道的“常识知识”收集到一个包含广泛的世界知识的数据库中。一个全面的常识性知识库包含的内容包括：对象、属性、类别和对象之间的关系；情况、事件、状态和时间；因果关系；关于知识的知识（我们对其他人所知的知识）；以及许多其他研究较少的领域。“存在”的表示是一个本体：一组正式描述的对象、关系、概念和属性，以便软件代理能够解释它们。这些语义被描述为逻辑概念、角色和个人，并且通常在Web本体语言中实现为类、属性和个体。最一般的本体被称为上层本体，它试图在DOMA之间充当中介器，为所有其他知识提供基础。在涉及特定知识领域（感兴趣的领域或关注的领域）的特定知识的本体中。这种形式化的知识表示可用于基于内容的索引和检索，场景解释，临床决策支持，知识发现（从大型数据库中挖掘“有趣的”和可操作的推论）等领域。</p><p>知识表示中最困难的问题是：</p><h5 id="违约推理与资格问题"><a href="#违约推理与资格问题" class="headerlink" title="违约推理与资格问题"></a>违约推理与资格问题</h5><p>人们所知道的许多事情都是以“工作假设”的形式出现的。例如，如果一只鸟在交谈中出现，人们通常会想象一只拳头大小、唱歌和飞翔的动物。所有的鸟都不是这样的。约翰·麦卡锡在1969年（93年）将这个问题认定为资格问题：对于人工智能研究人员所关心的常识性规则，往往会有大量的例外。在抽象逻辑所要求的方式中，几乎没有什么是简单的对或错。人工智能研究已经探索了许多解决这个问题的方法。</p><h5 id="常识知识的广度"><a href="#常识知识的广度" class="headerlink" title="常识知识的广度"></a>常识知识的广度</h5><p>一般人所知道的原子事实的数量非常大。试图建立一个完整的常识知识库（如cyc）的研究项目需要大量费力的本体工程，它们必须手工一次建立一个复杂的概念。</p><h5 id="一些常识知识的符号形式"><a href="#一些常识知识的符号形式" class="headerlink" title="一些常识知识的符号形式"></a>一些常识知识的符号形式</h5><p>人们所知道的大部分知识并不是他们可以口头表达的“事实”或“陈述”。例如，一个象棋大师会避开一个特定的象棋位置，因为它“感觉太暴露了”，或者一个艺术评论家可以看到一个雕像，并意识到它是一个假象，这些是人类大脑中的无意识和亚符号直觉或倾向。这样的知识会通知、支持和提供一个符号的上下文，有意识的知识。正如亚符号推理的相关问题一样，希望定位人工智能、计算智能或统计人工智能能够提供表示这种知识的方法。</p><h4 id="规划"><a href="#规划" class="headerlink" title="规划"></a>规划</h4><p>智能代理必须能够设定目标并实现这些目标。【99】他们需要一种可视化未来的方式——一种对世界状态的表示，并能够预测他们的行为将如何改变未来，并能够做出使可用选择的效用（或“价值”）最大化的选择。</p><p>在经典规划问题中，代理可以假定它是世界上唯一的系统，允许代理确定其行为的后果。但是，如果代理不是唯一的参与者，那么它要求代理可以在不确定的情况下进行推理。这就需要一个代理，它不仅可以评估环境并做出预测，还可以评估其预测，并根据其评估进行调整。</p><p>多智能体规划是利用多个智能体之间的合作和竞争来实现既定目标的。进化算法和群体智能使用这种规划行为。</p><h4 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h4><p>机器学习是人工智能研究的一个基本概念，是研究通过经验自动改进的计算机算法。</p><p>无监督学习是指在输入流中发现模式的能力，而无需人先标记输入。</p><p>监督学习包括分类和数值回归，这需要人先标记输入数据。分类是在看到多个类别的事物的一些例子之后，用来确定事物属于哪个类别。回归是试图产生一个描述输入和输出之间关系的函数，并预测输出应如何随着输入的变化而变化，分类器和回归学习者都可以被视为“函数逼近器”，试图学习一个未知（可能是隐式的）函数；例如，垃圾邮件分类器C一个被视为学习功能，从一封电子邮件的文本映射到两个类别之一，“垃圾邮件”或“非垃圾邮件”。计算学习理论可以通过计算复杂度、样本复杂度（需要多少数据）或其他优化概念来评估学习者。</p><p>在强化学习中，代理因良好的响应而得到奖励，因不良而受到惩罚。代理使用这个奖励和惩罚序列来形成在其问题空间中操作的策略。</p><h4 id="自然语言处理"><a href="#自然语言处理" class="headerlink" title="自然语言处理"></a>自然语言处理</h4><p>自然语言处理（NLP）使机器能够阅读和理解人类语言。一个足够强大的自然语言处理系统将使自然语言用户界面和直接从人类书面来源（如新闻专线文本）获取知识成为可能。自然语言处理的一些直接应用包括信息检索、文本挖掘、问答和机器翻译，许多当前的方法都使用单词共现频率来构造文本的句法表示。”关键词定位“搜索策略是流行的，可扩展的，但很愚蠢；搜索“dog”的查询可能只匹配文本单词“dog”的文档，并错过单词“poodle”的文档。词汇亲和力策略使用“意外”等词汇的出现来评估文档的情感。现代统计NLP方法可以将所有这些策略和其他策略结合起来，并且通常在页面或段落级别上达到可接受的准确性，但仍然缺乏对孤立句子进行良好分类所需的语义理解。除了编码语义常识知识的常见困难之外，现有的语义NLP有时扩展得太差，在业务应用程序中不可行。除了语义NLP，“叙述”NLP的最终目标是充分理解常识推理。</p><h4 id="感知"><a href="#感知" class="headerlink" title="感知"></a>感知</h4><p>机器感知是利用传感器（如摄像头（可见光谱或红外）、麦克风、无线信号和主动激光雷达、声纳、雷达和触觉传感器）的输入来推断世界各个方面的能力。应用包括语音识别，面部识别和对象识别，计算机视觉是分析视觉输入的能力。这种输入通常是不明确的；一个巨大的、50米高的步行者可能产生与附近正常大小的步行者完全相同的像素，这要求人工智能判断不同解释的相对可能性和合理性，例如，通过使用其“对象模型”来评估50米步行者不存在。</p><h4 id="运动和操纵"><a href="#运动和操纵" class="headerlink" title="运动和操纵"></a>运动和操纵</h4><p>人工智能被广泛应用于机器人技术中，先进的机械臂和其他工业机器人，广泛应用于现代工厂，可以从经验中学习如何在存在摩擦和齿轮滑动的情况下高效移动。现代移动机器人，当给定一个小的、静态的和可见的环境时，可以很容易地确定其位置并绘制其地图。动态环境，如（内窥镜检查）病人呼吸身体的内部，构成了一个更大的挑战。动态规划是将运动任务分解为“基本体”（如单个关节运动）的过程。这种运动通常涉及顺从运动，这是一种运动需要与物体保持物理接触的过程。莫拉维奇的悖论概括了人类认为理所当然的低级感觉运动技能很难编程为机器人；这一悖论是以汉斯·莫拉维奇命名的，他在1988年，“使计算机在智力测试或跳棋方面表现出成人水平的能力相对容易，在感知和移动性方面很难或不可能给他们一岁孩子的技能。”。这归因于这样一个事实，即与跳棋不同，身体的灵巧性是一个直接的目标。百万年来自然选择的T值。</p><h4 id="社会智力"><a href="#社会智力" class="headerlink" title="社会智力"></a>社会智力</h4><p>Moravec的悖论可以扩展到多种形式的社会智能。分布式多代理自动车辆协调仍然是一个难题。情感计算是一个跨学科的保护伞，由识别、解释、处理或模拟人类影响的系统组成。适度的成功与情感计算相关的包括文本情感分析和最近的多式情感分析（见多式情感分析），其中人工智能对录像主题显示的影响进行分类。</p><p>从长远来看，社会技能以及对人类情感和博弈论的理解对于一个社会主体是有价值的。能够通过了解他人的动机和情绪状态来预测他们的行为，这将允许代理人做出更好的决定。有些计算机系统模仿人类的情感和表达方式，使其对人类互动的情感动态更为敏感，或者以其他方式促进人与计算机的互动。同样，一些虚拟助手被编程为能够交谈，甚至能够幽默地开玩笑；这往往会给天真的用户一个不现实的想法。对现有计算机代理的智能化程度的理解。</p><h4 id="常识"><a href="#常识" class="headerlink" title="常识"></a>常识</h4><p>历史上，诸如cyc知识库（1984-）和大规模的日本第五代计算机系统倡议（1982-1992）等项目试图涵盖人类认知的广度。这些早期的项目未能摆脱非定量符号逻辑模型的局限，回顾起来，大大低估了跨域人工智能的难度。现在，绝大多数现有的人工智能研究人员都在研究可处理的“窄人工智能”应用（如医学诊断或汽车导航）。许多研究人员预测，这种“窄人工智能”工作在不同的单个领域最终将被纳入一台具有人工通用智能（AGI）的机器中，并结合本文中提到的大多数狭隘技能，在某些方面甚至超过了人类在大多数或所有这些领域的能力。一个引人注目的例子是，20世纪10年代的DeepMind开发了一种“广义人工智能”，可以自己学习多种不同的Atari游戏，后来开发了一种系统变体，该系统成功地进行了顺序学习。除了转移学习，假设的AGI突破还可以包括开发。对于能够参与决策理论元推理的反射式体系结构，以及如何从整个非结构化网络“屏蔽”一个全面的知识库。一些人认为，某种（目前未发现的）概念上简单，但数学上困难的“主算法”可能导致AGI的方法非常接近地模拟人类的智力很困难，并相信像人工大脑或模拟儿童发育这样的拟人特征可能有一天会达到一般智力出现的临界点。</p><p>本文中的许多问题也可能需要一般的智能，如果机器能够像人们一样解决问题的话。例如，即使是特定的直接任务，如机器翻译，也要求机器用两种语言读写（nlp），遵循作者的论点（理性），知道正在谈论的是什么（知识），并忠实地再现作者的原始意图（社会智能）。像机器翻译这样的问题被认为是“人工智能完成”，因为所有这些问题都需要同时解决，才能达到人类水平的机器性能。</p><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>没有一个既定的统一理论或范式来指导人工智能的研究。研究人员在许多问题上都持不同意见。一些长期以来一直悬而未决的问题是：人工智能应该通过研究心理学或神经生物学来模拟自然智能吗？或者人类生物学和人工智能研究一样，和鸟类生物学和航空工程学无关？智能行为是否可以用简单、优雅的原则（如逻辑或优化）来描述？还是必须解决大量完全无关的问题？</p><h4 id="控制论与大脑模拟"><a href="#控制论与大脑模拟" class="headerlink" title="控制论与大脑模拟"></a>控制论与大脑模拟</h4><p>在20世纪40年代和50年代，一些研究人员探讨了神经生物学、信息论和控制论之间的联系。他们中的一些人建造了一些机器，利用电子网络来展示基本的智能，比如W·格雷·沃尔特的海龟和约翰·霍普金斯的野兽。许多研究人员聚集在普林斯顿大学和英国比率俱乐部参加目的论学会的会议。到1960年，这种方法基本上被放弃了，尽管其中的一些元素将在1980年代恢复。</p><h4 id="符号"><a href="#符号" class="headerlink" title="符号"></a>符号</h4><p>20世纪50年代中期，当数字计算机成为可能时，人工智能研究开始探索人类智能可能被降低为符号操纵的可能性。研究集中在三个机构：卡内基梅隆大学、斯坦福大学和麻省理工学院，如下文所述，每个机构都发展了自己的研究风格。约翰·豪格兰将这些对人工智能的象征性方法命名为“老式人工智能”或“Gofai”。在20世纪60年代，象征性方法在模拟小型示范项目中的高级思维方面取得了巨大成功。基于控制论或人工神经网络的方法被抛弃或被推倒。20世纪60年代和70年代的研究人员确信，象征性的方法最终会成功地创造出一台具有人工一般智能的机器，并认为这是他们领域的目标。</p><h4 id="认知模拟"><a href="#认知模拟" class="headerlink" title="认知模拟"></a>认知模拟</h4><p>经济学家Herbert Simon和Allen Newell研究了人类解决问题的能力，并试图将其正式化，他们的工作奠定了人工智能领域以及认知科学、运筹学和管理科学的基础。他们的研究小组利用心理学实验的结果开发了模拟人们解决问题的技术的程序。以卡内基梅隆大学为中心的这一传统最终将在20世纪80年代中期达到顶峰。</p><h4 id="基于逻辑"><a href="#基于逻辑" class="headerlink" title="基于逻辑"></a>基于逻辑</h4><p>与Simon和Newell不同，John McCarthy认为机器不需要模拟人类思维，而是应该尝试找到抽象推理和问题解决的本质，不管人们是否使用相同的算法。他在斯坦福大学（SAIL）的实验室专注于使用形式逻辑来解决各种各样的问题，包括G知识表示、规划和学习。逻辑也是爱丁堡大学和欧洲其他地方的工作重点，这导致了编程语言Prolog和逻辑编程科学的发展。</p><h4 id="反逻辑"><a href="#反逻辑" class="headerlink" title="反逻辑"></a>反逻辑</h4><p>麻省理工学院的研究人员（如马文·明斯基和西摩·佩珀特发现，解决视觉和自然语言处理中的难题需要特别的解决方案。他们认为，没有简单和一般的原则（如逻辑）能够捕获智能行为的所有方面。Roger Schank将他们的“反逻辑”方法描述为“杂乱无章”（与CMU和斯坦福大学的“整洁”模式相反）。常识性知识库（如Doug Lenat的Cyc）是“杂乱无章”的人工智能的一个例子，因为它们必须手工构建一次一个复杂的概念。</p><h4 id="基于知识"><a href="#基于知识" class="headerlink" title="基于知识"></a>基于知识</h4><p>当拥有大量记忆的计算机在1970年左右面世时，来自这三个传统的研究人员开始将知识构建到人工智能应用中。这场“知识革命”导致了专家系统的开发和部署（由Edward Feigenbaum介绍），人工智能软件的第一个真正成功形式。人工智能软件的关键组成部分。所有专家系统的系统架构都是知识库，它存储事实和规则来说明人工智能，知识革命也是由认识到许多简单的人工智能应用程序需要大量的知识所驱动的。</p><h4 id="子符号"><a href="#子符号" class="headerlink" title="子符号"></a>子符号</h4><p>到20世纪80年代，符号人工智能的发展似乎停滞了，许多人认为符号系统永远无法模仿人类认知的所有过程，特别是感知、机器人、学习和模式识别。许多研究人员开始研究针对特定人工智能问题的“次符号”方法[17]次符号方法设法在没有特定知识表示的情况下接近智能。</p><h4 id="体化智力"><a href="#体化智力" class="headerlink" title="体化智力"></a>体化智力</h4><p>这包括具体化的、定位的、基于行为的和新的人工智能。机器人相关领域的研究人员，如Rodney Brooks，拒绝使用象征性人工智能，专注于使机器人能够移动和生存的基本工程问题。他们的工作重新唤起了20世纪50年代早期控制论研究人员的非象征性观点，并重新引入了控制理论在人工智能中的应用。这与认知科学相关领域内关于身体各方面（如运动、知觉和视觉化）对更高智力的要求这一观点的发展是一致的。</p><p>在发展机器人学中，发展性学习方法被详细阐述，使机器人能够通过自主的自我探索、与人类教师的社会互动以及使用指导机制（主动学习、成熟、运动协同等）来积累新技能。</p><h4 id="计算智能与软计算"><a href="#计算智能与软计算" class="headerlink" title="计算智能与软计算"></a>计算智能与软计算</h4><p>20世纪80年代中期，David Rumelhart和其他人重新对神经网络和“连接主义”产生了兴趣。人工神经网络是软计算的一个例子，它们是无法完全逻辑确定地解决的问题的解决方案，在这种情况下，近似解往往是足够的。人工智能的其他软计算方法包括模糊系统、灰色系统理论、进化计算和许多统计工具。软计算在人工智能中的应用是由计算智能新兴学科共同研究的。</p><h4 id="统计学习"><a href="#统计学习" class="headerlink" title="统计学习"></a>统计学习</h4><p>许多传统的gofai陷入了符号计算的临时补丁的困境，这些补丁在自己的玩具模型上工作，但未能推广到实际场景。然而，大约在20世纪90年代，人工智能研究人员采用了复杂的数学工具，如隐马尔可夫模型（HMM）、信息论和规范的贝叶斯决策理论来比较或统一竞争架构。共享的数学语言允许与更成熟的领域（如数学、经济学或运筹学）进行高水平的协作。与Gofai相比，新的“统计学习”技术（如HMM和神经网络）在许多实际领域（如数据挖掘）获得了更高的精度，而无需获取对数据集的语义理解。随着现实数据的不断成功，人们越来越重视将不同的方法与共享的测试数据进行比较，以确定哪种方法在更广泛的背景下比特殊的玩具模型表现得更好；人工智能研究正变得越来越科学。</p><p>如今，实验结果往往是严格可衡量的，不同的统计学习技术有不同的局限性；例如，基本的HMM不能模拟自然语言的无限可能组合。批评者指出，从gofai到统计lear的转变宁也经常是一个从可解释的人工智能的转变。在AGI研究中，一些学者警告不要过度依赖统计学习，并认为继续对Gofai进行研究仍然是获得一般智力的必要条件。</p><h4 id="整合方法"><a href="#整合方法" class="headerlink" title="整合方法"></a>整合方法</h4><h5 id="智能代理范式"><a href="#智能代理范式" class="headerlink" title="智能代理范式"></a>智能代理范式</h5><p>智能代理是一个感知环境并采取行动以最大化成功机会的系统。最简单的智能代理是解决特定问题的程序。更复杂的代理包括人类和人类组织（如公司）。该范式允许研究人员直接比较或甚至结合不同的方法来解决孤立的问题，通过询问哪种代理最擅长最大化给定的“目标函数”。解决特定问题的代理可以使用任何有效的方法，一些代理具有符号性和逻辑性，一些代理是次符号人工神经网络，其他代理可以使用新的方法。该范式还为研究人员提供了一种与决策理论和经济学等其他领域交流的通用语言，这些领域也使用抽象代理的概念。建立一个完整的智能体需要研究人员解决实际的集成问题；例如，由于感官系统提供了不确定的环境信息，规划系统必须能够在不确定的情况下发挥作用。智能代理范式在20世纪90年代被广泛接受。</p><h5 id="代理架构和认知架构"><a href="#代理架构和认知架构" class="headerlink" title="代理架构和认知架构"></a>代理架构和认知架构</h5><p>研究人员设计了一个多智能体系统，用多智能体系统中相互作用的智能体构建智能系统。一个分层控制系统提供了一个桥梁，在最低的次符号人工智能、反应性人工智能和最高的传统符号人工智能之间，宽松的时间限制允许规划和世界模型。有些认知架构是为解决狭隘的问题而定制的；而另一些架构（如Soar）则是为了模仿人类的认知并提供对一般智能的洞察。Soar的现代扩展是混合智能系统，包括符号和次符号组件。</p><h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><p>人工智能已经开发出大量的工具来解决计算机科学中最困难的问题。下面将讨论其中一些最一般的方法。</p><h4 id="搜索优化"><a href="#搜索优化" class="headerlink" title="搜索优化"></a>搜索优化</h4><p>在理论上，人工智能中的许多问题可以通过智能搜索来解决。推理可以简化为执行搜索。例如，逻辑证明可以被看作是搜索从前提到结论的路径，其中每个步骤都是推理规则的应用。规划算法搜索目标树和子目标树，试图找到目标路径，一个称为means-ends-analysis的过程。用于移动的机器人算法的肢体和抓取对象使用配置空间中的局部搜索。许多学习算法使用基于优化的搜索算法。</p><p>对于大多数现实世界的问题，简单的详尽搜索很少足够：搜索空间（要搜索的地方的数量）迅速增长到天文数字。结果是搜索太慢或永远无法完成。对于许多问题，解决方法是使用“启发式”或“经验法则”，优先选择那些更有可能达到目标并以较短的步骤完成的选择。在某些搜索方法中，启发式方法还可以完全消除一些不太可能导致目标的选择（称为“修剪搜索树”）。启发式方法为程序提供了解决方案所在路径的“最佳猜测”。启发式方法将对解决方案的搜索限制在较小的样本大小中。</p><p>在20世纪90年代，基于优化数学理论的一种非常不同的搜索方式开始出现。对于许多问题，可以从某种形式的猜测开始搜索，然后逐步优化猜测，直到无法再进一步的改进。这些算法可以被视为盲目爬山：我们从景观上的一个随机点开始搜索，然后，通过跳跃不断向上移动我们的猜测，直到我们到达山顶。其他优化算法包括模拟退火、波束搜索和随机优化。</p><p>进化计算使用优化搜索的形式。例如，它们可以从一个生物体群体（猜测）开始，然后让它们变异和重组，只选择最适合每一代生存的物种（提炼猜测）。经典的进化算法包括遗传算法、基因表达编程和遗传编程。或者分布式搜索过程可以通过群体智能算法进行协调。在搜索中使用的两种流行的群算法是粒子群优化（受鸟群的启发）和蚁群优化（受蚂蚁轨迹的启发）。</p><h4 id="逻辑"><a href="#逻辑" class="headerlink" title="逻辑"></a>逻辑</h4><p>逻辑用于知识表示和问题解决，但也可用于其他问题。例如，satplan算法使用逻辑进行规划，归纳逻辑编程是一种学习方法。</p><p>人工智能研究中使用了几种不同的逻辑形式。命题逻辑涉及“或”和“不”等真值函数。一阶逻辑增加了量词和谓词，并且可以表达关于对象、对象属性及其相互关系的事实。模糊集理论将“真实度”（介于0和1之间）分配给诸如“爱丽丝老了”（或富有，或高大，或饥饿）这样的模糊陈述，这些陈述在语言上不精确，不能完全正确或错误。模糊逻辑在控制系统中被成功地应用，以允许专家提供模糊规则，例如“如果你靠近终点站并快速移动，增加列车的制动压力”；然后这些模糊规则可以在系统中进行数字精炼。模糊逻辑在知识库中不能很好地扩展，许多人工智能研究者质疑模糊逻辑推理链的有效性。</p><p>默认逻辑、非单调逻辑和限定是设计用于帮助默认推理和限定问题的逻辑形式。逻辑的一些扩展被设计用来处理特定的知识领域，例如：描述逻辑；情境演算、事件演算和流畅演算（用于表示事件和时间）；因果演算；信念演算模态逻辑。</p><p>总的来说，定性符号逻辑是脆弱的，在存在噪声或其他不确定性的情况下，其规模很小。规则的例外情况很多，而且逻辑系统很难在存在矛盾规则的情况下发挥作用。</p><h4 id="不确定推理的概率方法"><a href="#不确定推理的概率方法" class="headerlink" title="不确定推理的概率方法"></a>不确定推理的概率方法</h4><p>人工智能中的许多问题（在推理、规划、学习、感知和机器人技术中）都要求代理使用不完整或不确定的信息进行操作。人工智能研究人员已经设计了许多强大的工具，用概率论和经济学的方法来解决这些问题。</p><p>Bayesian Networks 是一个非常通用的工具，可用于处理大量问题：推理（使用Bayesian推理算法）、学习（使用期望最大化算法）、规划（使用决策网络）和感知（使用动态Bayesian网络）。概率算法也可以用于对数据流进行过滤、预测、平滑和查找解释，帮助感知系统分析随时间发生的过程（例如，隐马尔可夫模型或卡尔曼滤波器）。与符号逻辑相比，形式贝叶斯推理的计算成本较高。为了便于推理，大多数观察必须有条件地相互独立。带有菱形或其他“循环”（无向循环）的复杂图可能需要一种复杂的方法，例如马尔可夫链蒙特卡罗，它将一组随机步行者分散到整个贝叶斯网络，并尝试收敛到条件概率的评估。Bayesian网络在Xbox Live上被用来对玩家进行评分和比赛；胜负是玩家表现好坏的“证据”。Adsense使用一个边缘超过3亿的贝叶斯网络来学习要服务的广告。</p><p>经济学中的一个关键概念是“效用”：一个衡量事物对智能主体有多重要的指标。利用决策理论、决策分析和信息价值理论开发了精确的数学工具，用于分析代理如何做出选择和计划。这些工具包括马尔可夫决策过程、动态决策网络、博弈论和机制设计等模型。</p><h4 id="分类器和统计学习方法"><a href="#分类器和统计学习方法" class="headerlink" title="分类器和统计学习方法"></a>分类器和统计学习方法</h4><p>最简单的人工智能应用程序可以分为两种类型：分类器（“if shining then diamond”）和控制器（“if shining then pick up”）。然而，控制器也会在推断动作之前对条件进行分类，因此分类是许多人工智能系统的核心部分。分类器是使用模式匹配来确定最近匹配的函数。它们可以根据例子进行调整，使其在人工智能中非常有吸引力。这些例子被称为观察或模式。在有监督学习中，每个模式都属于某个预先定义的类。一个班级可以被看作是必须做出的决定。所有的观察结果加上它们的类标签被称为数据集。当收到新的观察结果时，该观察结果将根据以前的经验进行分类。</p><p>分类器可以以各种方式进行训练；有许多统计和机器学习方法。决策树可能是最广泛使用的机器学习算法。其他广泛使用的分类器是神经网络，k-最近邻算法，核方法，如支持向量机（SVM），高斯混合模型和极受欢迎的朴素贝叶斯分类器。分类器P性能在很大程度上取决于要分类的数据的特性，例如数据集大小、跨类的样本分布、维数和噪声级别。如果假设模型非常适合实际数据，那么基于模型的分类器性能良好。否则，如果没有可用的匹配模型，并且只考虑准确性（而不是速度或可伸缩性），那么传统的观点是，在大多数实际数据集上，区分分类器（尤其是SVM）往往比基于模型的分类器（如“naive bayes”）更准确。</p><h4 id="人工神经网络"><a href="#人工神经网络" class="headerlink" title="人工神经网络"></a>人工神经网络</h4><p>神经网络，或称神经网络，是受到人脑神经元结构的启发。一个简单的“神经元”接受来自多个其他神经元的输入，每个神经元在被激活（或被激活）时，确定对神经元自身是否应该激活投加权“票”。学习需要一个算法来根据训练数据调整这些权重；一个简单的算法（称为“一起开火，连接在一起”）是当一个神经元的激活触发另一个神经元的成功激活时，增加两个相连神经元之间的权重。网络形成“概念”，这些概念分布在共享的神经元的子网络中，这些神经元倾向于一起开火；一个表示“腿”的概念可能与一个表示“脚”的子网络相结合，该子网络包含“脚”的声音。神经元有一个连续的激活光谱；此外，神经元可以以非线性方式处理输入，而不是直接权衡选票。现代神经网络既可以学习连续函数，也可以学习数字逻辑运算。神经网络的早期成功包括预测股票市场和（1995年）一辆主要是自动驾驶的汽车。在20世纪10年代，利用深度学习的神经网络的进步将人工智能推向了广泛的公众意识，并促成了企业人工智能支出的巨大上升；例如，2017年与人工智能相关的并购是与2015年整体一样大。</p><p>人工神经网络的研究始于人工智能研究领域成立前的十年，由沃尔特·皮特和沃伦·麦卡鲁奇共同完成。FrankRosenblatt发明了感知器，一个单层的学习网络，类似于线性回归的旧概念。早期的先驱者还包括Alexey Grigorevich Ivakhnenko、Teuvo Kohonen、Stephen Grossberg、Kunihiko Fukushima、Christoph von der Malsburg、David Willshaw、Shun Ichi Amari、Bernard Widrow、John Hopfield、Eduardo R.Caianiello等。</p><p>网络的主要类别是非循环或前馈神经网络（其中信号仅沿一个方向传递）和循环神经网络（允许对以前的输入事件进行反馈和短期记忆）。在最流行的前馈网络中，有感知器、多层感知器和径向基网络，神经网络可以应用于智能控制（机器人）或学习问题，使用诸如赫比学习、GMDH或竞争学习等技术。</p><p>如今，神经网络通常采用反向传播算法进行训练，这种算法自1970年以来就一直是Seppo Linnaimma出版的反向自动微分模式，由Paul Werbos引入神经网络。</p><p>分层时间记忆是一种模拟新皮质部分结构和算法特性的方法。</p><p>总的来说，大多数神经网络在手工创建的神经拓扑上使用某种形式的梯度下降。然而，一些研究小组，如Uber，认为简单的神经进化改变新的神经网络拓扑结构和权重可能与复杂的梯度下降方法相竞争。神经进化的一个优点是，它可能不太容易陷入“死胡同”。</p><h4 id="深度前馈神经网络"><a href="#深度前馈神经网络" class="headerlink" title="深度前馈神经网络"></a>深度前馈神经网络</h4><p>深度学习是任何一种可以学习一长串因果关系的人工神经网络。例如，具有六个隐藏层的前馈网络可以学习七链因果链（六个隐藏层+输出层），并且“信用分配路径”（cap）深度为七。许多深度学习系统需要能够学习10个或更多的因果关系链。深度学习已经改变了人工智能的许多重要子领域，包括计算机视觉、语音识别、自然语言处理等。</p><p>据一项综述，1986年，Rina Dechter将“深度学习”一词引入机器学习社区，并在2000年将其引入人工神经网络后获得了广泛的应用。Alexey Grigorevich Ivakhnenko an出版了第一个功能性的深度学习网络。1965年，D.V.G.Lapa对这些网络进行了一次一层的培训。Ivakhnenko在1971年发表的论文，描述了一种具有八层的深度前馈多层感知器已经比许多后来的网络更深。2006年，Geoffrey Hinton和Ruslan Salakhutdinov发表的一篇文章介绍了另一种对多层前馈神经网络（FNN）进行一次一层预训练的方法，将每一层依次视为无监督限制Boltzmann机器，然后使用有监督的反向传播进行微调。类似于浅层人工神经。深度神经网络可以模拟复杂的非线性关系。在过去的几年里，机器学习算法和计算机硬件的进步已经导致了更有效的方法来训练包含许多层非线性隐藏单元和一个非常大的输出层的深层神经网络。</p><p>深度学习通常使用卷积神经网络（CNN），其起源可以追溯到1980年福岛大学（Kunihiko Fukushima）引进的新认知加速器。1989年，Yann Lecun及其同事将反向传播应用于这种体系结构。21世纪初，在一个工业应用中，CNN已经处理了美国所有支票的10%到20%。自2011年以来，CNN在GPU上的快速实施赢得了许多视觉模式识别竞赛。</p><p>拥有12个卷积层的CNN与DeepMind的“AlphaGo Lee”的强化学习一起使用，该项目在2016年击败了一位顶级Go冠军。</p><h4 id="深循环神经网络"><a href="#深循环神经网络" class="headerlink" title="深循环神经网络"></a>深循环神经网络</h4><p>早期，深度学习也被应用于具有循环神经网络（RNN）的序列学习（RNN）。理论上是图灵完备的，并且可以运行任意程序来处理任意的输入序列。RNN的深度是无限的，取决于其输入序列的长度；因此，RNN是深度学习的一个例子。RNN可以通过梯度下降进行训练，但会受到消失梯度问题的影响。1992年，研究表明，对一组经常性神经网络进行无监督的预训练可以加快学习速度。</p><p>许多研究人员现在使用的是Hochreiter&amp;Schmidhuber于1997年出版的名为长期短期记忆（LSTM）网络的深度学习重复神经网络的变体。LSTM通常由连接主义时间分类（CTC）训练。在谷歌、微软和百度，这种方法已经彻底改变了语音识别。例如，在2015年，谷歌的语音识别通过经过CTC培训的LSTM经历了49%的性能跃升，该LSTM现在可通过谷歌语音向数十亿智能手机用户提供。谷歌还使用LSTM来提高机器翻译，语言建模和多语言处理。LSTM与CNN相结合。还改进了自动图像字幕和大量其他应用。</p><h4 id="历史进程"><a href="#历史进程" class="headerlink" title="历史进程"></a>历史进程</h4><p>人工智能，就像电力或蒸汽机一样，是一种通用技术。关于如何确定AI倾向于胜出的任务，没有达成一致意见。虽然像AlpHoO2这样的项目已经成功地从零开始产生了自己的知识，但是许多其他的机器学习项目需要大量的训练数据集。研究者Andrew Ng提出，一个人类只需不到一秒钟的心理思考就可以完成的事情，在不久的将来就可以自动化地使用人工智能了。” 莫拉维奇的悖论表明，人工智能在许多任务上都落后于人类，而人类的大脑已经专门进化到可以很好地执行这些任务。</p><p>2016年前后，AlphaGo结束了经典棋盘游戏基准的时代。知识不完善的游戏为人工智能在博弈论领域提供了新的挑战。星际争霸等电子竞技继续提供额外的公共基准。为了促进人工智能的研究，有许多竞赛和奖品，如Imagenet挑战。最常见的竞争领域包括通用机器智能、会话行为、数据挖掘、机器人汽车、机器人足球以及传统游戏。</p><p>“模仿游戏”（一种对1950年图灵测试的解释，用来评估计算机是否可以模仿人类）现在被认为是很重要的评估手段，图灵测试的一个衍生工具是完全自动化的公开图灵测试，用来区分计算机和人类（captcha）。顾名思义，这有助于确定一个用户是一个实际的人，而不是一台冒充人类的计算机。与标准图灵测试不同，captcha由一台机器管理，目标是一个人，而不是由一个人管理，目标是一台机器。计算机要求用户完成一个简单的测试，然后为该测试生成一个等级。计算机无法解决问题，因此正确的解决方案被认为是参加测试的人的结果。一种常见的验证码类型是要求键入出现在计算机无法识别的图像中的变形字母、数字或符号的测试。</p><p>提出的“通用智能”测试旨在比较机器、人类甚至非人类动物在尽可能通用的问题集上的表现。在极端情况下，测试套件可以包含所有可能的问题，以Kolmogorov的复杂性为权重；不幸的是，这些问题集往往由贫瘠的模式匹配练习主导，在这些练习中，调谐的人工智能很容易超过人类的性能水平。</p><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><p>人工智能与任何一项智力任务都有关联。现代人工智能技术无处不在，数量众多，无法在此列举。通常，当一项技术达到主流应用时，它不再被视为人工智能；这种现象被描述为人工智能效应。</p><p>人工智能的例子包括自动驾驶汽车（如无人机和自动驾驶汽车）、医疗诊断、创造艺术（如诗歌）、证明数学定理、玩游戏（如象棋或围棋）、搜索引擎（如谷歌搜索）、在线助手（如Siri）、照片中的图像识别、垃圾邮件过滤、预测。航班延误，司法判决预测和针对在线广告的预测。</p><p>随着社交媒体网站取代电视成为年轻人的新闻来源，新闻机构越来越依赖社交媒体平台来发布新闻，主要出版商现在使用人工智能（AI）技术来更有效地发布新闻，并产生更大的流量。</p><h4 id="医疗"><a href="#医疗" class="headerlink" title="医疗"></a>医疗</h4><p>人工智能正被应用于高成本的剂量问题，研究结果表明人工智能可以节省160亿美元。2016年，加利福尼亚州的一项突破性研究发现，在人工智能的帮助下开发的一个数学公式正确地确定了给予器官患者的免疫抑制药物的准确剂量。</p><p>人工智能通过帮助医生深入医疗行业。据彭博科技（Bloomberg Technology）报道，微软开发了人工智能，帮助医生找到治疗癌症的正确方法。有大量与癌症相关的研究和药物。具体来说，有800多种药物和疫苗可以治疗癌症。这会对医生产生负面影响，因为有太多的选择可供选择，使得为患者选择合适的药物更加困难。微软正在开发一个名为“汉诺威”的机器项目。它的目标是记住癌症所需的所有文件，并帮助预测哪种药物组合对每个病人最有效。目前正在研究的一个项目是对抗骨髓白血病，这是一种致命的癌症，几十年来治疗一直没有改善。据报道，另一项研究发现，人工智能在识别皮肤癌方面与训练有素的医生一样出色。另一项研究是使用人工智能来尝试和监测多个高危患者，这是通过根据从现场医生到患者互动获得的数据向每个患者询问大量问题来完成的。一项研究是通过转移学习完成的，机器执行的诊断类似于训练有素的眼科医生，可以在30秒内决定是否应将患者转诊治疗，准确率超过95%。</p><p>据美国有线电视新闻网报道，华盛顿儿童国家医疗中心的外科医生最近的一项研究成功地展示了一个自主机器人的手术。研究小组声称，该小组在机器人进行软组织手术的同时对其进行了监督，在开放手术期间将猪的肠道缝合在一起，比一名人类外科医生做得更好。IBM已经开发了自己的人工智能计算机IBM Watson，该计算机已经在一定程度上击败了人类智能。华生不仅在游戏秀中获胜！</p><h4 id="汽车"><a href="#汽车" class="headerlink" title="汽车"></a>汽车</h4><p>人工智能的进步通过创造和发展自动驾驶汽车，促进了汽车工业的发展。截至2016年，有30多家公司利用人工智能创建无人驾驶汽车。与人工智能有关的一些公司包括特斯拉、谷歌和苹果、百度。</p><p>许多部件有助于自动驾驶汽车的功能。这些车辆包括刹车、变道、防碰撞、导航和地图等系统。这些系统以及高性能计算机一起集成到一个复杂的车辆中。</p><p>自动驾驶汽车的最新发展使自动驾驶卡车的创新成为可能，尽管它们仍处于测试阶段。英国政府已通过立法，于2018年开始测试自动驾驶卡车。自动驾驶卡车是一支由一辆非自动驾驶卡车带领的自动驾驶卡车车队，因此卡车排还没有完全自主。与此同时，德国汽车公司戴姆勒（Daimler）正在测试货轮灵感，这是一种只能在公路上使用的半自动卡车。</p><p>影响无驾驶汽车运行能力的一个主要因素是地图。一般来说，车辆将预先编程设定行驶区域的地图。该地图将包括路灯和路缘石高度的近似值数据，以便车辆了解其周围环境。然而，谷歌一直在研究一种算法，以消除对预编程地图的需求，取而代之的是创建一种能够适应各种新环境的设备。一些自动驾驶汽车没有配备方向盘或制动踏板，因此也有研究集中在创建ALG上。通过了解车速和驾驶条件，能够为车内乘客维持安全环境。</p><p>影响无驾驶汽车的另一个因素是乘客的安全。为了使一辆司机更少的驾驶汽车，工程师们必须对它进行编程以处理高风险的情况。这些情况可能包括与行人正面碰撞。汽车的主要目标应该是做出一个避免撞到行人和救车里乘客的决定。但有一种可能性，汽车将需要作出决定，将有人置于危险中。换言之，汽车需要决定拯救行人或乘客。在这种情况下，汽车的编程对于成功的无驾驶汽车至关重要。</p><h4 id="金融"><a href="#金融" class="headerlink" title="金融"></a>金融</h4><p>金融机构长期以来一直使用人工神经网络系统来检测超出标准的指控或索赔，并将其标记为人类调查。人工智能在银行业的应用可以追溯到1987年，当时美国的太平洋国家银行（Security Pacific National Bank）成立了一个反欺诈特别工作组，以应对未经授权使用借记卡的行为。像Kasisto和MoneyStream这样的程序正在金融服务中使用人工智能。</p><p>如今，银行使用人工智能系统来组织业务、维持簿记、投资股票和管理房地产。人工智能可以在一夜之间对变化做出反应，也可以在业务不发生的时候做出反应。2001年8月，机器人在模拟金融交易竞争中击败了人类。人工智能还通过监控用户的行为模式来减少欺诈和金融犯罪，以防出现任何异常变化或异常情况。</p><p>人工智能机器在市场中的应用，如在线交易和决策，改变了主要的经济理论。例如，基于人工智能的买卖平台改变了供求规律，现在可以很容易地估计个性化的供求曲线，从而实现个性化定价。此外，人工智能机器可以减少市场中的信息不对称，从而在减少交易量的同时提高市场效率。此外，市场中的人工智能限制了市场行为的后果，再次使市场更有效率。人工智能产生影响的其他理论包括理性选择、理性预期、博弈论、刘易斯转折点、投资组合优化和反事实思维。</p><h4 id="政府"><a href="#政府" class="headerlink" title="政府"></a>政府</h4><p>人工智能在政府中有一系列的用途。它可用于进一步实现公共政策目标（在紧急服务、卫生和福利等领域），并帮助公众与政府互动（例如，通过使用虚拟助理）。《哈佛商业评论》（Harvard Business Review）称，“人工智能在公共部门的应用广泛且不断增长，世界各地都在进行早期实验。” 哈佛大学（Harvard University）阿什民主治理和创新中心的希拉•迈尔（Hila Mehr）指出，政府中的人工智能并不新鲜，邮政服务使用马赫数。在20世纪90年代后期，为了识别信封上的手写，以自动发送信件。在政府中使用人工智能具有显著的好处（包括节省成本的效率），但也存在风险。</p><h4 id="游戏"><a href="#游戏" class="headerlink" title="游戏"></a>游戏</h4><p>在电子游戏中，人工智能通常用于在非玩家角色（NPC）中生成动态的有目的的行为。此外，众所周知的人工智能技术通常用于寻路。一些研究人员认为NPC人工智能在游戏中是大多数生产任务的“解决问题”。具有更多非典型人工智能的游戏包括左4死的人工智能导演（2008年）和最高指挥官2排的神经进化训练（2010年）。</p><h4 id="军事"><a href="#军事" class="headerlink" title="军事"></a>军事</h4><p>全世界每年在机器人方面的军事开支从2010年的51亿美元增加到2015年的75亿美元。能够自主行动的军用无人机被广泛认为是一种有用的资产。许多人工智能研究人员试图使自己远离人工智能的军事应用。</p><h4 id="审计"><a href="#审计" class="headerlink" title="审计"></a>审计</h4><p>对于财务报表审计，人工智能使持续审计成为可能。人工智能工具可以立即分析多组不同的信息。潜在的好处是降低总体审计风险，提高保证水平，缩短审计时间。</p><h4 id="广告"><a href="#广告" class="headerlink" title="广告"></a>广告</h4><p>利用人工智能可以从客户的数字足迹中预测或概括客户的行为，以便以个性化促销为目标，或自动建立客户角色。一个记录在案的案例报告称，在线赌博公司使用人工智能来提高客户目标。</p><h4 id="艺术"><a href="#艺术" class="headerlink" title="艺术"></a>艺术</h4><p>人工智能已经激发了许多创造性的应用，包括它用于产生视觉艺术。“思维机器：计算机时代的艺术与设计，1959-1989”在MOMA的展览提供了人工智能在艺术、建筑和设计方面的历史应用的一个很好的概述。最近展出的AI制作艺术作品的展览包括谷歌赞助的利益和拍卖在旧金山的灰色地区基金会，艺术家们用“深梦算法”和“非人类：AI时代的艺术”展览，在2017秋季在洛杉矶和法兰克福举行。2018年春，计算机机械协会专门出版了一期关于计算机和艺术主题的杂志，突出了机器学习在艺术中的作用。</p><h3 id="哲学与伦理"><a href="#哲学与伦理" class="headerlink" title="哲学与伦理"></a>哲学与伦理</h3><p>关于人工智能，有三个哲学问题：</p><ol><li>人工通用智能有可能吗？机器能用智能解决人类能解决的任何问题吗？或者一台机器能完成的任务有严格的限制吗？</li><li>智能机器危险吗？我们如何确保机器的行为合乎道德，以及它们的使用合乎道德？</li><li>机器能有一个与人类完全相同的意识和精神状态吗？一台机器能有知觉吗？因此应该享有某些权利吗？机器会故意造成伤害吗？</li></ol><h4 id="艾伦·图灵-“图灵测试”"><a href="#艾伦·图灵-“图灵测试”" class="headerlink" title="艾伦·图灵 “图灵测试”"></a>艾伦·图灵 “图灵测试”</h4><p>我们不需要决定一台机器是否能“思考”；我们只需要决定一台机器是否能像人类一样智能地行动。这种处理与人工智能相关的哲学问题的方法构成了图灵测试的基础。</p><h4 id="达特茅斯的提议"><a href="#达特茅斯的提议" class="headerlink" title="达特茅斯的提议"></a>达特茅斯的提议</h4><p>“学习的每一个方面或智能的任何其他特征都可以如此精确地描述，以至于可以制造出一台机器来模拟它。”这一推测印在1956年达特茅斯会议的提案中，代表了大多数人工智能研究人员的立场。</p><h4 id="纽厄尔和西蒙的物理符号系统假说"><a href="#纽厄尔和西蒙的物理符号系统假说" class="headerlink" title="纽厄尔和西蒙的物理符号系统假说"></a>纽厄尔和西蒙的物理符号系统假说</h4><p>“一个物理符号系统具有一般智能行为的必要和充分手段。”纽厄尔和西蒙认为，智能包括对符号的正式操作。休伯特·德雷福斯认为，相反，人类的专业知识依赖于无意识的本能而不是有意识的符号操作，以及对符号的“感觉”。环境而不是明确的象征性知识。（见德莱弗斯对人工智能的评论。）</p><h4 id="人工大脑的争论"><a href="#人工大脑的争论" class="headerlink" title="人工大脑的争论"></a>人工大脑的争论</h4><p>大脑可以被机器模拟，因为大脑是智能的，所以模拟的大脑也必是智能的，这样机器就可以是智能的。Hans Moravec、Ray Kurzweil和其他人认为，将大脑直接复制到硬件和软件中在技术上是可行的，而且这样的模拟将基本上与原始的相同。</p><h4 id="人工智能效应"><a href="#人工智能效应" class="headerlink" title="人工智能效应"></a>人工智能效应</h4><p>机器已经是智能的，但是观察家们没有认识到它。当深蓝队在国际象棋中击败加里·卡斯帕罗夫时，这台机器表现得很聪明。然而，旁观者通常认为人工智能程序的行为根本不是“真实的”智能，因此“真实的”智能是人们可以做的任何智能行为，而机器仍然不能做。这就是所谓的人工智能效应：“人工智能是指尚未完成的工作。”</p><h3 id="潜在危害"><a href="#潜在危害" class="headerlink" title="潜在危害"></a>潜在危害</h3><p>广泛使用人工智能可能会产生危险或不受欢迎的意外后果。来自未来生活研究所的科学家，以及其他人，描述了一些短期的研究目标，以了解人工智能如何影响经济、涉及人工智能的法律和道德以及如何将人工智能安全风险降至最低。从长远来看，科学家们建议继续优化功能，同时尽量减少新技术带来的安全风险。</p><h4 id="存在风险"><a href="#存在风险" class="headerlink" title="存在风险"></a>存在风险</h4><p>物理学家斯蒂芬霍金（Stephen Hawking），微软创始人比尔·盖茨（Bill Gates）和SpaceX创始人埃隆·马斯克（Elon Musk）对人工智能可能进化到人类无法控制的程度表示了担忧，霍金认为这可能“意味着人类的终结”。</p><blockquote><p>全人工智能的发展可能意味着人类的终结。一旦人类发展了人工智能，它将自己起飞，并以不断增长的速度重新设计自己。人类由于受到缓慢生物进化的限制，无法竞争，将被取代。</p><p>—斯蒂芬霍金</p></blockquote><p>尼克·博斯特罗姆在其著作《监管机构》中提出了一个论点，即人工智能将对人类构成威胁。他认为，足够智能的人工智能，如果在实现某个目标的基础上选择行动，将表现出收敛的行为，例如获取资源或保护自己不被关闭。如果这个人工智能的目标不能反映人类的情况，一个例子是，人工智能被要求尽可能多地计算圆周率的位数，它可能会伤害人类，以获取更多的资源或防止自己被关闭，最终更好地实现它的目标。</p><p>对人工智能风险的担忧导致了一些高知名度的捐赠和投资。包括彼得·泰尔（Peter Thiel）、亚马逊网络服务（Amazon Web Services）和马斯克（Musk）在内的一批著名的科技巨头已向一家致力于推动负责任人工智能开发的非盈利公司Openai投入了10亿美元。人工智能领域的专家意见不一，其中相当大的一部分人既担心也不关心最终年代的风险。拥有超人能力的人工智能。2015年1月，Elon Musk向未来生命研究所捐赠了1000万美元，用于资助对人工智能决策理解的研究。该研究所的目标是“培养我们管理的智慧”技术不断增长的力量。马斯克还资助开发人工智能的公司，如谷歌DeepMind，并代之以“关注人工智能的发展情况”。我认为，人工智能可能会带来危险的结果。</p><p>要是出现这个影响，人工智能必须压倒或超越人类的思维，少数专家认为这是一种在未来不值得研究的可能性。</p><h4 id="人性的贬低"><a href="#人性的贬低" class="headerlink" title="人性的贬低"></a>人性的贬低</h4><p>Joseph Weizenbaum写道，根据定义，人工智能应用程序不能成功地模拟真正的人类同理心，而且在客户服务或心理治疗等领域使用人工智能技术被严重误导。Weizenbaum还担心人工智能研究人员（和一些哲学家）愿意把人类的思维看作仅仅是一个计算机程序（一个位置现在被称为计算主义）。对于魏泽鲍姆来说，这些观点表明人工智能研究贬低了人类的生命。</p><h4 id="社会正义"><a href="#社会正义" class="headerlink" title="社会正义"></a>社会正义</h4><p>一个令人担忧的问题是，人工智能项目可能被设定为对某些群体（如妇女和少数民族）有偏见，因为大多数开发商都是富有的高加索男性。男性对人工智能的支持（47%的人赞成）高于女性（35%的人赞成）。</p><h4 id="人力需求减少"><a href="#人力需求减少" class="headerlink" title="人力需求减少"></a>人力需求减少</h4><p>自动化与就业的关系是复杂的。虽然自动化消除了旧的工作岗位，但它也通过微观经济和宏观经济效应创造了新的工作岗位，与以前的自动化浪潮不同，许多中产阶级的工作岗位可能被人工智能消除；经济学人说，“人们担心人工智能会对白领工作造成影响，就像蒸汽动力在T期间对蓝领工作造成的影响一样。</p><p>”工业革命“值得认真对待”。对风险的主观估计差异很大；例如，迈克尔·奥斯本（Michael Osborne）和卡尔·本尼迪克特·弗雷（Carl Benedikt Frey）估计，47%的美国就业机会处于潜在自动化的“高风险”，而经合组织（OECD）的一份报告仅将9%的美国就业机会归类为“高风险”。处于极端风险的就业机会范围从帕拉尔（Paral）到帕拉尔（Paral）。从Egals到快餐厨师，尽管从个人医疗保健到神职人员等与护理相关的职业的就业需求可能会增加[344]作者Martin Ford和其他人进一步指出，大量的工作是常规的、重复的，并且（对于人工智能）是可预测的；Ford警告说，这些工作可能会在接下来的几年中实现自动化。而且，许多新工作可能无法“让能力一般的人获得”，即使是再培训。经济学家指出，在过去，技术倾向于增加而不是减少总就业，但承认人工智能“我们处于未知领域”。</p><h4 id="自主武器"><a href="#自主武器" class="headerlink" title="自主武器"></a>自主武器</h4><p>目前，有50多个国家在研究战场机器人，包括美国、中国、俄罗斯和英国。许多人担心来自监督人工智能的风险，也希望限制人工士兵和无人机的使用。</p><h3 id="道德机器"><a href="#道德机器" class="headerlink" title="道德机器"></a>道德机器</h3><p>具有智能的机器有潜力利用它们的智能来防止伤害并将风险降到最低；它们可能有能力使用道德推理来更好地选择它们在世界上的行动。这一领域的研究包括机器伦理、人工道德代理和友好的人工智能。</p><h4 id="人工道德因素"><a href="#人工道德因素" class="headerlink" title="人工道德因素"></a>人工道德因素</h4><p>Wendell Wallach在他的书《道德机器》中介绍了人工道德代理人（AMA）的概念。对于Wallach来说，在两个核心问题的指导下，AMA已经成为人工智能研究领域的一部分，他认为这两个核心问题是“人类是否希望计算机做出道德决定”和“CAN（RO）机器人真的是道德的”。对于瓦拉赫来说，问题的中心不是机器是否能够证明道德行为的等效性，而不是社会对AMA发展的约束。</p><h4 id="机器伦理"><a href="#机器伦理" class="headerlink" title="机器伦理"></a>机器伦理</h4><p>机器伦理学领域涉及给机器提供伦理原则，或发现解决它们可能遇到的伦理困境的方法的程序，使它们能够通过自己的伦理决策以一种道德负责的方式运作。该领域在2005年AAAI秋季机器研讨会上进行了描述。伦理学：“过去关于技术和伦理学之间关系的研究主要集中在人类对技术的负责任和不负责任的使用上，少数人对人类应该如何对待机器感兴趣。在所有情况下，只有人类参与了道德推理。现在是时候给至少一些机器增加一个道德层面了。认识到涉及机器的行为的伦理后果，以及机器自治的最新和潜在发展，这一点是必要的。与计算机黑客、软件属性问题、隐私问题和其他通常归于计算机伦理的话题不同，机器伦理涉及机器对人类用户和其他机器的行为。机器伦理学的研究是缓解对自主系统关注的关键。可以说，没有这种维度的自主机器的概念是所有关于机器智能的恐惧的根源。此外，研究机器伦理可以发现当前伦理理论的问题，推进我们对伦理的思考。”。机器伦理有时被称为机器伦理、计算伦理或计算伦理。这一新兴领域的各种观点可以在《机器伦理学》汇编版中找到，该版本来源于AAAI 2005秋季机器伦理学研讨会。</p><h4 id="恶意的和友好的人工智能"><a href="#恶意的和友好的人工智能" class="headerlink" title="恶意的和友好的人工智能"></a>恶意的和友好的人工智能</h4><p>政治学家Charles T.Rubin认为，人工智能既不能被设计成仁慈的，也不能保证它是仁慈的。他认为“任何足够先进的仁慈都可能与恶意是不可区分的。”人类不应该假定机器或机器人会对我们很好，因为没有先验的理由相信它们是仁慈的。同情我们的道德体系，它随着我们特定的生物学（AIS不会分享）而发展。超智能软件可能不一定决定支持人类的持续存在，而且很难停止。这个话题最近也开始在学术刊物上讨论，作为对文明、人类和地球的真正风险来源。</p><p>解决这一问题的一个建议是，确保第一个普遍智能的人工智能是“友好的人工智能”，然后将能够控制随后开发的人工智能。有人质疑这种检查是否真的可以保留。</p><p>首席人工智能研究员罗德尼·布鲁克斯写道：“我认为在未来几百年里，任何时候担心我们开发恶意人工智能都是错误的。我认为，这种担心源于一个根本性的错误，即不能区分人工智能某一特定方面的最新进展与构建有知觉意志智能的巨大性和复杂性之间的差异。</p><h3 id="机器意识、知觉和思维"><a href="#机器意识、知觉和思维" class="headerlink" title="机器意识、知觉和思维"></a>机器意识、知觉和思维</h3><p>如果一个人工智能系统复制了人类智能的所有关键方面，那么这个系统也会有知觉吗？它会有一个有意识经验的头脑吗？这一问题与人类意识的本质这一哲学问题密切相关，一般被称为意识的难题。</p><h4 id="意识"><a href="#意识" class="headerlink" title="意识"></a>意识</h4><p>大卫·查默斯发现了理解大脑的两个问题，他把这两个问题称为意识的“难”和“易”问题。简单的问题是理解大脑如何处理信号、制定计划和控制行为。困难的问题是解释这种感觉，或者为什么它应该是什么感觉。人的信息处理很容易解释，但人的主观经验很难解释。</p><h4 id="计算主义和功能主义"><a href="#计算主义和功能主义" class="headerlink" title="计算主义和功能主义"></a>计算主义和功能主义</h4><p>计算主义是思维哲学中的一种立场，即人的思维或人脑（或两者）是一个信息处理系统，而思维是一种计算形式。计算主义认为，思维与身体之间的关系与软件与硬件之间的关系类似或相同，因此可能是身心问题的解决方案。这一哲学立场受到了人工智能研究人员和认知科学家在20世纪60年代的工作的启发，最初由哲学家杰里·福多和希拉里·普特南提出。</p><h4 id="强人工智能假设"><a href="#强人工智能假设" class="headerlink" title="强人工智能假设"></a>强人工智能假设</h4><p>约翰·西尔称之为“强大人工智能”的哲学立场是：“正确输入和输出的适当编程的计算机将因此拥有与人类拥有头脑完全相同的头脑。”。西尔用他的中文室论据反驳了这一主张，该论据要求我们查看计算机内部并试图找到“头脑”可能在哪里。</p><h4 id="机器人权利"><a href="#机器人权利" class="headerlink" title="机器人权利"></a>机器人权利</h4><p>如果一台机器能被制造出来，它也能感觉到吗？如果它能感觉到，它和人类有同样的权利吗？这个现在被称为“机器人权利”的问题，目前正被加利福尼亚未来研究所（Institute for the Future）所考虑，尽管许多批评家认为这个讨论还为时过早。一些对超人道主义的批评家认为，任何假设的机器人权利都存在于动物权利和人权的范围内。。Rofoundly在2010年的纪录片《插电与祈祷》中讨论过。</p><h3 id="监管"><a href="#监管" class="headerlink" title="监管"></a>监管</h3><p>智能机器或人机混合动力系统的功能有限制吗？超智能、超智能或超人智能是一种假设性的智能体，它拥有的智能远远超过最聪明和最有天赋的人的智能。监管机构也可以指这种代理人所拥有的情报的形式或程度。</p><h4 id="技术奇点"><a href="#技术奇点" class="headerlink" title="技术奇点"></a>技术奇点</h4><p>如果对强人工智能的研究能够产生足够的智能软件，那么它可能能够重新编程并改进自己。改进后的软件在自我改进方面会做得更好，从而导致递归的自我改进。因此，新的智能可以成倍增长，大大超过人类。科幻作家维诺·温格将这种情况称为“奇点”。技术奇点是指在技术进步的加速过程中，会产生一种失控的效果，其中人工智能将超越人类的智力和控制能力，从而彻底改变甚至终结文明。由于这种智能的能力可能无法理解，因此技术奇点是一种不可预测的事件，甚至是难以理解的事件。</p><h4 id="超人类主义"><a href="#超人类主义" class="headerlink" title="超人类主义"></a>超人类主义</h4><p>机器人设计师Hans Moravec、控制论者Kevin Warwick和发明家Ray Kurzweil预测，人类和机器将在未来融合为比两者都更有能力和更强大的电子人。这个想法被称为“超人类主义”，起源于Aldous Huxley和Robert Ettinger。</p><p>爱德华·弗雷德金认为“人工智能是进化的下一个阶段”，这是塞缪尔·巴特勒（Samuel Butler）的《机器中的达尔文》（Darwin in the Machines）（1863年）首次提出的一个观点，并在1998年由乔治·戴森（George Dyson）的同名书中加以扩展。</p><h3 id="小说"><a href="#小说" class="headerlink" title="小说"></a>小说</h3><p>自远古以来，有思想能力的人造生物就作为讲故事的工具出现，一直是科幻小说中的一个主题。</p><p>在这些作品中，一个常见的比喻始于玛丽·雪莱的《科学怪人》，在那里，一个人类的创造物成为了对其主人的威胁。这包括亚瑟·C·克拉克（Arthur C.Clarke）和斯坦利·库布里克（Stanley Kubrick）的《2001：太空漫游》（A Space Odyssey）（1968年和1968年），哈尔·9000（Hal 9000），负责探索一号宇宙飞船的凶残计算机，以及《终结者》（1984年）和《矩阵》（1999年）。</p><p>艾萨克·阿西莫夫在许多书和故事中介绍了机器人学的三个定律，最著名的是关于同名超级智能计算机的“多变量”系列。阿西莫夫定律通常是在机器伦理学的外行讨论中提出的；虽然几乎所有的人工智能研究人员都通过流行文化熟悉阿西莫夫定律，但他们通常认为这些定律由于许多原因是无用的，其中之一就是它们的模糊性。</p><p>《贝壳中的漫画鬼》和科幻系列小说《沙丘》探讨了人与机器的融合。在20世纪80年代，艺术家Hajime Sorayama的性感机器人系列在日本被绘制和出版，描绘了真实的有机人体，有栩栩如生的肌肉金属皮肤，后来又出版了《妇科医生》一书，随后被乔治·卢卡斯和其他创作家使用或受到影响。索拉亚马从未认为这些有机机器人是自然的真实组成部分，但始终是人类思维的非自然产物，一种存在于头脑中的幻想，即使以实际形式实现。</p><p>有几部作品使用人工智能来强迫我们面对什么使我们成为人类这一基本问题，向我们展示具有感知能力的人工生物，从而使我们受苦。这出现在卡雷尔·阿佩克的《R.U.R.》、电影《A.I.人工智能》和《前机器》以及小说《机器人梦见电羊》中。菲利普·K·迪克。迪克认为我们对人类主体性的理解是由人工智能创造的技术改变的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在计算机科学中，人工智能（ai）有时被称为机器智能，是机器所展示的智能，与人类和动物所展示的自然智能不同。计算机科学将人工智能研究定义为对“智能代理”的研究：任何感知环境并采取最大化成功实现目标机会的行动的设备。通俗地说，“人工智能”一词用于描述模拟人类与其他人类关联的“认
      
    
    </summary>
    
    
      <category term="人工智能, AI" scheme="http://wangchengfei.info/tags/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD-AI/"/>
    
  </entry>
  
</feed>
